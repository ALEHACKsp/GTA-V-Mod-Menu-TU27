#include <xtl.h>
#include <xhttp.h>
#include <xkelib.h>
#include <xauth.h>
#include "HvPeekPoke.h"

#define PRIVATE

#define MENUISAUTHED

int GlobalToAddress(int Global, int imm) {
	return *(int *)(0x83d3cb98 + ((Global & 0xFFFFFF) >> 16 & 0xFFFC) + (imm * 4));
}

#include "globals.h" 
#include "Tools.h"
#include "GTAVMenu.h"
#include "Input.h"
#include "GTAVNatives.h"
#include "ServerCommunicator.h"
#include "MenuSecurity.h"
#include "EncryptedDWORD.h"
#include "base64.h"
#include "titleHooks.h"
#include "natives.h"
#include "types.h"
#include "HUD.h"
#include <cfloat>
#include <string>


typedef void(*XNotifyQueueUI2)(int _34, int _0, int _2, WCHAR *TEXT, int _0_);
XNotifyQueueUI2 XNotify = (XNotifyQueueUI2)0x816AA2C8;//0x83521CD8

int gauge = 0;
int fan;
bool wtf = false;
char *main_text;
bool attachspawn = false;
bool esp2 = false;
bool lazerlo = false;
bool Pass3 = false;
bool normalspawn = false;
bool normalspawn1 = false;
bool normalspawn2 = false;
bool ufomode = false;
bool ufomode2 = false;
bool ufomode3 = false;
bool ufomode4 = false;
bool ufomode5 = false;
bool ufomode6 = false;
bool ufomode7 = false;
bool ufomode8 = false;
bool pwvcheck4 = false;
int ClonePlayerIndex = 0;
bool ufomode9 = false;
bool ufomode10 = false;
bool ufomode11 = false;
bool ufomode12 = false;
bool ufomode13 = false;
bool ufomode133 = false;
bool ufomode14 = false;
bool ufomode15 = false;
bool ufomode16 = false;
bool pwloaded = false;
bool pwvcheck = false;
bool pwvcheck11 = false;
bool pwvcheck1 = false;
bool pwvcheck2 = false;
bool pwvcheck3 = false;
bool ClonePlayer1 = false;
int ClonePlayerIndex1 = 0;
bool pwvcheck5 = false;
bool pwvcheck6 = false;
bool pwvcheck7 = false;
bool pwvcheck8 = false;
bool pwvcheck9 = false;
bool pwvcheck10 = false;
bool pwvcheck12 = false;
bool ufomode17 = false;
bool custom_plate = false;
bool custom_marquee = false;
bool custom_per = false;
bool ClonePlayer = false;
bool custome_text = false;
bool custom_rgb124 = false;
bool custom_rgb125 = false;
bool custom_rgb126 = false;
bool custom_rgb127 = false;
bool custom_rgb128 = false;
bool custom_rgb129 = false;
bool custom_rgb130 = false;
bool custom_rgb131 = false;
bool custom_rgb132 = false;
bool custom_kills = false;
bool custom_deaths = false;
bool custom_rankMP0 = false;
bool custom_rankMP1 = false;
bool custom_rankMP2 = false;
bool fun_gun = false;
bool cross = false;
bool cross02 = false;
bool DpadRightDownPressed = false;
bool DpadLeftDownPressed = false;
bool cross03 = false;
bool cross04 = false;
bool custom_money = false;
bool custom_rgb = false;
bool custom_rgb1 = false;
bool invisibleVeh = false;
bool custom_rgb2 = false;
bool custom_rgb3 = false;
bool custom_rgb4 = false;
bool custom_rgb5 = false;
bool custom_teleport = false;
char *pexp = "";
char *pexp1 = "";
float pcoords[3];
int animid10;
int Player2;
int Player1;
int CustomXP = 0;
int Var_Pointer;
XOVERLAPPED Overlapped;
WCHAR Username[512];
XOVERLAPPED Overlapped2;
WCHAR Username2[15];
WCHAR Username3[15];
WCHAR Username4[14];
char gamertag;
using std::string;
typedef unsigned long long u64;

EncryptedDWORD *hook1;
EncryptedDWORD *hook2;
EncryptedDWORD *hook3;
EncryptedDWORD *nativeHook;
EncryptedDWORD *printToScreen;
EncryptedDWORD *customGetModelDim;



float x_f = 0.50f;
bool rocket_gun = false;
int objecthandle;
int objecthandle1;
float objectcoordx, objectcoordy, objectcoordz, objectheading, objectpitch = 0, objectroll = 0, objectyaw = 0;
float objectpitch1 = 0, objectroll1 = 0, objectyaw1 = 0;
float prop;
float prop1;
float prop2;
float prop3;
float prop4;
float prop5;
float prop6;
float prop7;
float prop8;
float ClonedPlayerPos1[3];
int waterobj;
int neonr, neong, neonb;
bool zdrop = false;
int wheel = 0;
int tankplayer1 = 0;
int cashclient;
int Handle;
int ufo;
int ufo0;
int ufo1;
int ufo2;
int ufo3;
int ufo4;
int ufo5;
int ufo6;
int ufo7;
int ufo8;
int ufo9;
int ufo10;
int ufo11;
int ufo12;
int ufo13;
int ufo14;
int ufo15;
int ufo16;
int ufo17;
int ufo18;
int ufo19;
int ufo20;
int ufo21;
int fagcashclient;
int onecashclient;
int Addercashclient;
bool alltelefootway = false;
bool allkickedfromveh = false;
bool allkickedfromveh2 = false;
bool telefoot_way = false;
bool objectspawn = false;
bool objectspawn1 = false;
bool aiming = false;
bool clone_player_rider = false;
int chop;
int chop1;
int chop2;
int chop3;
int chop4;
int chop5;
int chop6;
int rocketid;
bool warp = false;
int animid;
bool nap = false;
bool kidnap = false;
bool kickfromveh = false;
bool freeze = false;
bool oblivion = false;
bool oblivion1 = false;
bool oblivion2 = false;
bool molotovloop = false;
bool molotovloop1 = false;
bool molotovloop2 = false;
bool molotovloop3 = false;
bool molotovloop4 = false;
bool molotovloop5 = false;
bool molotovloop6 = false;
bool molotovloop7 = false;
bool molotovloop8 = false;
bool molotovloop9 = false;
bool molotovloop10 = false;
bool molotovloop11 = false;
bool molotovloop12 = false;
bool fatalloop = false;
bool freezeall = false;
bool STFUTrollactive = false;
bool cheat_superjump = false;
bool cheat_runfast = false;
bool cheat_swimfast = false;
bool cheat_superpunch = false;
bool cheat_explosiveammo = false;
bool proppy0 = false;
bool proppy1 = false;
bool proppy2 = false;
bool proppy3 = false;
bool proppy4 = false;
bool proppy5 = false;
bool cheat_1shot = false;
bool cheat_fireammo = false;
bool causelag = false;
int model;
int model1;
unsigned int uammo2 = 0x82F02FEC;
unsigned int uammo = 0x82EEB7E4;
extern "C" const TCHAR szModuleName[] = TEXT("GTAVMenu.dll");

int CarPed;
bool playerInvincibilityActive = false;
bool TargetingMode2 = false;
bool buttonpressed = false;
bool rainbow = false;
bool rainbow1 = false;
bool invisible = false;
bool superjump = false;
bool superruncheck = false;
bool deagle = false;
bool carvisible = false;
bool playervisible = false;
bool invisiblePlayer = false;
int myplayerped;
int rainbowcar;
int rainbowcar1;
int invisiblecar = false;
int modelHash;
int modelHash1;
int vehToSpawnHash;
int handle;
int modelHash2;
int vehToSpawnHash1;
bool showingMessageOnScreen = false;
bool fadingMessage = false;
int messageFade = 0;
stack<char*> messageLog;
int showingMessageTimer = 0;
int showingMessageTimerStart = 0;
XVIDEO_MODE VideoMode;
char messageBuffer[256];
float messageTextX = 0.50000000f;
float messageTextY = 0.75000000f;
INT Cashtype = 0xFE18F3AF;

void ShowMessageOnScreenold(char *format, ...) {
	va_list args;
	va_start(args, format);
	vsprintf(messageBuffer, format, args);
	va_end(args);

	showingMessageTimer = 0;
	showingMessageOnScreen = true;
	showingMessageTimerStart = GetTickCount();
	messageFade = 255;
}

void ShowMessageOnScreen(char* Text, ...) {
	SET_NOTIFICATION_TEXT_ENTRY("STRING");
	ADD_TEXT_COMPONENT_STRING(Text);
	_SET_NOTIFICATION_MESSAGE_CLAN_TAG("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", false, 2, "~HUD_COLOUR_BLUE~xxHASTERxx v4.9 Private Menu", "~HUD_COLOUR_RADAR_DAMAGE~TU 1.27", 0.5, "___XeX");
	UI::_DRAW_NOTIFICATIONv2(0, 1, 0, 255, 0, 190);
	AUDIO::PLAY_SOUND_FRONTEND(-1, "Hack_Success", "DLC_HEIST_BIOLAB_PREP_HACKING_SOUNDS");
}

void ShowMessageOnScreen1(char* Text, ...) {
	SET_NOTIFICATION_TEXT_ENTRY("STRING");
	ADD_TEXT_COMPONENT_STRING(Text);
	_SET_NOTIFICATION_MESSAGE_CLAN_TAG("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", false, 2, "~HUD_COLOUR_BLUE~xxHASTERxx v4.9 Private Menu", "~HUD_COLOUR_RADAR_DAMAGE~TU 1.27", 0.5, "___XeX");
	UI::_DRAW_NOTIFICATIONv2(0, 1, 0, 255, 0, 190);
}

enum ScaleformButtons {
	ARROW_UP,
	ARROW_DOWN,
	ARROW_LEFT,
	ARROW_RIGHT,
	BUTTON_DPAD_UP,
	BUTTON_DPAD_DOWN,
	BUTTON_DPAD_RIGHT,
	BUTTON_DPAD_LEFT,
	BUTTON_DPAD_BLANK,
	BUTTON_DPAD_ALL,
	BUTTON_DPAD_UP_DOWN,
	BUTTON_DPAD_LEFT_RIGHT,
	BUTTON_LSTICK_UP,
	BUTTON_LSTICK_DOWN,
	BUTTON_LSTICK_LEFT,
	BUTTON_LSTICK_RIGHT,
	BUTTON_LSTICK,
	BUTTON_LSTICK_ALL,
	BUTTON_LSTICK_UP_DOWN,
	BUTTON_LSTICK_LEFT_RIGHT,
	BUTTON_LSTICK_ROTATE,
	BUTTON_RSTICK_UP,
	BUTTON_RSTICK_DOWN,
	BUTTON_RSTICK_LEFT,
	BUTTON_RSTICK_RIGHT,
	BUTTON_RSTICK,
	BUTTON_RSTICK_ALL,
	BUTTON_RSTICK_UP_DOWN,
	BUTTON_RSTICK_LEFT_RIGHT,
	BUTTON_RSTICK_ROTATE,
	BUTTON_A,
	BUTTON_B,
	BUTTON_X,
	BUTTON_Y,
	BUTTON_LB,
	BUTTON_LT,
	BUTTON_RB,
	BUTTON_RT,
	BUTTON_START,
	BUTTON_BACK,
	RED_BOX,
	RED_BOX_1,
	RED_BOX_2,
	RED_BOX_3,
	LOADING_HALF_CIRCLE_LEFT,
	ARROW_UP_DOWN,
	ARROW_LEFT_RIGHT,
	ARROW_ALL,
	LOADING_HALF_CIRCLE_LEFT_2,
	SAVE_HALF_CIRCLE_LEFT,
	LOADING_HALF_CIRCLE_RIGHT,
};

int mov;
int instructCount;
bool newTimerTick = true;
int maxTimerCount;

void SetupTimer(int tickTime) {
	if (newTimerTick) {
		maxTimerCount = GET_GAME_TIMER() + tickTime;
		newTimerTick = false;
	}
}

bool IsTimerReady() {
	return GET_GAME_TIMER() > maxTimerCount;
}

void ResetTimer() {
	newTimerTick = true;
}

void set_text_component(char *text) {
	GRAPHICS::_0x3AC9CB55("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(text);
	GRAPHICS::_0x386CE0B8();
}

void instructionalSetup() {
	instructCount = 0;
	mov = GRAPHICS::REQUEST_SCALEFORM_MOVIE("instructional_buttons");
	GRAPHICS::_0x7B48E696(mov, 255, 255, 255, 0);
	GRAPHICS::_0x215ABBE8(mov, "CLEAR_ALL");
	GRAPHICS::_0x02DBF2D7();
	GRAPHICS::_0x215ABBE8(mov, "SET_CLEAR_SPACE");
	GRAPHICS::_0x716777CB(200);
	GRAPHICS::_0x02DBF2D7();
}

void addInstructional(char *text, int button) {
	GRAPHICS::_0x215ABBE8(mov, "SET_DATA_SLOT");
	GRAPHICS::_0x716777CB(instructCount);
	GRAPHICS::_0x716777CB(button);
	set_text_component(text);
	GRAPHICS::_0x02DBF2D7();
	instructCount++;
}

void instructionalClose() {
	GRAPHICS::_0x215ABBE8(mov, "DRAW_INSTRUCTIONAL_BUTTONS");
	GRAPHICS::_0x02DBF2D7();
	GRAPHICS::_0x215ABBE8(mov, "SET_BACKGROUND_COLOUR");
	GRAPHICS::_0x716777CB(0);
	GRAPHICS::_0x716777CB(0);
	GRAPHICS::_0x716777CB(0);
	GRAPHICS::_0x716777CB(80);
	GRAPHICS::_0x02DBF2D7();
}

void RainbowGun() {
	Hash WeapHash;
	WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
	WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 7));
}

void particalloop1() {
	STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_exile3");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_exile3");
	GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_ex3_water_dinghy_wash", PlayerPedId(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
}


void ShowMessageUpdate() {

	if (!showingMessageOnScreen) {
		return;
	}

	if ((GetTickCount() - showingMessageTimerStart) >= 4000) {
		messageFade--;
	}

	if ((GetTickCount() - showingMessageTimerStart) >= 5000) {
		showingMessageOnScreen = false;
		showingMessageTimer = 0;
		ZeroMemory(&messageBuffer, 256);
	}

	PrintToScreen(messageBuffer, messageTextX, messageTextY, 255, 255, 255, messageFade, 0.45f, 0.45f, 1, 0);
}

bool IsPlayerWithinArea(float playerX, float playerY, float areaX, float areaY, float areaSize) {
	float corner1X = areaX;
	float corner1Y = areaY;

	float corner2X = areaX + areaSize;
	float corner2Y = areaY + areaSize;

	float corner3X = areaX + areaSize;
	float corner3Y = areaY;

	float corner4X = areaX;
	float corner4Y = areaY + areaSize;

	if (playerX >= corner1X && playerX <= corner2X && playerY >= corner1Y && playerY <= corner2Y) {
		return true;
	}

	return false;
}

void _CALL_AIRSTRIKE(float x, float y, float z) {
	if (!HAS_WEAPON_ASSET_LOADED(0x13579279)) {
		request_weapon_asset(0x13579279, 31, false);
		_CALL_AIRSTRIKE(x, y, z);
	} else {
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x, y, z + 900.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 0.612837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5), y + (float)(rand() % 5), z + 650.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 2.212837E+09f);

		//Second
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + 5.0f, y, z + 750.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 0.412837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5) + 5.0f, y + (float)(rand() % 5), z + 550.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 1.012837E+09f);

		//Third
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + 5.0f, y + 10.0f, z + 2000.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 0.512837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5), y + (float)(rand() % 5) + 100.0f, z + 750.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 1.012837E+09f);

		//Fourth
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x - 5.0f, y + 10.0f, z + 1000.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 0.512837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5), y + (float)(rand() % 5) + 100.0f, z + 850.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 1.012837E+09f);

		//Fifth
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + 5.0f, y - 10.0f, z + 10000.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 0.912837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5), y + (float)(rand() % 5) + 100.0f, z + 950.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 1.012837E+09f);

		//Sixth
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x - 10.0f, y + 10.0f, z + 10000.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 0.312837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5), y + (float)(rand() % 5) + 100.0f, z + 1050.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 1.012837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x - 10.0f, y + 10.0f, z + 10000.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 0.312837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5), y + (float)(rand() % 5) + 100.0f, z + 1050.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 1.012837E+09f);

		//Seventh
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + 10.0f, y - 10.0f, z + 10000.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 0.212837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5), y + (float)(rand() % 5) + 100.0f, z + 1150.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 1.012837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + 10.0f, y - 10.0f, z + 10000.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 0.212837E+09f);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5), y + (float)(rand() % 5) + 100.0f, z + 1150.0f, x, y, z, 200, true, 0x13579279, rocketid, true, false, 1.012837E+09f);
	}
}

void _CALL_TAZER(float x, float y, float z) {
	if (!HAS_WEAPON_ASSET_LOADED(0x3656C8C1)) {
		request_weapon_asset(0x3656C8C1, 31, false);
		_CALL_TAZER(x, y, z);
	} else {
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x, y, z, x, y, z, 200, true, 0x3656C8C1, rocketid, true, false, 0);
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x + (float)(rand() % 5), y + (float)(rand() % 5), z, x, y, z, 200, true, 0x3656C8C1, rocketid, true, false, 0);
	}
}

int are_you_in_veh_if_so_get_handle() {
	if (!is_ped_on_foot(PlayerPedId())) {
		int vehicle;
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		return vehicle;
	}
	return 0;
}
PXOVERLAPPED over;
PMESSAGEBOX_RESULT result;
LPCWSTR* text;

int getFirstFreeSeatIndex(int vehicle) {

	int maxSeatNum = get_vehicle_max_number_of_passengers(vehicle);

	for (int i = -1; i < maxSeatNum; i++) {
		if (is_vehicle_seat_free(vehicle, i)) {
			return i;
		}
	}
	return -2;
}

void ProtectionLoop2() {
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(0)) {
		Player1 = 0;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(1)) {
		Player1 = 1;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(2)) {
		Player1 = 2;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(3)) {
		Player1 = 3;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(4)) {
		Player1 = 4;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(5)) {
		Player1 = 5;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(6)) {
		Player1 = 6;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(7)) {
		Player1 = 7;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(8)) {
		Player1 = 8;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(9)) {
		Player1 = 9;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(10)) {
		Player1 = 10;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(11)) {
		Player1 = 11;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(12)) {
		Player1 = 12;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(13)) {
		Player1 = 13;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(14)) {
		Player1 = 14;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(15)) {
		Player1 = 15;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(16)) {
		Player1 = 16;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(17)) {
		Player1 = 17;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(18)) {
		Player1 = 18;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
}


void ProtectionLoop69() {
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(0, GetPlayerHandle(handle))) {
		Player1 = 0;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(1, GetPlayerHandle(handle))) {
		Player1 = 1;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(2, GetPlayerHandle(handle))) {
		Player1 = 2;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(3, GetPlayerHandle(handle))) {
		Player1 = 3;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(4, GetPlayerHandle(handle))) {
		Player1 = 4;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(5, GetPlayerHandle(handle))) {
		Player1 = 5;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(6, GetPlayerHandle(handle))) {
		Player1 = 6;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(7, GetPlayerHandle(handle))) {
		Player1 = 7;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(8, GetPlayerHandle(handle))) {
		Player1 = 8;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(9, GetPlayerHandle(handle))) {
		Player1 = 9;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(10, GetPlayerHandle(handle))) {
		Player1 = 10;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(11, GetPlayerHandle(handle))) {
		Player1 = 11;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(12, GetPlayerHandle(handle))) {
		Player1 = 12;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(13, GetPlayerHandle(handle))) {
		Player1 = 13;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(14, GetPlayerHandle(handle))) {
		Player1 = 14;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(15, GetPlayerHandle(handle))) {
		Player1 = 15;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(16, GetPlayerHandle(handle))) {
		Player1 = 16;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(17, GetPlayerHandle(handle))) {
		Player1 = 17;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(18, GetPlayerHandle(handle))) {
		Player1 = 18;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}

}
void ProtectionLoop() {
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(0, PlayerPedId())) {
		Player1 = 0;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(1, PlayerPedId())) {
		Player1 = 1;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(2, PlayerPedId())) {
		Player1 = 2;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(3, PlayerPedId())) {
		Player1 = 3;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(4, PlayerPedId())) {
		Player1 = 4;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(5, PlayerPedId())) {
		Player1 = 5;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(6, PlayerPedId())) {
		Player1 = 6;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(7, PlayerPedId())) {
		Player1 = 7;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(8, PlayerPedId())) {
		Player1 = 8;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(9, PlayerPedId())) {
		Player1 = 9;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(10, PlayerPedId())) {
		Player1 = 10;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(11, PlayerPedId())) {
		Player1 = 11;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(12, PlayerPedId())) {
		Player1 = 12;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(13, PlayerPedId())) {
		Player1 = 13;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(14, PlayerPedId())) {
		Player1 = 14;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(15, PlayerPedId())) {
		Player1 = 15;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(16, PlayerPedId())) {
		Player1 = 16;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(17, PlayerPedId())) {
		Player1 = 17;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(18, PlayerPedId())) {
		Player1 = 18;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 2, 2.0f, true, false, 0.0f);
	}

}
void ProtectionLoop7() {

	if (IS_PLAYER_TARGETTING_ENTITY(0, PlayerPedId())) {
		Player1 = 0;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(1, PlayerPedId())) {
		Player1 = 1;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(2, PlayerPedId())) {
		Player1 = 2;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(3, PlayerPedId())) {
		Player1 = 3;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(4, PlayerPedId())) {
		Player1 = 4;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(5, PlayerPedId())) {
		Player1 = 5;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(6, PlayerPedId())) {
		Player1 = 6;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(7, PlayerPedId())) {
		Player1 = 7;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(8, PlayerPedId())) {
		Player1 = 8;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(9, PlayerPedId())) {
		Player1 = 9;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(10, PlayerPedId())) {
		Player1 = 10;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(11, PlayerPedId())) {
		Player1 = 11;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(12, PlayerPedId())) {
		Player1 = 12;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(13, PlayerPedId())) {
		Player1 = 13;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(14, PlayerPedId())) {
		Player1 = 14;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(15, PlayerPedId())) {
		Player1 = 15;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(16, PlayerPedId())) {
		Player1 = 16;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(17, PlayerPedId())) {
		Player1 = 17;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(18, PlayerPedId())) {
		Player1 = 18;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	}

}
void ProtectionLoop6() {

	if (IS_PLAYER_TARGETTING_ENTITY(0, PlayerPedId())) {
		Player1 = 0;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(1, PlayerPedId())) {
		Player1 = 1;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(2, PlayerPedId())) {
		Player1 = 2;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(3, PlayerPedId())) {
		Player1 = 3;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(4, PlayerPedId())) {
		Player1 = 4;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(5, PlayerPedId())) {
		Player1 = 5;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(6, PlayerPedId())) {
		Player1 = 6;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(7, PlayerPedId())) {
		Player1 = 7;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(8, PlayerPedId())) {
		Player1 = 8;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(9, PlayerPedId())) {
		Player1 = 9;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(10, PlayerPedId())) {
		Player1 = 10;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(11, PlayerPedId())) {
		Player1 = 11;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(12, PlayerPedId())) {
		Player1 = 12;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(13, PlayerPedId())) {
		Player1 = 13;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(14, PlayerPedId())) {
		Player1 = 14;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(15, PlayerPedId())) {
		Player1 = 15;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(16, PlayerPedId())) {
		Player1 = 16;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(17, PlayerPedId())) {
		Player1 = 17;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_TARGETTING_ENTITY(18, PlayerPedId())) {
		Player1 = 18;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 13, 2.0f, true, false, 0.0f);
	}

}
void ProtectionLoop5() {
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(0, PlayerPedId())) {
		Player1 = 0;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(1, PlayerPedId())) {
		Player1 = 1;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(2, PlayerPedId())) {
		Player1 = 2;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(3, PlayerPedId())) {
		Player1 = 3;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(4, PlayerPedId())) {
		Player1 = 4;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(5, PlayerPedId())) {
		Player1 = 5;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(6, PlayerPedId())) {
		Player1 = 6;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(7, PlayerPedId())) {
		Player1 = 7;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(8, PlayerPedId())) {
		Player1 = 8;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(9, PlayerPedId())) {
		Player1 = 9;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(10, PlayerPedId())) {
		Player1 = 10;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(11, PlayerPedId())) {
		Player1 = 11;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(12, PlayerPedId())) {
		Player1 = 12;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(13, PlayerPedId())) {
		Player1 = 13;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(14, PlayerPedId())) {
		Player1 = 14;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(15, PlayerPedId())) {
		Player1 = 15;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(16, PlayerPedId())) {
		Player1 = 16;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(17, PlayerPedId())) {
		Player1 = 17;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(18, PlayerPedId())) {
		Player1 = 18;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		REMOVE_WEAPON_FROM_PED(pedID, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(pedID, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(pedID, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(pedID, 0x63AB0442); // homing launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0xC734385A); // marksman rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x7F229F94); // bullpup rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xBFEFFF6D); // assault rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x83BF0278); // carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xAF113F99); // advanced rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0xC0A3098D); // special carbine rifle
		REMOVE_WEAPON_FROM_PED(pedID, 0x99B507EA); // knife
		REMOVE_WEAPON_FROM_PED(pedID, 0x678B81B1); // night stick
		REMOVE_WEAPON_FROM_PED(pedID, 0x4E875F73); // hammer
		REMOVE_WEAPON_FROM_PED(pedID, 0x958A4A8F); // bat
		REMOVE_WEAPON_FROM_PED(pedID, 0x440E4788); // golf club
		REMOVE_WEAPON_FROM_PED(pedID, 0x84BD7BFD); // crowbar
		REMOVE_WEAPON_FROM_PED(pedID, 0x1B06D571); // pistol
		REMOVE_WEAPON_FROM_PED(pedID, 0xF9E6AA4B); // bottle
		REMOVE_WEAPON_FROM_PED(pedID, 0x92A27487); // dagger
		REMOVE_WEAPON_FROM_PED(pedID, 0xB32BE614); // knuckle dusters
	}

}

void ProtectionLoop4() {
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(0, PlayerPedId())) {
		Player1 = 0;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(1, PlayerPedId())) {
		Player1 = 1;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(2, PlayerPedId())) {
		Player1 = 2;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(3, PlayerPedId())) {
		Player1 = 3;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(4, PlayerPedId())) {
		Player1 = 4;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(5, PlayerPedId())) {
		Player1 = 5;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(6, PlayerPedId())) {
		Player1 = 6;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(7, PlayerPedId())) {
		Player1 = 7;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(8, PlayerPedId())) {
		Player1 = 8;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(9, PlayerPedId())) {
		Player1 = 9;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(10, PlayerPedId())) {
		Player1 = 10;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(11, PlayerPedId())) {
		Player1 = 11;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(12, PlayerPedId())) {
		Player1 = 12;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(13, PlayerPedId())) {
		Player1 = 13;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(14, PlayerPedId())) {
		Player1 = 14;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(15, PlayerPedId())) {
		Player1 = 15;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(16, PlayerPedId())) {
		Player1 = 16;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(17, PlayerPedId())) {
		Player1 = 17;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(18, PlayerPedId())) {
		Player1 = 18;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 29, 2.0f, true, false, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], 26, 2.0f, true, false, 0.0f);
	}

}

void ProtectionLoop3() {
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(0, PlayerPedId())) {
		Player1 = 0;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(1, PlayerPedId())) {
		Player1 = 1;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(2, PlayerPedId())) {
		Player1 = 2;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(3, PlayerPedId())) {
		Player1 = 3;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(4, PlayerPedId())) {
		Player1 = 4;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(5, PlayerPedId())) {
		Player1 = 5;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(6, PlayerPedId())) {
		Player1 = 6;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(7, PlayerPedId())) {
		Player1 = 7;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(8, PlayerPedId())) {
		Player1 = 8;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(9, PlayerPedId())) {
		Player1 = 9;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(10, PlayerPedId())) {
		Player1 = 10;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(11, PlayerPedId())) {
		Player1 = 11;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(12, PlayerPedId())) {
		Player1 = 12;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(13, PlayerPedId())) {
		Player1 = 13;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(14, PlayerPedId())) {
		Player1 = 14;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(15, PlayerPedId())) {
		Player1 = 15;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(16, PlayerPedId())) {
		Player1 = 16;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(17, PlayerPedId())) {
		Player1 = 17;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}
	if (IS_PLAYER_FREE_AIMING_AT_ENTITY(18, PlayerPedId())) {
		Player1 = 18;
		float Position[3];
		int pedID = GET_PLAYER_PED(Player1);
		GetEntityCoords(pedID, Position);
		AddExplosion(Position[0], Position[1], Position[2], 3, 2.0f, true, false, 0.0f);
	}

}

void Whosmutedmeloop() {
	if (NETWORK_AM_I_MUTED_BY_PLAYER(0)) {
		DisplayText(GetPlayerName(0), 0.15, 0.0300);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(1)) {
		DisplayText(GetPlayerName(1), 0.15, 0.0500);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(2)) {
		DisplayText(GetPlayerName(2), 0.15, 0.0800);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(3)) {
		DisplayText(GetPlayerName(3), 0.15, 0.1000);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(4)) {
		DisplayText(GetPlayerName(4), 0.15, 0.1300);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(5)) {
		DisplayText(GetPlayerName(5), 0.15, 0.1500);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(6)) {
		DisplayText(GetPlayerName(6), 0.15, 0.1800);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(7)) {
		DisplayText(GetPlayerName(7), 0.15, 0.2000);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(8)) {
		DisplayText(GetPlayerName(8), 0.15, 0.2300);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(9)) {
		DisplayText(GetPlayerName(9), 0.15, 0.2500);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(10)) {
		DisplayText(GetPlayerName(10), 0.15, 0.2800);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(11)) {
		DisplayText(GetPlayerName(11), 0.15, 0.3000);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(12)) {
		DisplayText(GetPlayerName(12), 0.15, 0.3300);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(13)) {
		DisplayText(GetPlayerName(13), 0.15, 0.3500);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(14)) {
		DisplayText(GetPlayerName(14), 0.15, 0.3800);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(15)) {
		DisplayText(GetPlayerName(15), 0.15, 0.4000);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(16)) {
		DisplayText(GetPlayerName(16), 0.15, 0.4300);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(17)) {
		DisplayText(GetPlayerName(17), 0.15, 0.4500);
	}
	if (NETWORK_AM_I_MUTED_BY_PLAYER(18)) {
		DisplayText(GetPlayerName(18), 0.15, 0.4800);
	}
}

void MosesLoop() {
	float pos[3];
	GetEntityCoords(PlayerPedId(), &pos[0], &pos[1], &pos[2]);
	MODIFY_WATER(pos[0], pos[1], pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 10, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 9, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 8, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 7, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 6, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 5, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 4, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 3, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 2, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 1, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 1, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 2, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 3, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 4, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 5, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 6, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 7, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 8, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 9, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 10, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 10, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1], pos[2] + 5, 5);
	MODIFY_WATER(pos[0] + 10, pos[1], pos[2], 5);
	MODIFY_WATER(pos[0], pos[1], pos[2] - 10, 5);
	MODIFY_WATER(pos[0] - 10, pos[1], pos[2], 5);
	MODIFY_WATER(pos[0], pos[1], pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 10, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 9, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 8, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 7, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 6, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 5, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 4, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 3, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 2, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 1, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 1, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 2, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 3, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 4, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 5, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 6, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 7, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 8, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 9, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 10, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 10, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1], pos[2] + 5, 5);
	MODIFY_WATER(pos[0] + 10, pos[1], pos[2], 5);
	MODIFY_WATER(pos[0], pos[1], pos[2] - 10, 5);
	MODIFY_WATER(pos[0] - 10, pos[1], pos[2], 5);
	MODIFY_WATER(pos[0], pos[1], pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 10, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 9, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 8, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 7, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 6, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 5, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 4, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 3, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 2, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 1, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 1, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 2, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 3, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 4, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 5, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 6, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 7, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 8, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 9, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] - 10, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1] + 10, pos[2], 5);
	MODIFY_WATER(pos[0], pos[1], pos[2] + 5, 5);
	MODIFY_WATER(pos[0] + 10, pos[1], pos[2], 5);
	MODIFY_WATER(pos[0], pos[1], pos[2] - 10, 5);
	MODIFY_WATER(pos[0] - 10, pos[1], pos[2], 5);

}

void Nocliploop() {
	float*  rot = GET_GAMEPLAY_CAM_ROT();
	float*  dir = _GET_CAMERA_DIRECTION(5.0);
	float d = 0.09;


	if (is_control_pressed(0, 52), is_control_pressed(0, 55))
		d -= 0.0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	float Position[3];
	GetEntityCoords(PlayerPedId(), Position);
	int ent = vehicle == 0 ? PlayerPedId() : vehicle;
	set_entity_collision(ent, true);
	set_entity_rotation3(ent, rot[1], rot[2], rot[3]);
	set_entity_coords(ent, Position[0], Position[1], Position[2] - 1);
	if (CONTROLS::IS_CONTROL_PRESSED(2, 0xC6)) {
		if (ent == vehicle)
			if (ent == PlayerPedId()) {
				set_entity_collision(ent, false);
				set_entity_rotation3(ent, rot[0], rot[1], rot[2]);
			}
		set_entity_coords(ent, Position[0] + (dir[0]), Position[1] + (dir[1]), Position[2] + (dir[2]));
	}
}

void DisableradarLoop() {
	void(UI::DISPLAY_RADAR(false));
	{
	}
}

void MobileRadio()

{
	void(AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(true));
	{
	}
}
void RaceLoop() {
	_START_SCREEN_EFFECT("RaceTurbo", 0, 0);
}

void WhosTalkingLoop() {
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(0)) {
		DisplayText(GetPlayerName(0), 0.15, 0.0300);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(1)) {
		DisplayText(GetPlayerName(1), 0.15, 0.0500);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(2)) {
		DisplayText(GetPlayerName(2), 0.15, 0.0800);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(3)) {
		DisplayText(GetPlayerName(3), 0.15, 0.1000);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(4)) {
		DisplayText(GetPlayerName(4), 0.15, 0.1300);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(5)) {
		DisplayText(GetPlayerName(5), 0.15, 0.1500);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(6)) {
		DisplayText(GetPlayerName(6), 0.15, 0.1800);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(7)) {
		DisplayText(GetPlayerName(7), 0.15, 0.2000);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(8)) {
		DisplayText(GetPlayerName(8), 0.15, 0.2300);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(9)) {
		DisplayText(GetPlayerName(9), 0.15, 0.2500);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(10)) {
		DisplayText(GetPlayerName(10), 0.15, 0.2800);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(11)) {
		DisplayText(GetPlayerName(11), 0.15, 0.3000);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(12)) {
		DisplayText(GetPlayerName(12), 0.15, 0.3300);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(13)) {
		DisplayText(GetPlayerName(13), 0.15, 0.3500);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(14)) {
		DisplayText(GetPlayerName(14), 0.15, 0.3800);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(15)) {
		DisplayText(GetPlayerName(15), 0.15, 0.4000);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(16)) {
		DisplayText(GetPlayerName(16), 0.15, 0.4300);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(17)) {
		DisplayText(GetPlayerName(17), 0.15, 0.4500);
	}
	if (NETWORK_IS_PLAYER_TALKING_CUSTOM(18)) {
		DisplayText(GetPlayerName(18), 0.15, 0.4800);
	}
}


bool heatvision = false;
int Heaty(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!heatvision) {
		heatvision = true;
		SET_SEETHROUGH(1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Heat Vision:~b~ON!");

	} else if (heatvision) {
		heatvision = false;
		SET_SEETHROUGH(0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Heat Vision:~r~OFF!");
	}
	return 0;
}

int Duncecap(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_PROP_INDEX(PlayerPedId(), 0, 1, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Duncecap Given");
	return 0;
}

int Duncecap1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	CLEAR_ALL_PED_PROPS(PlayerPedId());
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Duncecap Removed");
	return 0;
}


int PoliceUniform4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	PED::SET_PED_PROP_INDEX(PlayerPedId(), 0, 23, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 32, 3, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, 8, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 9, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 17, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 51, 0, 0);//  Police
	return 0;
}

int PoliceUniform(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	PED::SET_PED_PROP_INDEX(PlayerPedId(), 0, 23, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 32, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 17, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 9, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, 34, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 51, 1, 0);//  Police
	return 0;
}

int girl1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_PROP_INDEX(PlayerPedId(), 0, 45, 0, 2);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 24, 0, 2);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 3, 0, 0, 2);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 34, 0, 2);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, 0, 0, 2);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 9, 0, 0, 2);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 48, 0, 2);//  Police
	return 0;
}

int girl2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	PED::SET_PED_PROP_INDEX(PlayerPedId(), 0, 23, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 31, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, 8, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 3, 3, 0, 2);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 9, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 17, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 44, 0, 0);//  Police
	return 0;
}

int girl3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	PED::SET_PED_PROP_INDEX(PlayerPedId(), 0, 23, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 31, 3, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 17, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 9, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 3, 3, 0, 2);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, 34, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 44, 1, 0);//  Police
	return 0;
}

int girl4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 20, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 3, 15, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 10, 17, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 23, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, 38, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 20, 2, 0);//  Police
	return 0;
}

int girl5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 13, 0, 0);//pants
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 3, 3, 0, 0);//insidetorso
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 10, 17, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 23, 0, 0);//shoes
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 14, 16, 0);//torso1
	return 0;
}

int PoliceUniform1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_PROP_INDEX(PlayerPedId(), 0, 46, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 24, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 35, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 9, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 55, 0, 0);//  Police
	return 0;
}

int Give1Mil(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	network_earn_from_rockstar(10000000);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ You have received: 10,000,000 $");
	return 0;
}

int PoliceUniform2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	PED::SET_PED_PROP_INDEX(PlayerPedId(), 0, 51, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 11, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 3, 27, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 10, 17, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 3, 16, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 9, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 15, 0, 0);//  Police
	return 0;
}

int PoliceUniform3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, 38, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, 40, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 5, 45, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, 3, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 9, 45, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, 2, 0, 0);//  Police
	return 0;
}

int Airstrikepur(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	NETWORK_BUY_AIRSTRIKE(8000, 0, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Airstrike Bought!");
	return 0;
}

bool nightvision = false;
int Nighty(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!nightvision) {
		nightvision = true;
		SET_NIGHTVISION(1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Night vision:~b~ON!");

	} else if (nightvision) {
		nightvision = false;
		SET_NIGHTVISION(0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Night Vision:~r~OFF!");
	}
	return 0;
}

unsigned int get_hash_key(char *key) {
	size_t len = strlen(key);
	unsigned int hash, i;
	for (hash = i = 0; i < len; ++i) {
		hash += tolower(key[i]);
		hash += (hash << 10);
		hash ^= (hash >> 6);
	}
	hash += (hash << 3);
	hash ^= (hash >> 11);
	hash += (hash << 15);
	return hash;
}

void stoptheban() {
	set_stat_int(get_hash_key("MP0_BAD_SPORT_BITSET"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_OVERALL_BADSPORT"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_CHAR_IS_BADSPORT"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_DESTROYED_PVEHICLES"), 0);
	set_stat_int(get_hash_key("MP1_BAD_SPORT_BITSET"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_OVERALL_BADSPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_CHAR_IS_BADSPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_BECAME_BADSPORT_NUM"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_DESTROYED_PVEHICLES"), 0);
	set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0);
}

bool hash_check(char *string, int hash) {
	int hashval = get_hash_key(string);
	return (hashval == hash);
}

void GetCoordsInfrontOfSelf(float *OutX, float *OutY, float *OutZ) {
	int myPedHandle = PlayerPedId();
	float Pos[3], Heading = get_entity_heading(myPedHandle);
	GetEntityCoords(myPedHandle, Pos);
	*OutX = Pos[0], *OutY = Pos[1], *OutZ = Pos[2];
	*OutX += (10 * sin(-1 * Heading));
	*OutZ += (10 * cos(-1 * Heading));
}

enum GunType {
	WEAPON_STUNGUN,
};

enum Analog_InputScript {
	INPUT_SCRIPT_LEFT_AXIS_X = 188,
	INPUT_SCRIPT_LEFT_AXIS_Y = 189,
	INPUT_SCRIPT_RIGHT_AXIS_X = 190,
	INPUT_SCRIPT_RIGHT_AXIS_Y = 191,
};
enum Analog_Values {
	L_X_FullLeft = 0,
	L_X_Center = 127,
	L_X_FullRight = 254,
	L_Y_FullUp = 0,
	L_Y_Center = 127,
	L_Y_FullDown = 254,
	R_X_FullLeft = 0,
	R_X_Center = 127,
	R_X_FullRight = 254,
	R_Y_FullUp = 0,
	R_Y_Center = 127,
	R_Y_FullDown = 254,
};

enum Buttons {
	Button_Back = 0xBF,
	Button_Y = 0xC0,
	Button_A = 0xC1,
	Button_X = 0xC2,
	Button_B = 0xC3,
	Button_LB = 0xC4,
	Button_RB = 0xC5,
	Button_LT = 0xC6,
	Button_RT = 0xC7,
	Button_LS = 0xC8,
	Button_RS = 0xC9,
	Dpad_Up = 0xCA,
	Dpad_Down = 0xCB,
	Dpad_Left = 0xCC,
	Dpad_Right = 0xCD,
};

enum Camshake {
	LARGE_EXPLOSION_SHAKE,
	JOLT_SHAKE,
	SMALL_EXPLOSION_SHAKE,
	MEDIUM_EXPLOSION_SHAKE,
	SKY_DIVING_SHAKE,
	DRUNK_SHAKE,
	HAND_SHAKE,
	VIBRATE_SHAKE,
	ROAD_VIBRATION_SHAKE,
	GRENADE_EXPLOSION_SHAKE,
};

enum ExlposionType {
	GRENADE,
	GRENADELAUNCHER,
	STICKYBOMB,
	MOLOTOV, // 3
	ROCKET,
	TANKSHELL,
	HI_OCTANE,
	CAR,
	PLANE,
	PETROL_PUMP,
	BIKE,
	DIR_STEAM,
	DIR_FLAME,
	DIR_WATER_HYDRANT,
	DIR_GAS_CANISTER,
	BOAT,
	SHIP_DESTROY,
	TRUCK,
	BULLET,
	SMOKEGRENADELAUNCHER,
	SMOKEGRENADE,
	BZGAS,
	FLARE,
	GAS_CANISTER,
	EXTINGUISHER,
	PROGRAMMABLEAR,
	TRAIN,
	BARREL,
	PROPANE,
	BLIMP,
	DIR_FLAME_EXPLODE,
	TANKER,
	PLANE_ROCKET,
	VEHICLE_BULLET,
	GAS_TANK,
	FIREWORK
};


GTAVMenu *mainMenu;
GTAVMenu *Single2;
GTAVMenu *Toggle2;
GTAVMenu *ExplosionSet;
GTAVMenu *FireWorkMenu;
GTAVMenu *blamePlayers;
GTAVMenu *esplist;
GTAVMenu *blamePlayers2;
GTAVMenu *AllAttach;
GTAVMenu *quickOptionsMenu;
GTAVMenu *quickOptionsMenu2;
GTAVMenu *supermenu;
GTAVMenu *quickOptionsMenu3;
GTAVMenu *Protection;
GTAVMenu *quickOptionsMenu1;
GTAVMenu *onlinePlayersList;
GTAVMenu *playerOptionsMenu;
GTAVMenu *vehicleOptionMenu;
GTAVMenu *vehicleOptionMenu2;
GTAVMenu *NeonMenu;
GTAVMenu *vehicleextra;
GTAVMenu *vehicleextra1;
GTAVMenu *vehicleextra2;
GTAVMenu *vehicleextra3;
GTAVMenu *colorsmenu;
GTAVMenu *VehPaintMenu;
GTAVMenu *VehPaintMenu2;
GTAVMenu *RimPaint;
GTAVMenu *weaponOptionsMenu;
GTAVMenu *onlinePlayers;
GTAVMenu *onlinePlayersSubMenu;
GTAVMenu *CarSpawner;
GTAVMenu *CarSpawner2;
GTAVMenu *CarSpawnerMenu0;
GTAVMenu *CarSpawnerMenu0P2;
GTAVMenu *CarSpawnerMenu1;
GTAVMenu *CarSpawnerMenu2;
GTAVMenu *CarSpawnerMenu2P2;
GTAVMenu *CarSpawnerMenu3;
GTAVMenu *CarSpawnerMenu4;
GTAVMenu *CarSpawnerMenu4P2;
GTAVMenu *CarSpawnerMenu5;
GTAVMenu *CarSpawnerMenu6;
GTAVMenu *CarSpawnerMenu7;
GTAVMenu *CarSpawnerMenu8;
GTAVMenu *CashDropMenu;
GTAVMenu *CarSpawnerMenu8P2;
GTAVMenu *CarSpawnerMenu9;
GTAVMenu *CarSpawnerMenu9P2;
GTAVMenu *CarSpawnerMenu10;
GTAVMenu *CarSpawnerMenu11;
GTAVMenu *CarSpawnerMenu12;
GTAVMenu *CarSpawnerMenu13;
GTAVMenu *CarSpawnerMenu14;
GTAVMenu *CarSpawnerMenu14P2;
GTAVMenu *CarSpawnerMenu15;
GTAVMenu *CarSpawnerMenu16;
GTAVMenu *CarSpawnerMenu17;
GTAVMenu *CarSpawnerMenu18;
GTAVMenu *CarSpawnerMenu19;
GTAVMenu *CarSpawnerMenu20;
GTAVMenu *CarSpawnerMenu20P2;
GTAVMenu *CarSpawnerMenu21;
GTAVMenu *CarSpawnerMenu22;
GTAVMenu *CarSpawnerMenu23;
GTAVMenu *CarSpawnerMenu69;
//
GTAVMenu *CarSpawner1;
GTAVMenu *CarSpawner22;
GTAVMenu *CarSpawnerMenu00;
GTAVMenu *CarSpawnerMenu0P22;
GTAVMenu *CarSpawnerMenu2P22;
GTAVMenu *CarSpawnerMenu33;
GTAVMenu *CarSpawnerMenu44;
GTAVMenu *CarSpawnerMenu4P22;
GTAVMenu *CarSpawnerMenu55;
GTAVMenu *CarSpawnerMenu66;
GTAVMenu *CarSpawnerMenu77;
GTAVMenu *CarSpawnerMenu88;
GTAVMenu *CarSpawnerMenu8P22;
GTAVMenu *CarSpawnerMenu99;
GTAVMenu *CarSpawnerMenu9P22;
GTAVMenu *CarSpawnerMenu100;
GTAVMenu *CarSpawnerMenu111;
GTAVMenu *CarSpawnerMenu110;
GTAVMenu *CarSpawnerMenu122;
GTAVMenu *CarSpawnerMenu133;
GTAVMenu *CarSpawnerMenu144;
GTAVMenu *CarSpawnerMenu14P22;
GTAVMenu *CarSpawnerMenu155;
GTAVMenu *CarSpawnerMenu166;
GTAVMenu *CarSpawnerMenu177;
GTAVMenu *CarSpawnerMenu188;
GTAVMenu *CarSpawnerMenu199;
GTAVMenu *CarSpawnerMenu200;
GTAVMenu *CarSpawnerMenu20P22;
GTAVMenu *CarSpawnerMenu211;
GTAVMenu *CarSpawnerMenu222;
GTAVMenu *CarSpawnerMenu233;
GTAVMenu *CarSpawnerMenu699;
//
GTAVMenu *OnlinePlayerBasicOptions;
GTAVMenu *OnlinePlayerVehicleOptions;
GTAVMenu *AttachNumbers;
GTAVMenu *CampfireOptions;
GTAVMenu *MillOptions;
GTAVMenu *TreeOptions;
GTAVMenu *OnlinePlayerTeleport;
GTAVMenu *particlemenu;
GTAVMenu *NaughtyStuff;
GTAVMenu *NaughtyStuff2;
GTAVMenu *KickPlayerStuff;
GTAVMenu *AllOnlinePlayers;
GTAVMenu *AllAtachObject;
GTAVMenu *GuardMenu;//rideAnimalsModelMenu
GTAVMenu *rideAnimalsModelMenu;
GTAVMenu *rideAnimalsMenu;
GTAVMenu *BodyGuardAttachOptions;
GTAVMenu *TeleMenu;
GTAVMenu *TeleMenu2;
GTAVMenu *TeleMenu3;
GTAVMenu *TeleMenu4;
GTAVMenu *TeleMenu5;
GTAVMenu *ModelChanger4;
GTAVMenu *ModelChanger5;
GTAVMenu *ModelChanger6;
GTAVMenu *ModelChanger7;
GTAVMenu *ModelChanger8;
GTAVMenu *ModelChanger9;
GTAVMenu *ModelChanger10;
GTAVMenu *ModelChanger;
GTAVMenu *ModelChanger2;
GTAVMenu *ModelChanger303;
GTAVMenu *PropCustom0;
GTAVMenu *ModelChanger100;
GTAVMenu *ModelChanger1;
GTAVMenu *ModelChanger3;
GTAVMenu *MiscOptions;
GTAVMenu *ObjectAttachments;
GTAVMenu *weptints;
GTAVMenu *clrcross;
GTAVMenu *weptints2;
GTAVMenu *FunGunMenu;
GTAVMenu *WeaponGun;
GTAVMenu *ObjectAttachments2;
GTAVMenu *AttachPlayer;
GTAVMenu *ObjectAttachments3;
GTAVMenu *ObjectAttachments4;
GTAVMenu *ObjectAttachments5;
GTAVMenu *ObjectAttachments6;
GTAVMenu *ObjectAttachments7;
GTAVMenu *CashDropOptions;
GTAVMenu *ExtraNaughtyStuff;
GTAVMenu *ObjectOptions;
GTAVMenu *ObjectOptions2;
GTAVMenu *ObjectOptions1;
GTAVMenu *FunnyCarOptions;
GTAVMenu *ChopAnims;
GTAVMenu *CougAnims;
GTAVMenu *CoyoAnims;
GTAVMenu *RetAnims;
GTAVMenu *ModShop;
GTAVMenu *HornMenu;
GTAVMenu *HornMenu2;
GTAVMenu *HornMenu3;
GTAVMenu *TintMenu;
GTAVMenu *tiresmoke;
GTAVMenu *tiresmoke1;
GTAVMenu *OpenMenu;
GTAVMenu *PerformanceMenu;
GTAVMenu *BodyMenu;
GTAVMenu *WheelMenu;
GTAVMenu *ArmourMenu;
GTAVMenu *HighEnd;
GTAVMenu *EngineMenu;
GTAVMenu *TransMenu;
GTAVMenu *BrakesMenu;
GTAVMenu *SuspMenu;
GTAVMenu *ExMenu;
GTAVMenu *FbMenu;
GTAVMenu *RbMenu;
GTAVMenu *SkMenu;
GTAVMenu *InteriorMenu;
GTAVMenu *HoodMenu;
GTAVMenu *LFenderMenu;
GTAVMenu *RFenderMenu;
GTAVMenu *RoofMenu;
GTAVMenu *GrillMenu;
GTAVMenu *SpoilerMenu;
GTAVMenu *Lowrider;
GTAVMenu *Muscle;
GTAVMenu *HighEnd42;
GTAVMenu *Offroad;
GTAVMenu *Sport;
GTAVMenu *SportMenu2;
GTAVMenu *SUV;
GTAVMenu *Tuner;
GTAVMenu *TunerMenu2;
GTAVMenu *Pegasus;
GTAVMenu *Weather;
GTAVMenu *Drop;
GTAVMenu *SpeedoMeter;
GTAVMenu *Recovery;
GTAVMenu *RGMenu;
GTAVMenu *FWMenu;
GTAVMenu *VWMenu;
GTAVMenu *male;
GTAVMenu *female;
GTAVMenu *Character1;
GTAVMenu *outfitsmenu;
GTAVMenu *fxmenu;
GTAVMenu *Character2;
GTAVMenu *Character3;
GTAVMenu *RankMenuMP0;
GTAVMenu *KDMP0;
GTAVMenu *RankMenuMP1;
GTAVMenu *MoneyMenuMP0;
GTAVMenu *MoneyMenuMP1;
GTAVMenu *MovementMenu;
GTAVMenu *FavoriteModelsMenu;
GTAVMenu *AnimationMenu;
GTAVMenu *Animal3;//AnimalRiding
GTAVMenu *Animal4;
GTAVMenu *AnimalRiding;
GTAVMenu *GaurdMenu2;
GTAVMenu *CIA23;
GTAVMenu *Body23;
GTAVMenu *Strip23;
GTAVMenu *Zom23;
GTAVMenu *Maude23;
GTAVMenu *Naked23;
GTAVMenu *Male23;
GTAVMenu *Gang23;
GTAVMenu *Priest23;
GTAVMenu *Alien23;
GTAVMenu *SportOptions;
GTAVMenu *SexOptions;
GTAVMenu *DanceOptions;
GTAVMenu *SuperHeroOptions;
GTAVMenu *MiscOptions2;
GTAVMenu *MiscOptions5;
GTAVMenu *MiscOptions9;
GTAVMenu *MiscOptions6;
GTAVMenu *MoneyOptions;
GTAVMenu *MiscOption2Pag2;
GTAVMenu *MiscOptions3;
GTAVMenu *MiscOptions4;
GTAVMenu *mapmods;
GTAVMenu *CreatorVehicle;
GTAVMenu *ObjectOptions3;
GTAVMenu *watermenu;
GTAVMenu *Bodydancer;
GTAVMenu *veh1;
GTAVMenu *veh2;
GTAVMenu *BodySport;
GTAVMenu *BodySex;
GTAVMenu *BodyMimi;
GTAVMenu *Scenee;
GTAVMenu *Scenee2;
GTAVMenu *BodyMisc;
GTAVMenu *Poledancer;
GTAVMenu *ModelChanger300;
GTAVMenu *ModelChanger301;
GTAVMenu *ModelChanger30;
GTAVMenu *MenuOptions;
GTAVMenu *ScrollerMenu;
GTAVMenu *PositionMenu;
GTAVMenu *weedcolors;
GTAVMenu *colorlist;
GTAVMenu *hostcolors;
GTAVMenu *BackgroundMenu;
GTAVMenu *BorderMenu;
GTAVMenu *TitleShaderColor1;
GTAVMenu *MenuFonts;//TitleShaderColor1
GTAVMenu *TitleFonts;
GTAVMenu *TitleFonts1;
GTAVMenu *ItemFonts;
GTAVMenu *TitleShaderColor;
GTAVMenu *TitleTextColor;
GTAVMenu *TitleTextColor1;
GTAVMenu *MainShaderColor;
GTAVMenu *TitleColor;
GTAVMenu *ItemColor;
GTAVMenu *SelectorColor;
GTAVMenu *MenuPosition;
GTAVMenu *MenuAlphaLevel;
GTAVMenu *MarqueePosition;
GTAVMenu *PlateMenu;
GTAVMenu *creatorVehicleDoors;
GTAVMenu *SetPlayerAlpha;
GTAVMenu *OnlinePlayersGiveMenu;
GTAVMenu *MiniGamesSubMenu;
GTAVMenu *SecCamerasMenu;
GTAVMenu *gravopt;
GTAVMenu *gravopt2;
GTAVMenu *gravopt3;
GTAVMenu *RanTele;
GTAVMenu *OnlineTest;
GTAVMenu *LiveryMenu;
GTAVMenu *Timscolor;
GTAVMenu *rgbsubmenu;
GTAVMenu *DevTestingMenu;
GTAVMenu *OnlinePlayerVehicleOptions2;
GTAVMenu *towplayer;
GTAVMenu *CarSpawnerMenu24;
GTAVMenu *CarSpawnerMenu244;
GTAVMenu *VehicleHandleMenu;
GTAVMenu *ObjectHandleMenu;
GTAVMenu *SaveLocationMenu;
GTAVMenu *LoadLocationMenu;


Input *menuInputHandler;
Input *inputHandler;

bool inputButtonsPressed = false;
bool enableMenu = false;
bool bypassmenu = false;

char *animdict, *anim;



bool RequestNetworkControl(int playerHandle, int carHandle) {
	int Vehicle = GetCarCharIsIn(playerHandle, 0);

	if (DoesEntityExist(carHandle) && IsEntityVehicle(carHandle)) {
		if (network_request_control_of_entity(carHandle)) {
			if (network_has_control_of_entity(carHandle)) {
				return true;
			}
		}
	}
	return false;
}

float Vec3DistanceSq(const float *p1, const float *p2) {
	return ((p2[0] - p1[0]) * (p2[0] - p1[0]) +
		((p2[2] - p1[2]) * (p2[2] - p1[2]) +
			((p2[1] - p1[1]) * (p2[1] - p1[1]))));
}

float Distance(float p11, float p12, float p13, float p21, float p22, float p23) {
	float p1[] = { p11, p12, p13 },
		p2[] = { p21, p22, p23 };
	return sqrt(Vec3DistanceSq(p1, p2));
}

float Distance(float *p1, float *p2) {
	return sqrt(Vec3DistanceSq(p1, p2));
}

bool isInDistance(int Handle) {
	float Pos[2][3],
		Dist;
	GetEntityCoords(PlayerPedId(), Pos[0]);
	GetEntityCoords(Handle, Pos[1]);
	Dist = Distance(Pos[0], Pos[1]);
	printf("Distance between you and the player is %f\n", Dist);
	return (Dist <= 9999.0f);
}

void TeleportToClient(int Client) {
	float* Location = (float *)(*(int *)((*(int *)(0x83BA3400 + 0x78) + 0x10 + (Client * 0x900)) + 0xF8) + 0x70);

	memcpy((PVOID)(*(int *)(*(int *)((*(int *)(0x83BA3400 + 0x78) + 0x10 + (0 * 0x900)) + 0xF8) + 0x1C) + 0x40), Location, 0xC);
}

void ToggleGodMode() {
	SetPlayerInvincible(PlayerId(), true);
	set_entity_proofs(PlayerPedId(), true, true, true, true, true, false, false, false);
	set_entity_invincible(PlayerPedId(), true);
}



int ToggleInvincibility(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!playerInvincibilityActive) {
		playerInvincibilityActive = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~God Mode:~b~ON!");
	} else if (playerInvincibilityActive) {
		SetPlayerInvincible(PlayerId(), false);
		set_entity_proofs(PlayerPedId(), false, false, false, false, false, false, false, false);
		set_entity_invincible(PlayerPedId(), false);
		playerInvincibilityActive = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~God Mode:~r~OFF!");
	}

	return 0;
}

int SuperJumpCheat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cheat_superjump) {
		cheat_superjump = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Jump:~b~ON!");
	} else if (cheat_superjump) {
		cheat_superjump = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Jump:~r~OFF!");
	}

	return 0;
}

int targets1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PLAYER_TARGETING_MODE(PlayerId());
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Switch Targeting Modes!");
	return 0;
}


int SuperRunCheat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cheat_runfast) {
		set_move_speed_multiplier(PlayerId(), 10.00);
		cheat_runfast = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Run:~b~ON!");
	} else if (cheat_runfast) {
		set_move_speed_multiplier(PlayerId(), 1.0);
		cheat_runfast = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Run:~r~OFF!");
	}

	return 0;
}

int SuperRunCheat2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cheat_runfast) {
		set_move_speed_multiplier(PlayerId(), 2.50);
		cheat_runfast = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Run:~b~ON!");
	} else if (cheat_runfast) {
		set_move_speed_multiplier(PlayerId(), 1.0);
		cheat_runfast = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Run:~r~OFF!");
	}

	return 0;
}

int SwimFastCheat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cheat_swimfast) {
		set_swim_speed_multiplier(PlayerId(), 9.49);
		cheat_swimfast = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Swim:~b~ON!");
	} else if (cheat_swimfast) {
		set_swim_speed_multiplier(PlayerId(), 3.0);
		cheat_swimfast = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Swim:~r~OFF!");
	}

	return 0;
}


int SuperPunchCheat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cheat_superpunch) {
		cheat_superpunch = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Punch:~b~ON!");
	} else if (cheat_superpunch) {
		cheat_superpunch = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Punch:~r~OFF!");
	}

	return 0;
}

int WantedPlayer3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cheat_1shot) {
		cheat_1shot = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ 1 Shot Loop:~b~ON!");
	} else if (cheat_1shot) {
		cheat_1shot = false;
		PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(PlayerId(), 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ 1 Shot Loop:~r~OFF!");
	}

	return 0;
}

int ExplosiveAmmo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cheat_explosiveammo) {
		cheat_explosiveammo = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Explosive Ammo:~b~ON!");
	} else if (cheat_explosiveammo) {
		cheat_explosiveammo = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Explosive Ammo:~r~OFF!");
	}

	return 0;
}

bool cheat_explosiveammo1 = false;
int ExplosiveAmmo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cheat_explosiveammo1) {
		cheat_explosiveammo1 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Explosive Ammo:~b~ON!");
	} else if (cheat_explosiveammo1) {
		cheat_explosiveammo1 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Explosive Ammo:~r~OFF!");
	}

	return 0;
}


int propp0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!proppy0) {
		proppy0 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Hats:~b~ON!(Choose w/Right or Left)");
	} else if (proppy0) {
		proppy0 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Hats:~r~OFF!");
	}

	return 0;
}

int propp1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!proppy1) {
		proppy1 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mask:~b~ON!(Choose w/Right or Left)");
	} else if (proppy1) {
		proppy1 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mask:~r~OFF!");
	}

	return 0;
}

int propp2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!proppy2) {
		proppy2 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Pants:~b~ON!(Choose w/Right or Left)");
	} else if (proppy2) {
		proppy2 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Pants:~r~OFF!");
	}

	return 0;
}

int propp3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!proppy3) {
		proppy3 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Shirt:~b~ON!(Choose w/Right or Left)");
	} else if (proppy3) {
		proppy3 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Shirt:~r~OFF!");
	}

	return 0;
}

int propp4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!proppy4) {
		proppy4 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Shoes:~b~ON!(Choose w/Right or Left)");
	} else if (proppy4) {
		proppy4 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Shoes:~r~OFF!");
	}

	return 0;
}

int propp5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!proppy5) {
		proppy5 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Shirt 2:~b~ON!(Choose w/Right or Left)");
	} else if (proppy5) {
		proppy5 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Shirt 2:~r~OFF!");
	}

	return 0;
}



int FireAmmo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cheat_fireammo) {
		cheat_fireammo = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Fire Ammo:~b~ON!");
	} else if (cheat_fireammo) {
		cheat_fireammo = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Fire Ammo:~r~OFF!");
	}

	return 0;
}

int ToggleUltimateDeagle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	deagle = !deagle;
	return 0;
}

int irand(int min, int max, int Add = 0) {
	srand(GetTickCount() + Add);
	return min + (rand() % (int)(max - min + 1));
}

void rainbow_car() {
	if (DoesEntityExist(rainbowcar) && IsEntityVehicle(rainbowcar)) {
		int col1 = irand(0, 255, 200);
		int col2 = irand(0, 255, -40);
		int col3 = irand(0, 255, 30);
		int col4 = irand(0, 255, 400);
		set_vehicle_dirt_level(rainbowcar, 0.0f);
		PaintCar(rainbowcar, col1, col2);
		PaintCarExtra(rainbowcar, col3, col4);
	}
}

void rainbow_car1() {
	if (DoesEntityExist(rainbowcar1) && IsEntityVehicle(rainbowcar1)) {
		int Red = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255),
			Green = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255),
			Blue = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255);
		void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(rainbowcar1, Red, Green, Blue));
		void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(rainbowcar1, Red, Green, Blue));
	}
}

int Custome1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 0, 255, 0);
			PaintCarExtra(vehicle, 0, 112);


		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int Custome2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 32, 214, 223);
			PaintCarExtra(vehicle, 0, 112);


		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int Custome3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 208, 92, 218);
			PaintCarExtra(vehicle, 0, 112);


		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int PaintMBlackv2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 255, 36, 239);
			PaintCarExtra(vehicle, 0, 112);
			//PaintCarExtra(vehicle, 36, 36);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}
int PaintMBlackv3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 255, 34, 34);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 255, 34, 34);
			PaintCarExtra(vehicle, 0, 112);
			PaintCar(vehicle, 158, 158);
			//PaintCarExtra(vehicle, 36, 36);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}
int PaintMBlackv4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 0, 255, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 0, 255, 0);
			PaintCarExtra(vehicle, 0, 112);
			PaintCar(vehicle, 158, 158);
			//PaintCarExtra(vehicle, 36, 36);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int PaintMBlackv5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 255, 36, 239);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 255, 36, 239);
			PaintCarExtra(vehicle, 0, 112);
			PaintCar(vehicle, 158, 158);
			//PaintCarExtra(vehicle, 36, 36);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int PaintMBlackv6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 88, 190, 211);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 88, 190, 211);
			PaintCar(vehicle, 158, 158);
			PaintCarExtra(vehicle, 0, 112);
			//PaintCarExtra(vehicle, 36, 36);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int PaintMBlackv7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 17, 88, 255);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 17, 88, 255);
			PaintCar(vehicle, 158, 158);
			PaintCarExtra(vehicle, 0, 112);
			//PaintCarExtra(vehicle, 36, 36);PaintCar(vehicle, 158, 158);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int PaintMBlackv8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 17, 255, 249);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 17, 255, 249);
			PaintCar(vehicle, 158, 158);
			PaintCarExtra(vehicle, 0, 112);
			//PaintCarExtra(vehicle, 36, 36);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int PaintMBlackv9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 255, 128, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 255, 128, 0);
			PaintCar(vehicle, 158, 158);
			PaintCarExtra(vehicle, 0, 112);
			//PaintCarExtra(vehicle, 36, 36);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int PaintMBlackv10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 252, 202, 3);
			PaintCar(vehicle, 158, 158);
			PaintCarExtra(vehicle, 0, 112);
			//PaintCarExtra(vehicle, 36, 36);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}
int PaintMBlackv11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 17, 238, 133);
			PaintCar(vehicle, 158, 158);
			PaintCarExtra(vehicle, 0, 112);
			//PaintCarExtra(vehicle, 36, 36);
			//PaintCar(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int Custome4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 239, 67, 67);


		}
	} else {
		ShowMessageOnScreen("Custome Red Color");
	}
	return 0;
}

int Custome5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 225, 230, 77);


		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int Custome6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 145, 120, 190);


		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int Custome7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 255, 81, 159);


		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int Custome8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 242, 94, 160);


		}
	} else {
		ShowMessageOnScreen("RGB SET!");
	}
	return 0;
}

int smoke11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (rainbow1) {

		rainbow1 = false;
		return 0;
	}
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		rainbowcar1 = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(rainbowcar1) && IsEntityVehicle(rainbowcar1)) {

			rainbow1 = true;
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int ToggleRainbow(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (rainbow) {

		rainbow = false;
		return 0;
	}
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		rainbowcar = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(rainbowcar) && IsEntityVehicle(rainbowcar)) {

			rainbow = true;
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintChrome(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 120, 120);
			PaintCarExtra(vehicle, 120, 120);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintBlack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 0, 0);
			PaintCarExtra(vehicle, 0, 0);	PaintCarExtra(vehicle, 0, 112);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintMBlack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 12, 12);
			PaintCarExtra(vehicle, 12, 12);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintMWhite(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 111, 111);
			PaintCarExtra(vehicle, 111, 111);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintMatteWhite(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 131, 131);
			PaintCarExtra(vehicle, 131, 131);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintGold(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 158, 158);
			PaintCarExtra(vehicle, 158, 158);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}


int PaintFBlue(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 140, 140);
			PaintCarExtra(vehicle, 140, 140);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintBAngels(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 64, 89);
			PaintCarExtra(vehicle, 64, 0);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}




int PaintFBluev1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 135, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 64, 0, 74);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 64, 0, 74);
			PaintCarExtra(vehicle, 135, 0);
		}
	} else {
		ShowMessageOnScreen("~g~ You aren't in a vehicle");
	}
	return 0;
}







int PaintFBluev2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 135, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 133, 8, 222);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 133, 8, 222);
			PaintCarExtra(vehicle, 135, 0);
		}
	} else {
		ShowMessageOnScreen("~g~ You aren't in a vehicle");
	}
	return 0;
}








int PaintFBluev3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 135, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 33, 12, 21);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 33, 12, 21);
			PaintCarExtra(vehicle, 135, 0);
		}
	} else {
		ShowMessageOnScreen("~g~ You aren't in a vehicle");
	}
	return 0;
}

int PaintFBluev4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 135, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 125, 255, 25);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 125, 255, 25);
		}
	} else {
		ShowMessageOnScreen("~g~ You aren't in a vehicle");
	}
	return 0;
}


int PaintFBluev5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 135, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 0, 255, 127);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 0, 255, 127);
			PaintCarExtra(vehicle, 135, 0);
		}
	} else {
		ShowMessageOnScreen("~g~ You aren't in a vehicle");
	}
	return 0;
}



int PaintFBluev6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 135, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, 45, 21, 255);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, 45, 21, 255);
			PaintCarExtra(vehicle, 135, 0);
		}
	} else {
		ShowMessageOnScreen("~g~ You aren't in a vehicle");
	}
	return 0;
}



int PaintRed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 29, 29);
			PaintCarExtra(vehicle, 29, 29);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintOrange(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 41, 41);
			PaintCarExtra(vehicle, 41, 41);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintPurple(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 145, 145);
			PaintCarExtra(vehicle, 145, 145);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintLimeGreen(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 92, 92);
			PaintCarExtra(vehicle, 92, 92);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintHotPink(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 135, 135);
			PaintCarExtra(vehicle, 135, 135);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintCombo01(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 0, 120);
			PaintCarExtra(vehicle, 0, 0);	PaintCarExtra(vehicle, 0, 112);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintCombo02(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 121, 120);
			PaintCarExtra(vehicle, 0, 0);	PaintCarExtra(vehicle, 0, 112);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintCombo03(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 112, 0);
			PaintCarExtra(vehicle, 0, 0);	PaintCarExtra(vehicle, 0, 112);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintCombo04(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 154, 0);
			PaintCarExtra(vehicle, 0, 0);	PaintCarExtra(vehicle, 0, 112);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintCombo05(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 140, 120);
			PaintCarExtra(vehicle, 0, 140);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintCombo06(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 92, 120);
			PaintCarExtra(vehicle, 0, 92);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintCombo07(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 135, 120);
			PaintCarExtra(vehicle, 0, 135);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintCombo08(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 0, 112);
			PaintCarExtra(vehicle, 0, 112);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintCombo09(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, 29, 0);
			PaintCarExtra(vehicle, 0, 0);	PaintCarExtra(vehicle, 0, 112);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int RandomPaint(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCar(vehicle, irand(0, 255, 200), irand(0, 255, -40));
			PaintCarExtra(vehicle, irand(0, 255, 30), irand(0, 255, 400));
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintRim0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 0, 92);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintRim1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 0, 0);	PaintCarExtra(vehicle, 0, 112);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintRim2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 0, 112);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintRim3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 0, 140);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintRim4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 0, 135);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintRim5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 0, 145);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int PaintRim6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
			set_vehicle_dirt_level(vehicle, 0.0f);
			PaintCarExtra(vehicle, 0, 29);
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

bool seatbeltswag = false;
int Seatbelt(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!seatbeltswag) {
		seatbeltswag = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Seat Belt Loop:~b~ON!");

	} else if (seatbeltswag) {
		seatbeltswag = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Seat Belt Loop:~r~OFF!");
	}
	return 0;
}


int ToggleInvincibleCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		int car;
		car = GetCarCharIsIn(PlayerPedId(), PlayerId());
		ENTITY::SET_ENTITY_PROOFS(car, true, true, true, true, true, false, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Now In God Mode!");
	}
	return 0;
}

int Togglemolotov(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Molotov Loop:~b~ON");
		molotovloop = true;
	} else if (molotovloop) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Molotov Loop:~r~OFF");
		molotovloop = false;
	}
	return 0;
}
bool snowy34 = false;
int togglesnows(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!snowy34) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Snow:~b~ON");
		snowy34 = true;
	} else if (snowy34) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Snow:~r~OFF");
		snowy34 = false;
	}
	return 0;
}



int ToggleESP2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!esp2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ ESP:~b~ON");
		esp2 = true;
	} else if (esp2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ ESP:~r~OFF");
		esp2 = false;
	}
	return 0;
}

int ToggleLaze(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!lazerlo) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Lazer Sight:~b~ON");
		lazerlo = true;
	} else if (lazerlo) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Lazer Sight:~r~OFF");
		lazerlo = false;
	}
	return 0;
}


int TogKiller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	float pos[3];
	GetEntityCoords(Handle, &pos[0], &pos[1], &pos[2]);
	ADD_OWNED_EXPLOSION(Handle, pos[0], pos[1], pos[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Fuck Dat Hoe.");

	return 0;
}


bool paintingPlayersCarPink = false;
int paintingPlayersCarPinkIndex = 0;
int paintingPlayersCarPinkTimeout = 310;
int paintingPlayersCarPinkTimeoutCounter = 0;

void PaintOnlinePlayersCarPinkProcess() {
	int subMenuIndex = paintingPlayersCarPinkIndex;

	if (paintingPlayersCarPinkTimeoutCounter >= paintingPlayersCarPinkTimeout) {
		paintingPlayersCarPink = false;
		ShowMessageOnScreen("~r~ Failed to paint players car. Retrys timed out.");
		paintingPlayersCarPinkTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_dirt_level(Vehicle, 0.0f);
		PaintCar(Vehicle, 135, 135);
		PaintCarExtra(Vehicle, 135, 135);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Pink.");
		paintingPlayersCarPinkTimeoutCounter = 0;
		paintingPlayersCarPink = false;
	}

	paintingPlayersCarPinkTimeoutCounter++;
}

int PaintOnlinePlayersCarPink(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Selected = selectedMenuIndexes->operator[](1),
		handle = GetPlayerHandle(Selected);
	if (!isInDistance(handle)) {
		ShowMessageOnScreen("");
		return 0;
	}
	if (is_ped_in_any_vehicle(handle)) {
		if (!paintingPlayersCarPink) {
			paintingPlayersCarPinkIndex = Selected;
			paintingPlayersCarPink = true;
		}
	} else
		ShowMessageOnScreen("");
	return 0;
}

bool paintingPlayersCarAngels = false;
int paintingPlayersCarAngelsIndex = 0;
int paintingPlayersCarAngelsTimeout = 310;
int paintingPlayersCarAngelsTimeoutCounter = 0;

void PaintOnlinePlayersCarAngelsProcess() {
	int subMenuIndex = paintingPlayersCarAngelsIndex;

	if (paintingPlayersCarAngelsTimeoutCounter >= paintingPlayersCarAngelsTimeout) {
		paintingPlayersCarAngels = false;
		ShowMessageOnScreen("~r~ Failed to paint players car. Retrys timed out.");
		paintingPlayersCarAngelsTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_dirt_level(Vehicle, 0.0f);
		PaintCar(Vehicle, 64, 89);
		PaintCarExtra(Vehicle, 64, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Blue Angels.");
		paintingPlayersCarAngelsTimeoutCounter = 0;
		paintingPlayersCarAngels = false;
	}

	paintingPlayersCarAngelsTimeoutCounter++;
}

int PaintOnlinePlayersCarAngels(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Selected = selectedMenuIndexes->operator[](1),
		handle = GetPlayerHandle(Selected);
	if (!isInDistance(handle)) {
		ShowMessageOnScreen("");
		return 0;
	}
	if (is_ped_in_any_vehicle(handle)) {
		if (!paintingPlayersCarAngels) {
			paintingPlayersCarAngelsIndex = Selected;
			paintingPlayersCarAngels = true;
		}
	} else
		ShowMessageOnScreen("");
	return 0;
}

bool paintingPlayersCarChrome = false;
int paintingPlayersCarChromeIndex = 0;
int paintingPlayersCarChromeTimeout = 310;
int paintingPlayersCarChromeTimeoutCounter = 0;

void PaintOnlinePlayersCarChromeProcess() {
	int subMenuIndex = paintingPlayersCarChromeIndex;

	if (paintingPlayersCarChromeTimeoutCounter >= paintingPlayersCarChromeTimeout) {
		paintingPlayersCarChrome = false;
		ShowMessageOnScreen("~r~ Failed to paint players car. Retrys timed out.");
		paintingPlayersCarChromeTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_dirt_level(Vehicle, 0.0f);
		PaintCar(Vehicle, 120, 120);
		PaintCarExtra(Vehicle, 120, 120);
		paintingPlayersCarChromeTimeoutCounter = 0;
		paintingPlayersCarChrome = false;
	}

	paintingPlayersCarChromeTimeoutCounter++;
}

int PaintOnlinePlayersCarChrome(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Selected = selectedMenuIndexes->operator[](1),
		handle = GetPlayerHandle(Selected);
	if (!isInDistance(handle)) {
		ShowMessageOnScreen("");
		return 0;
	}
	if (is_ped_in_any_vehicle(handle)) {
		if (!paintingPlayersCarChrome) {
			paintingPlayersCarChromeIndex = Selected;
			paintingPlayersCarChrome = true;
		}
	} else
		ShowMessageOnScreen("");
	return 0;
}

bool paintingPlayersCar = false;
int paintingPlayersCarIndex = 0;
int paintingPlayersCarTimeout = 310;
int paintingPlayersCarTimeoutCounter = 0;
void PaintOnlinePlayersCarProcess() {
	int subMenuIndex = paintingPlayersCarIndex;


	if (paintingPlayersCarTimeoutCounter >= paintingPlayersCarTimeout) {
		paintingPlayersCar = false;
		ShowMessageOnScreen("~r~ Failed to paint players car. Retrys timed out.");
		paintingPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		PaintCar(Vehicle, irand(0, 255, 1), irand(0, 255, 2));
		PaintCarExtra(Vehicle, irand(0, 255, 3), irand(0, 255, 4));
		set_vehicle_dirt_level(Vehicle, 0.0f);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Painted players car");
		paintingPlayersCarTimeoutCounter = 0;
		paintingPlayersCar = false;
	}

	paintingPlayersCarTimeoutCounter++;
}

int PaintOnlinePlayersCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!paintingPlayersCar) {
		paintingPlayersCarIndex = selectedMenuIndexes->operator[](1);
		paintingPlayersCar = true;
	}

	return 0;
}

bool WhoIsThat = false;
int ShowWhoIsTalking(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!WhoIsThat) {
		WhoIsThat = true;
	} else if (WhoIsThat) {
		WhoIsThat = false;
	}

	return 0;
}

char* getTalkingName() {
	for (int i = 0; i < 18; i++)
		if (i != PlayerId()) {
			if (network_is_player_talking(i)) {
				if (!NETWORK_IS_PLAYER_MUTED_BY_ME(i)) {
					return GetPlayerName(i);
				}
			}
		}
}

void PrintChat() // Shows who's talking...
{
	PrintToScreen(getTalkingName(), 0.1525f, 0.0450f, 255, 255, 255, 255, 0.95f, 0.95f, 1, 7);
}

bool explodingPlayersCar = false;
int explodingPlayersCarIndex = 0;
int explodingPlayersCarTimeout = 310;
int explodingPlayersCarTimeoutCounter = 0;

void ExplodeOnlinePlayerVehicleProcess() {
	int subMenuIndex = explodingPlayersCarIndex;


	if (explodingPlayersCarTimeoutCounter >= explodingPlayersCarTimeout) {
		explodingPlayersCar = false;
		explodingPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_petrol_tank_health(Vehicle, -1);
		set_vehicle_undriveable(Vehicle, 1);
		explodingPlayersCarTimeoutCounter = 0;
		explodingPlayersCar = false;
	}

	explodingPlayersCarTimeoutCounter++;
}

bool stallPlayersCar = false;
int stallPlayersCarIndex = 0;
int stallPlayersCarTimeout = 310;
int stallPlayersCarTimeoutCounter = 0;

int StallVictomsCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!stallPlayersCar) {
		stallPlayersCarIndex = selectedMenuIndexes->operator[](1);
		stallPlayersCar = true;
	}

	if (!explodingPlayersCar) {
		explodingPlayersCarIndex = selectedMenuIndexes->operator[](1);
		explodingPlayersCar = true;
	}

	return 0;
}

void stallPlayerVehicleProcess() {
	int subMenuIndex = stallPlayersCarIndex;


	if (stallPlayersCarTimeoutCounter >= stallPlayersCarTimeout) {
		stallPlayersCar = false;
		ShowMessageOnScreen("~r~ Failed to shutdown victims car. Retrys timed out.");
		stallPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_petrol_tank_health(Vehicle, 0);
		set_vehicle_undriveable(Vehicle, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Victoms car has been shut down!");
		stallPlayersCarTimeoutCounter = 0;
		stallPlayersCar = false;
	}

	stallPlayersCarTimeoutCounter++;
}


bool pinkPlayersCar = false;
int pinkPlayersCarIndex = 0;
int pinkPlayersCarTimeout = 310;
int pinkPlayersCarTimeoutCounter = 0;

void PinkOnlinePlayerVehicleProcess() {
	int subMenuIndex = pinkPlayersCarIndex;


	if (pinkPlayersCarTimeoutCounter >= pinkPlayersCarTimeout) {
		pinkPlayersCar = false;
		ShowMessageOnScreen("~r~ Failed to fuck up players car. Retrys timed out.");
		pinkPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_doors_locked(Vehicle, 4);
		PaintCar(Vehicle, 136, 136);
		PaintCarExtra(Vehicle, 136, 136);
		set_vehicle_petrol_tank_health(Vehicle, -1);
		set_engine_health(Vehicle, -1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Revenge served in pink!.");
		pinkPlayersCarTimeoutCounter = 0;
		pinkPlayersCar = false;
	}

	pinkPlayersCarTimeoutCounter++;
}

int PinkOnlinePlayerVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!pinkPlayersCar) {
		pinkPlayersCarIndex = selectedMenuIndexes->operator[](1);
		pinkPlayersCar = true;
	}

	return 0;
}

bool launchingPlayersCar = false;
int launchingPlayersCarIndex = 0;
int launchingPlayersCarTimeout = 310;
int launchingPlayersCarTimeoutCounter = 0;

void SendPlayersCarToSpaceProcess() {
	int subMenuIndex = launchingPlayersCarIndex;


	if (launchingPlayersCarTimeoutCounter >= launchingPlayersCarTimeout) {
		launchingPlayersCar = false;
		ShowMessageOnScreen("~r~ Failed to launch players car. Retrys timed out.");
		launchingPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		apply_force_to_entity(Vehicle, true, 0, 0, 150, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Sent players car to space");
		launchingPlayersCarTimeoutCounter = 0;
		launchingPlayersCar = false;
	}

	launchingPlayersCarTimeoutCounter++;
}

bool launchfPlayersCar = false;
int launchfPlayersCarIndex = 0;
int launchfPlayersCarTimeout = 310;
int launchfPlayersCarTimeoutCounter = 0;

void SendPlayersCarForwardProcess() {
	int subMenuIndex = launchfPlayersCarIndex;


	if (launchfPlayersCarTimeoutCounter >= launchfPlayersCarTimeout) {
		launchfPlayersCar = false;
		ShowMessageOnScreen("~r~ Failed to launch players car. Retrys timed out.");
		launchfPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		apply_force_to_entity(Vehicle, true, 0, 150, 0, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Launched Players Vehicle Forward!");
		launchfPlayersCarTimeoutCounter = 0;
		launchfPlayersCar = false;
	}

	launchfPlayersCarTimeoutCounter++;
}

bool launchtPlayersCar = false;
int launchtPlayersCarIndex = 0;
int launchtPlayersCarTimeout = 310;
int launchtPlayersCarTimeoutCounter = 0;

void SendPlayersCarToRightProcess() {
	int subMenuIndex = launchtPlayersCarIndex;


	if (launchtPlayersCarTimeoutCounter >= launchtPlayersCarTimeout) {
		launchtPlayersCar = false;
		ShowMessageOnScreen("~r~ Failed to launch players car. Retrys timed out.");
		launchtPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		apply_force_to_entity(Vehicle, true, 150, 0, 0, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Sent players car to the right");
		launchtPlayersCarTimeoutCounter = 0;
		launchtPlayersCar = false;
	}

	launchtPlayersCarTimeoutCounter++;
}

bool launchyPlayersCar = false;
int launchyPlayersCarIndex = 0;
int launchyPlayersCarTimeout = 310;
int launchyPlayersCarTimeoutCounter = 0;

void SendPlayersCarRightProcess() {
	int subMenuIndex = launchtPlayersCarIndex;


	if (launchyPlayersCarTimeoutCounter >= launchtPlayersCarTimeout) {
		launchyPlayersCar = false;
		ShowMessageOnScreen("~r~ Failed to launch players car. Retrys timed out.");
		launchtPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		apply_force_to_entity(Vehicle, true, -150, 0, 0, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Launched Players Vehicle Right!");
		launchyPlayersCarTimeoutCounter = 0;
		launchyPlayersCar = false;
	}

	launchyPlayersCarTimeoutCounter++;
}


bool launchbPlayersCar = false;
int launchbPlayersCarIndex = 0;
int launchbPlayersCarTimeout = 310;
int launchbPlayersCarTimeoutCounter = 0;

void SendPlayersCarBackwardsProcess() {
	int subMenuIndex = launchbPlayersCarIndex;


	if (launchbPlayersCarTimeoutCounter >= launchbPlayersCarTimeout) {
		launchbPlayersCar = false;
		ShowMessageOnScreen("~r~ Failed to launch players car. Retrys timed out.");
		launchbPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		apply_force_to_entity(Vehicle, true, 0, -150, 0, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Launched Players Vehicle Backwards!");
		launchbPlayersCarTimeoutCounter = 0;
		launchbPlayersCar = false;
	}

	launchbPlayersCarTimeoutCounter++;
}

bool launchbPlayersCar2 = false;
int launchbPlayersCarIndex2 = 0;
int launchbPlayersCarTimeout2 = 310;
int launchbPlayersCarTimeoutCounter2 = 0;
int deletevehicle;
int deletevehicle1;
void SendPlayersCarBackwardsProcess2() {
	int subMenuIndex = launchbPlayersCarIndex2;


	if (launchbPlayersCarTimeoutCounter2 >= launchbPlayersCarTimeout2) {
		launchbPlayersCar2 = false;
		launchbPlayersCarTimeoutCounter2 = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		apply_force_to_entity(Vehicle, true, 0, 0, -9999999999999999999999999.5f, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Sent Player To Oblivion!");
		launchbPlayersCarTimeoutCounter2 = 0;
		launchbPlayersCar2 = false;
		oblivion = false;
	}

	launchbPlayersCarTimeoutCounter2++;
}

bool launchbPlayersCar4 = false;
int launchbPlayersCarIndex4 = 0;
int launchbPlayersCarTimeout4 = 310;
int launchbPlayersCarTimeoutCounter4 = 0;
void oblivionProcess2() {
	int subMenuIndex = launchbPlayersCarIndex4;


	if (launchbPlayersCarTimeoutCounter4 >= launchbPlayersCarTimeout4) {
		launchbPlayersCar4 = false;
		launchbPlayersCarTimeoutCounter4 = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		apply_force_to_entity(Vehicle, true, 0, 0, -9999999.5f, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Crushed Player!");
		launchbPlayersCarTimeoutCounter4 = 0;
		launchbPlayersCar4 = false;
		oblivion2 = false;
	}

	launchbPlayersCarTimeoutCounter4++;
}

bool launchbPlayersCar3 = false;
int launchbPlayersCarIndex3 = 0;
int launchbPlayersCarTimeout3 = 310;
int launchbPlayersCarTimeoutCounter3 = 0;
void oblivionProcess1() {
	int subMenuIndex = launchbPlayersCarIndex3;


	if (launchbPlayersCarTimeoutCounter3 >= launchbPlayersCarTimeout3) {
		launchbPlayersCar3 = false;
		launchbPlayersCarTimeoutCounter3 = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		apply_force_to_entity(Vehicle, true, 0, 0, 9999999999999999999999999.5f, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Sent Player To Space!");
		launchbPlayersCarTimeoutCounter3 = 0;
		launchbPlayersCar3 = false;
		oblivion1 = false;
	}

	launchbPlayersCarTimeoutCounter3++;
}

int SendPlayersCarToSpace(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!launchingPlayersCar) {
		launchingPlayersCarIndex = selectedMenuIndexes->operator[](1);
		launchingPlayersCar = true;
	}

	return 0;
}

int SendPlayersCarForward(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!launchfPlayersCar) {
		launchfPlayersCarIndex = selectedMenuIndexes->operator[](1);
		launchfPlayersCar = true;
	}

	return 0;
}

int SendPlayersCarRight(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!launchtPlayersCar) {
		launchtPlayersCarIndex = selectedMenuIndexes->operator[](1);
		launchtPlayersCar = true;
	}

	return 0;
}

int oblivionmod24(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!oblivion1) {
		launchbPlayersCarIndex3 = selectedMenuIndexes->operator[](1);
		oblivion1 = true;
	}

	return 0;
}

int oblivionmod25(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!oblivion2) {
		launchbPlayersCarIndex4 = selectedMenuIndexes->operator[](1);
		oblivion2 = true;
	}

	return 0;
}

int oblivionmod23(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!oblivion) {
		launchbPlayersCarIndex2 = selectedMenuIndexes->operator[](1);
		oblivion = true;
	}

	return 0;
}

int SendPlayersCarBackwards(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!launchbPlayersCar) {
		launchbPlayersCarIndex = selectedMenuIndexes->operator[](1);
		launchbPlayersCar = true;
	}

	return 0;
}

int CleanPedBody(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	CLEAR_PED_BLOOD_DAMAGE(PlayerPedId());
	RESET_PED_VISIBLE_DAMAGE(PlayerPedId());
	return 0;
}

bool popTheirTyres = false;
int popTheirTyresIndex = 0;
int popTheirTyresTimeout = 310;
int popTheirTyresTimeoutCounter = 0;
void popTheirTyresProcess() {
	int subMenuIndex = popTheirTyresIndex;


	if (popTheirTyresTimeoutCounter >= popTheirTyresTimeout) {
		popTheirTyres = false;
		ShowMessageOnScreen("~r~ Failed to flatten player's vehicle tyres. Retrys timed out.");
		popTheirTyresTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_tyres_can_burst(Vehicle, true);
		if (!IS_VEHICLE_TYRE_BURST(Vehicle, 0, 0)) {
			PopCarTyre(Vehicle, 0, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(Vehicle, 1, 0)) {
			PopCarTyre(Vehicle, 1, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(Vehicle, 2, 0)) {
			PopCarTyre(Vehicle, 2, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(Vehicle, 3, 0)) {
			PopCarTyre(Vehicle, 3, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(Vehicle, 4, 0)) {
			PopCarTyre(Vehicle, 4, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(Vehicle, 5, 0)) {
			PopCarTyre(Vehicle, 5, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(Vehicle, 6, 0)) {
			PopCarTyre(Vehicle, 6, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(Vehicle, 7, 0)) {
			PopCarTyre(Vehicle, 7, 1, 1148846080);
		}
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player's Tyres Flattened!");
		popTheirTyresTimeoutCounter = 0;
		popTheirTyres = false;
	}

	popTheirTyresTimeoutCounter++;

}

bool removeCar1 = false;
int RemoveIndex = 0;
int RemoveTimeout = 310;
int RemoveTimeoutCounter = 0;
void RemoveProcess() {
	int subMenuIndex = RemoveIndex;


	if (RemoveTimeoutCounter >= RemoveTimeout) {
		removeCar1 = false;
		ShowMessageOnScreen("~r~ Failed To Remove Doors.");
		RemoveTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);
	if (RequestNetworkControl(Player, Vehicle)) {
		if (DoesEntityExist(Vehicle)) {
			network_request_control_of_entity(Vehicle);
			set_vehicle_door_broken(Vehicle, 0, 1);
			set_vehicle_door_broken(Vehicle, 1, 1);
			set_vehicle_door_broken(Vehicle, 2, 1);
			set_vehicle_door_broken(Vehicle, 3, 1);
			set_vehicle_door_broken(Vehicle, 4, 1);
			set_vehicle_door_broken(Vehicle, 5, 1);
			set_vehicle_door_broken(Vehicle, 6, 1);
			set_vehicle_door_broken(Vehicle, 7, 1);
			set_vehicle_door_broken(Vehicle, 8, 1);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Stripped Players Car.");
		}
		RemoveTimeoutCounter = 0;
		removeCar1 = false;
	}

	RemoveTimeoutCounter++;

}

int givegmode(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);
	if (RequestNetworkControl(Player, Vehicle)) {
		if (DoesEntityExist(Vehicle)) {
			network_request_control_of_entity(Vehicle);
			set_entity_invincible(Vehicle, true);
			CarVisibleDamage(Vehicle, false);
			ENTITY::SET_ENTITY_PROOFS(Vehicle, true, true, true, true, true, false, false, true);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Gave Players Car God Mode!");
		}
	}
	return 0;
}

int Remove1Now(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!removeCar1) {
		RemoveIndex = selectedMenuIndexes->operator[](1);
		removeCar1 = true;
	}

	return 0;
}

bool SmasCar2 = false;
int SmasCar2Index = 0;
int SmasCar2Timeout = 310;
int SmasCar2TimeoutCounter = 0;
void SmasCar2Process() {
	int subMenuIndex = SmasCar2Index;


	if (SmasCar2TimeoutCounter >= SmasCar2Timeout) {
		SmasCar2 = false;
		ShowMessageOnScreen("~r~ Failed To Smash Windows.");
		SmasCar2TimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);
	if (RequestNetworkControl(Player, Vehicle)) {
		if (DoesEntityExist(Vehicle)) {
			network_request_control_of_entity(Vehicle);
			SMASH_VEHICLE_WINDOW(Vehicle, 0);
			SMASH_VEHICLE_WINDOW(Vehicle, 1);
			SMASH_VEHICLE_WINDOW(Vehicle, 2);
			SMASH_VEHICLE_WINDOW(Vehicle, 3);
			SMASH_VEHICLE_WINDOW(Vehicle, 4);
			SMASH_VEHICLE_WINDOW(Vehicle, 5);
			SMASH_VEHICLE_WINDOW(Vehicle, 6);
			SMASH_VEHICLE_WINDOW(Vehicle, 7);
			set_vehicle_door_broken(Vehicle, 0, 1);
			set_vehicle_door_broken(Vehicle, 1, 1);
			set_vehicle_door_broken(Vehicle, 2, 1);
			set_vehicle_door_broken(Vehicle, 3, 1);
			set_vehicle_door_broken(Vehicle, 4, 1);
			set_vehicle_door_broken(Vehicle, 5, 1);
			set_vehicle_door_broken(Vehicle, 6, 1);
			set_vehicle_door_broken(Vehicle, 7, 1);
			set_vehicle_door_broken(Vehicle, 8, 1);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Smashed Vehicles Windows and Stripped!");
		}
		SmasCar2TimeoutCounter = 0;
		SmasCar2 = false;
	}

	SmasCar2TimeoutCounter++;

}

int SmasCar2Now(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!SmasCar2) {
		SmasCar2Index = selectedMenuIndexes->operator[](1);
		SmasCar2 = true;
	}

	return 0;
}

bool SmasCar5 = false;
int SmasCar5Index = 0;
int SmasCar5Timeout = 310;
int SmasCar5TimeoutCounter = 0;
void SmasCar5Process() {
	int subMenuIndex = SmasCar5Index;


	if (SmasCar5TimeoutCounter >= SmasCar5Timeout) {
		SmasCar5 = false;
		ShowMessageOnScreen("~r~ Failed To Smash Windows.");
		SmasCar5TimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);
	if (RequestNetworkControl(Player, Vehicle)) {
		if (DoesEntityExist(Vehicle)) {
			network_request_control_of_entity(Vehicle);
			VEHICLE::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(Vehicle, false);
			VEHICLE::SET_VEHICLE_IS_STOLEN(Vehicle, true);
			VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK(Vehicle, true);
			VEHICLE::SET_VEHICLE_ALARM(Vehicle, true);
			VEHICLE::START_VEHICLE_ALARM(Vehicle);
			VEHICLE::SET_VEHICLE_DIRT_LEVEL(Vehicle, 15);
			VEHICLE::SET_VEHICLE_HAS_STRONG_AXLES(Vehicle, false);
			VEHICLE::SET_VEHICLE_RUDDER_BROKEN(Vehicle, true);
			VEHICLE::SET_VEHICLE_IS_WANTED(Vehicle, true);
			//VEHICLE::SET_VEHICLE_GRAVITY(Vehicle, false);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Rekt Em Fam!");
		}
		SmasCar5TimeoutCounter = 0;
		SmasCar5 = false;
	}

	SmasCar5TimeoutCounter++;

}

int SmasCar5Now(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!SmasCar5) {
		SmasCar5Index = selectedMenuIndexes->operator[](1);
		SmasCar5 = true;
	}

	return 0;
}

bool SmasCar1 = false;
int SmasCar1Index = 0;
int SmasCar1Timeout = 310;
int SmasCar1TimeoutCounter = 0;
void SmasCar1Process() {
	int subMenuIndex = SmasCar1Index;


	if (SmasCar1TimeoutCounter >= SmasCar1Timeout) {
		SmasCar1 = false;
		ShowMessageOnScreen("~r~ Failed To Smash Windows.");
		SmasCar1TimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);
	if (RequestNetworkControl(Player, Vehicle)) {
		if (DoesEntityExist(Vehicle)) {
			network_request_control_of_entity(Vehicle);
			SMASH_VEHICLE_WINDOW(Vehicle, 0);
			SMASH_VEHICLE_WINDOW(Vehicle, 1);
			SMASH_VEHICLE_WINDOW(Vehicle, 2);
			SMASH_VEHICLE_WINDOW(Vehicle, 3);
			SMASH_VEHICLE_WINDOW(Vehicle, 4);
			SMASH_VEHICLE_WINDOW(Vehicle, 5);
			SMASH_VEHICLE_WINDOW(Vehicle, 6);
			SMASH_VEHICLE_WINDOW(Vehicle, 7);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Smashed Vehicles Windows.");
		}
		SmasCar1TimeoutCounter = 0;
		SmasCar1 = false;
	}

	SmasCar1TimeoutCounter++;

}

int SmasCar1Now(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!SmasCar1) {
		SmasCar1Index = selectedMenuIndexes->operator[](1);
		SmasCar1 = true;
	}

	return 0;
}


bool flipCar180 = false;
float flipCar180Coords[3];
int flipCar180Index = 0;
int flipCar180Timeout = 310;
int flipCar180TimeoutCounter = 0;
void flipCar180Process() {
	int subMenuIndex = flipCar180Index;


	if (flipCar180TimeoutCounter >= flipCar180Timeout) {
		flipCar180 = false;
		ShowMessageOnScreen("~r~ Failed to flip their vehicle around. Retrys timed out.");
		flipCar180TimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);
	int Heading = get_entity_heading(Vehicle);
	float speed = get_entity_speed(Vehicle);

	if (RequestNetworkControl(Player, Vehicle)) {

		if (DoesEntityExist(Player)) {
			GetEntityCoords(Vehicle, flipCar180Coords);
			if (Heading > 180.0) Heading -= 180.0;
			else Heading += 180.0;
			set_entity_coords(Vehicle, flipCar180Coords[0], flipCar180Coords[1], flipCar180Coords[2], 0, 0, 0, 1);
			set_entity_heading(Vehicle, Heading);
			SET_VEHICLE_FORWARD_SPEED(Vehicle, speed);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player's vehicle flipped 180!");
		}
		flipCar180TimeoutCounter = 0;
		flipCar180 = false;
	}

	flipCar180TimeoutCounter++;

}

int flipCar180Now(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!flipCar180) {
		flipCar180Index = selectedMenuIndexes->operator[](1);
		flipCar180 = true;
	}

	return 0;
}

bool rotateCarTrollb = false;
bool rotateCarTrollLoop = false;
bool rotateVehicleTrollLoop = false;
int rotateCarTrollIndex = 0;
int rotateCarTrollTimeout = 310;
int rotateCarTrollTimeoutCounter = 0;
void rotateCarTrollProcess() {
	int subMenuIndex = rotateCarTrollIndex;


	if (rotateCarTrollTimeoutCounter >= rotateCarTrollTimeout) {
		rotateCarTrollb = false;
		ShowMessageOnScreen("~r~ Failed to flip their vehicle around. Retrys timed out.");
		rotateCarTrollTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);
	int Heading = get_entity_heading(Vehicle);


	if (RequestNetworkControl(Player, Vehicle)) {

		if (DoesEntityExist(Player)) {
			if (rotateVehicleTrollLoop) {
				if (rotateCarTrollLoop) Heading += 5;
				set_entity_heading(Vehicle, Heading);
			}
		}
		rotateCarTrollTimeoutCounter = 0;
		rotateCarTrollb = false;
	}

	rotateCarTrollTimeoutCounter++;

}

int rotateCarTroll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!rotateCarTrollb) {
		rotateCarTrollIndex = selectedMenuIndexes->operator[](1);
		rotateCarTrollb = true;
		rotateCarTrollLoop = true;
		rotateVehicleTrollLoop = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Rotate Vehicle Troll:~b~ON!");
	} else if (rotateCarTrollb) {
		rotateCarTrollIndex = selectedMenuIndexes->operator[](1);
		rotateCarTrollb = false;
		rotateCarTrollLoop = false;
		rotateVehicleTrollLoop = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Rotate Vehicle Troll:~r~OFF!");
	}

	return 0;
}



int PopTheirTyres(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!popTheirTyres) {
		popTheirTyresIndex = selectedMenuIndexes->operator[](1);
		popTheirTyres = true;
	}

	return 0;
}


bool custom1 = false;
bool creatorRocketRT = false;
int RocketTrigGun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorRocketRT) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Rocket Gun: ~b~ON");
		creatorRocketRT = true;
		custom1 = false;
	} else if (creatorRocketRT) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Rocket Gun: ~r~OFF");
		creatorRocketRT = false;
		custom1 = false;
	}
	return 0;
}
bool custom69 = false;
bool rainbowsz = false;
int rainbowzgun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!rainbowsz) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~RainBow Gun: ~b~ON");
		rainbowsz = true;
		custom69 = false;
	} else if (rainbowsz) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~RainBow Gun: ~r~OFF");
		rainbowsz = false;
		custom69 = false;
	}
	return 0;
}

bool custom70 = false;
bool particalloop = false;
int particallooper(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!particalloop) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~FX Loop: ~b~ON");
		particalloop = true;
		custom69 = false;
	} else if (particalloop) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~FX Loop: ~r~OFF");
		particalloop = false;
		custom70 = false;
	}
	return 0;
}

bool custom2 = false;
bool creatorRocketRT1 = false;
int RocketTrigGun1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorRocketRT1) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Tank Gun: ~b~ON");
		creatorRocketRT1 = true;
		custom1 = false;
	} else if (creatorRocketRT1) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Tank Gun: ~r~OFF");
		creatorRocketRT1 = false;
		custom2 = false;
	}
	return 0;
}

bool custom3 = false;
bool creatorRocketRT2 = false;
int RocketTrigGun2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorRocketRT2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Grenade Launcher Gun: ~b~ON");
		creatorRocketRT2 = true;
		custom3 = false;
	} else if (creatorRocketRT2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Grenade Launcher Gun: ~r~OFF");
		creatorRocketRT2 = false;
		custom3 = false;
	}
	return 0;
}

bool custom4 = false;
bool creatorRocketRT3 = false;
int RocketTrigGun3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorRocketRT3) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Flare Gun: ~b~ON");
		creatorRocketRT3 = true;
		custom4 = false;
	} else if (creatorRocketRT3) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Flare Gun: ~r~OFF");
		creatorRocketRT3 = false;
		custom4 = false;
	}
	return 0;
}

bool custom5 = false;
bool creatorRocketRT4 = false;
int RocketTrigGun4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorRocketRT4) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~SnowBall Gun: ~b~ON");
		creatorRocketRT4 = true;
		custom4 = false;
	} else if (creatorRocketRT4) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~SnowBall Gun: ~r~OFF");
		creatorRocketRT4 = false;
		custom4 = false;
	}
	return 0;
}

bool custom6 = false;
bool creatorRocketRT5 = false;
int RocketTrigGun5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorRocketRT5) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~FireWork Gun: ~b~ON");
		creatorRocketRT5 = true;
		custom6 = false;
	} else if (creatorRocketRT5) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~FireWork Gun: ~r~OFF");
		creatorRocketRT5 = false;
		custom6 = false;
	}
	return 0;
}

void randomtest() {
	if (PED::IS_PED_SHOOTING(PLAYER::PLAYER_PED_ID())) {
		float tmp[6];
		WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(PLAYER::PLAYER_PED_ID(), tmp);
		if (tmp[0] != 0 || tmp[2] != 0 || tmp[4] != 0) {
			AddExplosion1(tmp[0], tmp[2], tmp[4] - 0.8f, MOLOTOV, 500.0f, true, false, 1);
		}
		return;
	}
}

void creatorRocketRTLoop() {

	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		launchpos1[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();
	int hand = get_ped_bone_index(GetPlayerHandle(PlayerPedId()), 28422);
	int myhandle = GetPlayerHandle(PlayerId());
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_RT) && is_ped_on_foot(PedID) && is_ped_shooting(myhandle)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 1, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 1, dim_min[1] + 300.5f, 0.5f, targetpos1);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 1, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 1, dim_min[1] + 300.5f, 0.5f, targetpos1);


			targetpos1[2]--;
		}
		rocket_speed = 450;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), PlayerPedId(), 1, 1, rocket_speed);
	}
}
void creatorRocketRTLoop1() {

	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		launchpos1[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();
	int hand = get_ped_bone_index(GetPlayerHandle(PlayerPedId()), 28422);
	int myhandle = GetPlayerHandle(PlayerId());
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_RT) && is_ped_on_foot(PedID) && is_ped_shooting(myhandle)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 1, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 1, dim_min[1] + 300.5f, 0.5f, targetpos1);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 1, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 1, dim_min[1] + 300.5f, 0.5f, targetpos1);


			targetpos1[2]--;
		}
		rocket_speed = 450;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("VEHICLE_WEAPON_TANK"), PlayerPedId(), 1, 1, rocket_speed);
	}
}

void creatorRocketRTLoop2() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		launchpos1[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();
	int hand = get_ped_bone_index(GetPlayerHandle(PlayerPedId()), 28422);
	int myhandle = GetPlayerHandle(PlayerId());
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_RT) && is_ped_on_foot(PedID) && is_ped_shooting(myhandle)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 300.5f, 0.5f, targetpos1);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 300.5f, 0.5f, targetpos1);


			targetpos1[2]--;
		}
		rocket_speed = 500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_GRENADELAUNCHER"), PlayerPedId(), 1, 1, rocket_speed);
	}
}

void creatorRocketRTLoop3() {

	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		launchpos1[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();
	int hand = get_ped_bone_index(GetPlayerHandle(PlayerPedId()), 28422);
	int myhandle = GetPlayerHandle(PlayerId());
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_RT) && is_ped_on_foot(PedID) && is_ped_shooting(myhandle)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 300.5f, 0.5f, targetpos1);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 300.5f, 0.5f, targetpos1);


			targetpos1[2]--;
		}
		rocket_speed = 500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_FLAREGUN"), PlayerPedId(), 1, 1, rocket_speed);
	}
}

void creatorRocketRTLoop4() {

	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		launchpos1[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();
	int hand = get_ped_bone_index(GetPlayerHandle(PlayerPedId()), 28422);
	int myhandle = GetPlayerHandle(PlayerId());
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_RT) && is_ped_on_foot(PedID) && is_ped_shooting(myhandle)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 300.5f, 0.5f, targetpos1);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 300.5f, 0.5f, targetpos1);


			targetpos1[2]--;
		}
		rocket_speed = 500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_SNOWBALL"), PlayerPedId(), 1, 1, rocket_speed);
	}
}

void creatorRocketRTLoop5() {

	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		launchpos1[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();
	int hand = get_ped_bone_index(GetPlayerHandle(PlayerPedId()), 28422);
	int myhandle = GetPlayerHandle(PlayerId());
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_RT) && is_ped_on_foot(PedID) && is_ped_shooting(myhandle)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 300.5f, 0.5f, targetpos1);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] + 2, dim_min[1] + 300.5f, 0.5f, targetpos1);


			targetpos1[2]--;
		}
		rocket_speed = 500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_FIREWORK"), PlayerPedId(), 1, 1, rocket_speed);
	}
}

void LowRider() {
	int LeftRight = GET_CONTROL_VALUE(0, 188);
	int UpDown = GET_CONTROL_VALUE(0, 189);
	int Up = GET_CONTROL_VALUE(0, 200);
	int VehicleHandle = GetCarCharIsIn(PlayerPedId(), 0);
	if (is_vehicle_on_all_wheels(VehicleHandle)) {
		if (UpDown == 254) {
			apply_force_to_entity(VehicleHandle, 1, 0, 0, 0.068, 0, 45.05, 0, 1, 1, 1, 1, 0, 1);
		}
		if (UpDown == 0) {
			apply_force_to_entity(VehicleHandle, 1, 0, 0, 0.068, 0, -45.05, 0, 1, 1, 1, 1, 0, 1);
		}
		if (LeftRight == 254) {
			apply_force_to_entity(VehicleHandle, 1, 0, 0, 0.13, 9, 0, 0, 1, 1, 1, 1, 0, 1);
		}
		if (LeftRight == 0) {
			apply_force_to_entity(VehicleHandle, 1, 0, 0, 0.13, -9, 0, 0, 1, 1, 1, 1, 0, 1);
		}
		if (Up == 254) {
			apply_force_to_entity(VehicleHandle, 1, 0, 0, 2.3, 0, 0, 0, 1, 1, 1, 1, 0, 1);
		}
		if (Up == 0) {
			apply_force_to_entity(VehicleHandle, 1, 0, 0, -2.3, 0, 0, 0, 1, 1, 1, 1, 0, 1);
		}
	}
}


bool move_animal = false;
float leftAxisXNormal;
float leftAxisYNormal;
float goToOffsetBro[3];
float moveto[3];
int ride_animal_handle = 0;
float animal_speed = 2.0f;
float range = 100.0f;
bool vm_anim = false;
void rideanimalloop() {
	if (DoesEntityExist(objecthandle) && is_entity_attached(PlayerPedId())) {
		leftAxisXNormal = GET_CONTROL_NORMAL(0, 188);
		leftAxisYNormal = GET_CONTROL_NORMAL(0, 189);
		animal_speed = 2.0f;
		range = 4.0f;
		if (menuInputHandler->AButtonDown()) {
			animal_speed = 20.0f;
			range = 100.0f;
		}
		get_offset_from_entity_in_world_coords(objecthandle, leftAxisXNormal *range, leftAxisYNormal *range, 0.0f, moveto);
		TASK_GO_STRAIGHT_TO_COORD(objecthandle, moveto[0], moveto[1], moveto[2], animal_speed, 20000, 40000, 0.5f);
	}
}
int RideSpawnedAnimal(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		int bone;
		bone = get_ped_bone_index(objecthandle, 24816);
		attach_entity_to_entity(PlayerPedId(), objecthandle, bone, -0.3f, 0.0f, 0.3f, 180.0f, 0.0f, 90.0f);
		animdict = "rcmjosh2";
		anim = "josh_sitting_loop";
		animid = PlayerId();
		vm_anim = true;
		move_animal = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Started riding animal!");
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

void StopPlayerTasks1(int playerID) {
	clear_ped_tasks_immediately(PlayerPedId());
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Stopped Tasks");
}

int StopRideAnimal(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	detach_entity(PlayerPedId());
	StopPlayerTasks1(PlayerId());
	clear_ped_tasks_immediately(PlayerPedId());
	move_animal = false;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Stopped riding animal!");
	return 0;
}

int SlowOutTimer13 = 200;
int SlowTimer13 = 0;
bool TimeSlow0 = false;
int SlowMotion12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!TimeSlow0) {

		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Hold Left Trigger For Slow Motion: ~b~ON");
		TimeSlow0 = true;
	} else if (TimeSlow0) {

		if (SlowTimer13 <= GET_GAME_TIMER()) {
			SlowTimer13 = GET_GAME_TIMER() + SlowOutTimer13;
			SET_TIME_SCALE(1.00);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Slow Motion Mod : ~r~OFF");
			TimeSlow0 = false;
		}
	}
	return 0;
}


int SlowOutTimer11 = 200;
int SlowTimer11 = 0;
bool TimeSlow11 = false;
int SlowMotion11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!TimeSlow11) {

		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Hold LT For Slow Motion: ~g~ON");
		TimeSlow11 = true;
	} else if (TimeSlow11) {

		if (SlowTimer11 <= GET_GAME_TIMER()) {
			SlowTimer11 = GET_GAME_TIMER() + SlowOutTimer11;
			SET_TIME_SCALE(1.00);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Slow Motion Mod : ~r~OFF");
			TimeSlow11 = false;
		}
	}
	return 0;
}

int FastOutTimer = 200;
int FastTimer = 0;
bool TimeFast = false;
int FastMotion(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!TimeFast) {

		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Hold LB For Fast Motion: ~g~ON");
		TimeFast = true;
	}
	else if (TimeFast) {

		if (FastTimer <= GET_GAME_TIMER()) {
			FastTimer = GET_GAME_TIMER() + FastOutTimer;
			SET_TIME_SCALE(2500.00);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Fast Motion Mod : ~r~OFF");
			TimeFast = false;
		}
	}
	return 0;
}

int ToggleEntitiyGravity4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		VEHICLE::SET_VEHICLE_GRAVITY(objecthandle, false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~No Gravity");
	}
	return 0;
}

bool entityGravity = false;
int ToggleEntitiyGravity1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myCurrentVeh = GET_VEHICLE_PED_IS_USING(PlayerPedId());
	if (!entityGravity) {
		VEHICLE::SET_VEHICLE_GRAVITY(myCurrentVeh, false);
		entityGravity = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~No Vehicle Gravity:~b~ON");
	} else if (entityGravity) {
		VEHICLE::SET_VEHICLE_GRAVITY(myCurrentVeh, true);
		entityGravity = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~No Vehicle Gravity:~r~ OFF");
	}
	return 0;
}

bool isrc = false;
int Savedvehicle[2];
bool detachTowTruckCar2 = false;
int detachTowTruckIndex2 = 0;
int detachTowTruckTimeout2 = 310;
int detachTowTruckTimeoutCounter2 = 0;

void DetachTowTruckProcess2() {
	int subMenuIndex = detachTowTruckIndex2;


	if (detachTowTruckTimeoutCounter2 >= detachTowTruckTimeout2) {
		detachTowTruckCar2 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to detach tow from players car. Retrys timed out.");
		detachTowTruckTimeoutCounter2 = 0;
		return;
	}

	int Handle = GetCarCharIsIn(PlayerPedId(), PlayerId());
	int Player = GetPlayerHandle(subMenuIndex);

	if (Savedvehicle[1] != Handle || Savedvehicle[1] == 0 || !DoesEntityExist(Savedvehicle[0])) {
		detachTowTruckCar2 = false;
		detachTowTruckTimeoutCounter2 = 0;
		return;
	}

	if (RequestNetworkControl(Player, Savedvehicle[0])) {
		detach_entity(Savedvehicle[0]);
		set_vehicle_doors_locked(Savedvehicle[0], 0);

		if (isrc) {
			set_entity_visible(Savedvehicle[1], true);
			set_entity_collision(Savedvehicle[0], true);
		}

		set_entity_collision(Savedvehicle[0], true);
		set_entity_visible(Savedvehicle[1], true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Detach success");
		detachTowTruckTimeoutCounter2 = 0;

		detachTowTruckCar2 = false;
	}

	detachTowTruckTimeoutCounter2++;
}

bool detachTowTruckCar = false;
int detachTowTruckIndex = 0;
int detachTowTruckTimeout = 310;
int detachTowTruckTimeoutCounter = 0;

void DetachTowTruckProcess() {
	int subMenuIndex = detachTowTruckIndex;


	if (detachTowTruckTimeoutCounter >= detachTowTruckTimeout) {
		detachTowTruckCar = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to detach tow from players car. Retrys timed out.");
		detachTowTruckTimeoutCounter = 0;
		return;
	}

	int Handle = GetCarCharIsIn(PlayerPedId(), PlayerId());
	int Player = GetPlayerHandle(subMenuIndex);

	if (Savedvehicle[1] != Handle || Savedvehicle[1] == 0 || !DoesEntityExist(Savedvehicle[0])) {
		detachTowTruckCar = false;
		detachTowTruckTimeoutCounter = 0;
		return;
	}

	if (RequestNetworkControl(Player, Savedvehicle[0])) {
		detach_entity(Savedvehicle[0]);
		set_vehicle_doors_locked(Savedvehicle[0], 0);

		if (isrc) {
			set_entity_visible(Savedvehicle[1], true);
			set_entity_collision(Savedvehicle[0], true);
		}

		set_entity_collision(Savedvehicle[0], true);

		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Detach success");
		detachTowTruckTimeoutCounter = 0;

		detachTowTruckCar = false;
	}

	detachTowTruckTimeoutCounter++;
}

int DetachTowTruck(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!detachTowTruckCar) {
		detachTowTruckIndex = selectedMenuIndexes->operator[](1);
		detachTowTruckCar = true;
	}

	return 0;
}

bool detachMyCar = false;
int detachMyCarIndex = 0;
int detachMyCarTimeout = 310;
int detachMyCarTimeoutCounter = 0;

void DetachMyCarProcess() {
	int subMenuIndex = detachMyCarIndex;


	if (detachMyCarTimeoutCounter >= detachMyCarTimeout) {
		detachMyCar = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to detach from players car. Retrys timed out.");
		detachMyCarTimeoutCounter = 0;
		return;
	}

	int Handle = GetCarCharIsIn(PlayerPedId(), PlayerId());
	int Player = GetPlayerHandle(subMenuIndex);

	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (RequestNetworkControl(Player, Savedvehicle[1])) {
		detach_entity(Savedvehicle[1]);
		set_entity_collision(Savedvehicle[1], true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Detach success");
		detachMyCarTimeoutCounter = 0;
		detachMyCar = false;
	}
	detachMyCarTimeoutCounter++;
}

int DetachMyCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!detachMyCar) {
		detachMyCarIndex = selectedMenuIndexes->operator[](1);
		detachMyCar = true;
	}

	return 0;
}

bool towTruckCar2 = false;
int towTruckCarIndex2 = 0;
int towTruckCarTimeout2 = 310;
int towTruckCarTimeoutCounter2 = 0;

void TowTruckProcess2() {
	int subMenuIndex = towTruckCarIndex2;


	if (towTruckCarTimeoutCounter2 >= towTruckCarTimeout2) {
		towTruckCar2 = false;

		towTruckCarTimeoutCounter2 = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {
		towTruckCarTimeoutCounter2 = 0;
		towTruckCar2 = false;
		return;
	}

	// Our position
	float Position[3];
	GetEntityCoords(Handle, Position);
	printf("Player X = %f\n", Position[0]);
	printf("Player Y = %f\n", Position[1]);
	printf("Player Z = %f\n", Position[2]);

	if (RequestNetworkControl(Handle, Savedvehicle[0])) {
		set_vehicle_doors_locked(Savedvehicle[0], 4);
		set_entity_visible(Savedvehicle[1], false);
		attach_entity_to_entity(Savedvehicle[0], Savedvehicle[1], 0, 0, 0, 0, 0, 0, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ RC Player");
		towTruckCarTimeoutCounter2 = 0;

		towTruckCar2 = false;
	}

	towTruckCarTimeoutCounter2++;
}

bool towTruckCar7 = false;
int towTruckCarIndex7 = 0;
int towTruckCarTimeout7 = 310;
int towTruckCarTimeoutCounter7 = 0;

void TowTruckProcess7() {
	int subMenuIndex = towTruckCarIndex7;


	if (towTruckCarTimeoutCounter7 >= towTruckCarTimeout7) {
		towTruckCar7 = false;

		towTruckCarTimeoutCounter7 = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	//int Player = GetPlayerHandle(subMenuIndex);
	//int Vehicle = GetCarCharIsIn(Player, 0);

	// Ours and victims car handles
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {

		towTruckCarTimeoutCounter7 = 0;
		towTruckCar7 = false;
		return;
	}

	// Our position
	float Position[3];
	GetEntityCoords(Handle, Position);
	if (RequestNetworkControl(Handle, Savedvehicle[0])) {
		set_vehicle_doors_locked(Savedvehicle[0], 4);
		attach_entity_to_entity(Savedvehicle[0], Savedvehicle[1], 0, 0, -3.9, -0.15, 0, 0, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Towing Player!");
		towTruckCarTimeoutCounter7 = 0;

		towTruckCar7 = false;
	}

	towTruckCarTimeoutCounter7++;
}


bool towTruckCar = false;
int towTruckCarIndex = 0;
int towTruckCarTimeout = 310;
int towTruckCarTimeoutCounter = 0;

void TowTruckProcess() {
	int subMenuIndex = towTruckCarIndex;


	if (towTruckCarTimeoutCounter >= towTruckCarTimeout) {
		towTruckCar = false;

		towTruckCarTimeoutCounter = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	//int Player = GetPlayerHandle(subMenuIndex);
	//int Vehicle = GetCarCharIsIn(Player, 0);

	// Ours and victims car handles
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {

		towTruckCarTimeoutCounter = 0;
		towTruckCar = false;
		return;
	}

	// Our position
	float Position[3];
	GetEntityCoords(Handle, Position);
	if (RequestNetworkControl(Handle, Savedvehicle[0])) {
		set_vehicle_doors_locked(Savedvehicle[0], 4);
		attach_entity_to_entity(Savedvehicle[1], Savedvehicle[0], 0, 0, -3.9, 2, 0, 0, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Getting Towed!");
		towTruckCarTimeoutCounter = 0;

		towTruckCar = false;
	}

	towTruckCarTimeoutCounter++;
}

bool towTruck7 = false;
int TowTruck7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towTruck7) {
		towTruckCarIndex7 = selectedMenuIndexes->operator[](1);
		towTruckCar7 = true;
		towTruck7 = true;
	} else if (towTruck7) {
		detachTowTruckIndex = selectedMenuIndexes->operator[](1);
		detachTowTruckCar = true;
		towTruck7 = false;
	}

	return 0;
}

bool towTruckb = false;
int TowTruck(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towTruckb) {
		towTruckCarIndex = selectedMenuIndexes->operator[](1);
		towTruckCar = true;
		towTruckb = true;
	} else if (towTruckb) {
		detachTowTruckIndex = selectedMenuIndexes->operator[](1);
		detachTowTruckCar = true;
		towTruckb = false;
	}

	return 0;
}

bool towTruckb2 = false;
int TowTruck2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towTruckb2) {
		towTruckCarIndex2 = selectedMenuIndexes->operator[](1);
		towTruckCar2 = true;
		towTruckb2 = true;
	} else if (towTruckb2) {
		detachTowTruckIndex2 = selectedMenuIndexes->operator[](1);
		detachTowTruckCar2 = true;
		towTruckb2 = false;
	}

	return 0;
}

bool TowMyCarCar1 = false;
int TowMyCarCarIndex1 = 0;
int TowMyCarCarTimeout1 = 310;
int TowMyCarCarTimeoutCounter1 = 0;

void TowMyCarProcess1() {
	int subMenuIndex = TowMyCarCarIndex1;


	if (TowMyCarCarTimeoutCounter1 >= TowMyCarCarTimeout1) {
		TowMyCarCar1 = false;
		TowMyCarCarTimeoutCounter1 = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {

		TowMyCarCarTimeoutCounter1 = 0;
		TowMyCarCar1 = false;
		return;
	}
	float Position[3];
	GetEntityCoords(Handle, Position);

	if (RequestNetworkControl(Handle, Savedvehicle[1])) {
		attach_entity_to_entity(Savedvehicle[1], Savedvehicle[0], 0, 0, 3, 0, 0, 0, 0);
		TowMyCarCarTimeoutCounter1 = 0;

		TowMyCarCar1 = false;
	}

	TowMyCarCarTimeoutCounter1++;
}
bool TowMyCarCar4 = false;
int TowMyCarCarIndex4 = 0;
int TowMyCarCarTimeout4 = 310;
int TowMyCarCarTimeoutCounter4 = 0;

void TowMyCarProcess4() {
	int subMenuIndex = TowMyCarCarIndex4;


	if (TowMyCarCarTimeoutCounter4 >= TowMyCarCarTimeout4) {
		TowMyCarCar4 = false;
		TowMyCarCarTimeoutCounter4 = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {

		TowMyCarCarTimeoutCounter4 = 0;
		TowMyCarCar4 = false;
		return;
	}
	float Position[3];
	GetEntityCoords(Handle, Position);
	if (RequestNetworkControl(Handle, Savedvehicle[0])) {
		set_vehicle_doors_locked(Savedvehicle[0], 4);
		attach_entity_to_entity(Savedvehicle[0], Savedvehicle[1], 0, 0, 3, -0.15, 0, 0, 0);
		TowMyCarCarTimeoutCounter4 = 0;

		TowMyCarCar4 = false;
	}

	TowMyCarCarTimeoutCounter4++;
}

bool TowMyCarCar3 = false;
int TowMyCarCarIndex3 = 0;
int TowMyCarCarTimeout3 = 310;
int TowMyCarCarTimeoutCounter3 = 0;

void TowMyCarProcess3() {
	int subMenuIndex = TowMyCarCarIndex3;


	if (TowMyCarCarTimeoutCounter3 >= TowMyCarCarTimeout3) {
		TowMyCarCar3 = false;
		TowMyCarCarTimeoutCounter3 = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {
		TowMyCarCarTimeoutCounter3 = 0;
		TowMyCarCar3 = false;
		return;
	}
	float Position[3];
	GetEntityCoords(Handle, Position);

	if (RequestNetworkControl(Handle, Savedvehicle[1])) {
		attach_entity_to_entity(Savedvehicle[1], Savedvehicle[0], 0, -2, 0, 0, 0, 0, 0);
		TowMyCarCarTimeoutCounter3 = 0;

		TowMyCarCar3 = false;
	}

	TowMyCarCarTimeoutCounter3++;
}

bool TowMyCarCar6 = false;
int TowMyCarCarIndex6 = 0;
int TowMyCarCarTimeout6 = 310;
int TowMyCarCarTimeoutCounter6 = 0;

void TowMyCarProcess6() {
	int subMenuIndex = TowMyCarCarIndex6;


	if (TowMyCarCarTimeoutCounter6 >= TowMyCarCarTimeout6) {
		TowMyCarCar6 = false;
		TowMyCarCarTimeoutCounter6 = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {
		TowMyCarCarTimeoutCounter6 = 0;
		TowMyCarCar6 = false;
		return;
	}
	float Position[3];
	GetEntityCoords(Handle, Position);
	if (RequestNetworkControl(Handle, Savedvehicle[0])) {
		set_vehicle_doors_locked(Savedvehicle[0], 4);
		set_vehicle_doors_locked(Savedvehicle[0], 4);
		attach_entity_to_entity(Savedvehicle[0], Savedvehicle[1], 0, -2, -0.15, 0, 0, 0, 0);
		TowMyCarCarTimeoutCounter6 = 0;

		TowMyCarCar6 = false;
	}

	TowMyCarCarTimeoutCounter6++;
}

bool TowMyCarCar2 = false;
int TowMyCarCarIndex2 = 0;
int TowMyCarCarTimeout2 = 310;
int TowMyCarCarTimeoutCounter2 = 0;

void TowMyCarProcess2() {
	int subMenuIndex = TowMyCarCarIndex2;


	if (TowMyCarCarTimeoutCounter2 >= TowMyCarCarTimeout2) {
		TowMyCarCar2 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to make them tow you. Retrys timed out.");
		TowMyCarCarTimeoutCounter2 = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {

		TowMyCarCarTimeoutCounter2 = 0;
		TowMyCarCar2 = false;
		return;
	}
	float Position[3];
	GetEntityCoords(Handle, Position);

	if (RequestNetworkControl(Handle, Savedvehicle[1])) {
		attach_entity_to_entity(Savedvehicle[1], Savedvehicle[0], 0, 2, 0, 0, 0, 0, 0);
		TowMyCarCarTimeoutCounter2 = 0;

		TowMyCarCar2 = false;
	}

	TowMyCarCarTimeoutCounter2++;
}

bool TowMyCarCar5 = false;
int TowMyCarCarIndex5 = 0;
int TowMyCarCarTimeout5 = 310;
int TowMyCarCarTimeoutCounter5 = 0;

void TowMyCarProcess5() {
	int subMenuIndex = TowMyCarCarIndex5;


	if (TowMyCarCarTimeoutCounter5 >= TowMyCarCarTimeout5) {
		TowMyCarCar5 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to make them tow you.");
		TowMyCarCarTimeoutCounter5 = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {

		TowMyCarCarTimeoutCounter5 = 0;
		TowMyCarCar5 = false;
		return;
	}
	float Position[3];
	GetEntityCoords(Handle, Position);

	if (RequestNetworkControl(Handle, Savedvehicle[0])) {
		set_vehicle_doors_locked(Savedvehicle[0], 4);
		attach_entity_to_entity(Savedvehicle[0], Savedvehicle[1], 0, 2, -0.15, 0, 0, 0, 0);
		TowMyCarCarTimeoutCounter5 = 0;

		TowMyCarCar5 = false;
	}

	TowMyCarCarTimeoutCounter5++;
}

bool TowMyCarCar = false;
int TowMyCarCarIndex = 0;
int TowMyCarCarTimeout = 310;
int TowMyCarCarTimeoutCounter = 0;

void TowMyCarProcess() {
	int subMenuIndex = TowMyCarCarIndex;


	if (TowMyCarCarTimeoutCounter >= TowMyCarCarTimeout) {
		TowMyCarCar = false;
		TowMyCarCarTimeoutCounter = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

	if (Savedvehicle[0] == Savedvehicle[1]) {
		TowMyCarCarTimeoutCounter = 0;
		TowMyCarCar = false;
		return;
	}
	float Position[3];
	GetEntityCoords(Handle, Position);

	if (RequestNetworkControl(Handle, Savedvehicle[1])) {
		attach_entity_to_entity(Savedvehicle[1], Savedvehicle[0], 0, 0, -3.9, 0, 0, 0, 0);
		TowMyCarCarTimeoutCounter = 0;

		TowMyCarCar = false;
	}

	TowMyCarCarTimeoutCounter++;
}

bool towMyCarB = false;
int TowMyCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towMyCarB) {
		TowMyCarCarIndex = selectedMenuIndexes->operator[](1);
		TowMyCarCar = true;
		towMyCarB = true;
	} else if (towMyCarB) {
		detachMyCarIndex = selectedMenuIndexes->operator[](1);
		detachMyCar = true;
		towMyCarB = false;
	}

	return 0;
}


bool towMyCar1 = false;
int TowMyCar1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towMyCar1) {
		TowMyCarCarIndex1 = selectedMenuIndexes->operator[](1);
		TowMyCarCar1 = true;
		towMyCar1 = true;
	} else if (towMyCar1) {
		detachMyCarIndex = selectedMenuIndexes->operator[](1);
		detachMyCar = true;
		towMyCar1 = false;
	}

	return 0;
}

bool towMyCar4 = false;
int TowMyCar4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towMyCar4) {
		TowMyCarCarIndex4 = selectedMenuIndexes->operator[](1);
		TowMyCarCar4 = true;
		towMyCar4 = true;
	} else if (towMyCar4) {
		detachTowTruckCar = selectedMenuIndexes->operator[](1);
		detachTowTruckCar = true;
		towMyCar4 = false;
	}

	return 0;
}
bool towMyCar5 = false;
int TowMyCar5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towMyCar5) {
		TowMyCarCarIndex5 = selectedMenuIndexes->operator[](1);
		TowMyCarCar5 = true;
		towMyCar5 = true;
	} else if (towMyCar5) {
		detachTowTruckCar = selectedMenuIndexes->operator[](1);
		detachTowTruckCar = true;
		towMyCar5 = false;
	}

	return 0;
}


bool towMyCar2 = false;
int TowMyCar2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towMyCar2) {
		TowMyCarCarIndex2 = selectedMenuIndexes->operator[](1);
		TowMyCarCar2 = true;
		towMyCar2 = true;
	} else if (towMyCar2) {
		detachMyCarIndex = selectedMenuIndexes->operator[](1);
		detachMyCar = true;
		towMyCar2 = false;
	}

	return 0;
}

bool towMyCar3 = false;
int TowMyCar3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towMyCar3) {
		TowMyCarCarIndex3 = selectedMenuIndexes->operator[](1);
		TowMyCarCar3 = true;
		towMyCar3 = true;
	} else if (towMyCar3) {
		detachMyCarIndex = selectedMenuIndexes->operator[](1);
		detachMyCar = true;
		towMyCar3 = false;
	}

	return 0;
}

bool towMyCar6 = false;
int TowMyCar6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towMyCar6) {
		TowMyCarCarIndex6 = selectedMenuIndexes->operator[](1);
		TowMyCarCar6 = true;
		towMyCar6 = true;
	} else if (towMyCar6) {
		detachTowTruckCar = selectedMenuIndexes->operator[](1);
		detachTowTruckCar = true;
		towMyCar6 = false;
	}

	return 0;
}

bool lockPlayersCar = false;
int lockPlayersCarIndex = 0;
int lockPlayersCarTimeout = 310;
int lockPlayersCarTimeoutCounter = 0;

void LockPlayersDoorsProcess() {
	int subMenuIndex = lockPlayersCarIndex;


	if (lockPlayersCarTimeoutCounter >= lockPlayersCarTimeout) {
		lockPlayersCar = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to lock players car. Retrys timed out.");
		lockPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_doors_locked(Vehicle, 4);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Locked players doors");
		lockPlayersCarTimeoutCounter = 0;
		lockPlayersCar = false;
	}

	lockPlayersCarTimeoutCounter++;
}

int LockPlayersDoors(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!lockPlayersCar) {
		lockPlayersCarIndex = selectedMenuIndexes->operator[](1);
		lockPlayersCar = true;
	}

	return 0;
}

bool flipPlayersCar = false;
int flipPlayersCarIndex = 0;
int flipPlayersCarTimeout = 310;
int flipPlayersCarTimeoutCounter = 0;

void FlipPlayersDoorsProcess() {
	int subMenuIndex = flipPlayersCarIndex;


	if (flipPlayersCarTimeoutCounter >= flipPlayersCarTimeout) {
		flipPlayersCar = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to flip players car. Retrys timed out.");
		flipPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		SET_VEHICLE_ON_GROUND_PROPERLY(Vehicle);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Flipped players car!");
		flipPlayersCarTimeoutCounter = 0;
		flipPlayersCar = false;
	}

	flipPlayersCarTimeoutCounter++;
}

int FlipOnlineVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!flipPlayersCar) {
		flipPlayersCarIndex = selectedMenuIndexes->operator[](1);
		flipPlayersCar = true;
	}

	return 0;
}


bool unlockPlayersCar = false;
int unlockPlayersCarIndex = 0;
int unlockPlayersCarTimeout = 310;
int unlockPlayersCarTimeoutCounter = 0;

void unLockPlayersDoorsProcess() {
	int subMenuIndex = unlockPlayersCarIndex;


	if (unlockPlayersCarTimeoutCounter >= unlockPlayersCarTimeout) {
		unlockPlayersCar = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to unlock players car. Retrys timed out.");
		unlockPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_doors_locked(Vehicle, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Unlocked players doors");
		unlockPlayersCarTimeoutCounter = 0;
		unlockPlayersCar = false;
	}

	unlockPlayersCarTimeoutCounter++;
}

int UnlockPlayersDoors(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!unlockPlayersCar) {
		unlockPlayersCarIndex = selectedMenuIndexes->operator[](1);
		unlockPlayersCar = true;
	}

	return 0;
}

bool KickinggPlayer = false;
int KickingPlayerIndex = 0;
int KickingPlayerTimeout = 310;
int KickingPlayerTimeoutCounter = 0;
void LMAOProccess() {
	int subMenuIndex = KickingPlayerIndex;

	if (KickingPlayerTimeoutCounter >= KickingPlayerTimeout) {
		KickinggPlayer = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to control vehicle. Retrys timed out.");
		KickingPlayerTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_doors_locked(Vehicle, 4);
		clear_ped_tasks_immediately(Player);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Locked player out of their personal vehicle!");
		KickingPlayerTimeoutCounter = 0;

		KickinggPlayer = false;
	}

	KickingPlayerTimeoutCounter++;
}


bool teleportingPlayer = false;
int teleportingPlayerIndex = 0;
int teleportingPlayerTimeout = 310;
int teleportingPlayerTimeoutCounter = 0;


void TeleportPlayerProcess() {
	int subMenuIndex = teleportingPlayerIndex;


	if (teleportingPlayerTimeoutCounter >= teleportingPlayerTimeout) {
		teleportingPlayer = false;
		ShowMessageOnScreen("~r~ Failed to teleport player. Retrys timed out.");
		teleportingPlayerTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		float Position[3];
		GetEntityCoords(PlayerPedId(), Position);

		set_entity_coords(Vehicle, Position[0], Position[1] + 2.0f, Position[2] + 12.0f, 0, 0, 0, 1);

		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported Player To You!");
		teleportingPlayerTimeoutCounter = 0;

		teleportingPlayer = false;
	}

	teleportingPlayerTimeoutCounter++;
}

int TeleportPlayerToMe(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	// Check to see if we are in the process of teleporting a player
	if (!teleportingPlayer) {
		teleportingPlayer = true;
		teleportingPlayerIndex = selectedMenuIndexes->operator[](1);
	}

	return 0;
}


bool Delete = false;
int DeleteIndex = 0;
int DeleteTimeout = 310;
int DeleteTimeoutCounter = 0;
bool deleted = false;
void DeleteProcess() {
	int subMenuIndex = DeleteIndex;


	if (DeleteTimeoutCounter >= DeleteTimeout) {
		Delete = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to delete vehicle. Retrys timed out.");
		DeleteTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		deletevehicle = Vehicle;
		deleted = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Deleted Players Vehicle");
		DeleteTimeoutCounter = 0;
		Delete = false;
	}

	DeleteTimeoutCounter++;
}

bool Delete1 = false;
int DeleteIndex1 = 0;
int DeleteTimeout1 = 310;
int DeleteTimeoutCounter1 = 0;
bool deleted1 = false;
void DeleteProcess1() {
	int subMenuIndex = DeleteIndex1;


	if (DeleteTimeoutCounter1 >= DeleteTimeout1) {
		Delete1 = false;
		DeleteTimeoutCounter1 = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		deletevehicle1 = Vehicle;
		deleted1 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ No Gravity Players Vehicle!");
		DeleteTimeoutCounter1 = 0;
		Delete1 = false;
	}

	DeleteTimeoutCounter1++;
}


int DeleteVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	// Check to see if we are in the process of teleporting a player
	if (!Delete) {
		Delete = true;
		DeleteIndex = selectedMenuIndexes->operator[](1);
	}

	return 0;
}

int playergravity(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	// Check to see if we are in the process of teleporting a player
	if (!Delete1) {
		Delete1 = true;
		DeleteIndex1 = selectedMenuIndexes->operator[](1);
	}

	return 0;
}


bool da = false;
bool air = false;
bool dw = false;
bool waterwheel = false;
bool driveairz = false;
bool speedo = false;
float speedmul;
int DriveAirGz(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!speedo) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Speedometer:~b~ON");
		speedmul = 1.5;
		speedo = true;
	} else if (speedo) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Speedometer:~r~ON");
		speedo = false;
	}
	return 0;
}

bool speedgunrp = false;
float speedmuls;
bool speeder = false;
int speedGunRP(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!speeder) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ SpeedGun:~b~ON");
		speedmuls = 1.5;
		speeder = true;
	} else if (speeder) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ SpeedGun:~r~OFF");
		speeder = false;
	}
	return 0;
}

int creatorUnlock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_vehicle_doors_locked(objecthandle, 4); //Locked
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle Doors Locked!");
	}
	return 0;
}

bool creator180LP1 = false;
bool HeadingLoop1 = false;
int creato180Loop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		if (!creator180LP1) {
			creator180LP1 = true;
			HeadingLoop1 = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~-Yaw Loop:~b~ON!");
		} else if (creator180LP1) {
			creator180LP1 = false;
			HeadingLoop1 = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~-Yaw Loop:~r~OFF!");
		}
	}
	return 0;
}
bool creator180LP = false;
bool HeadingLoop = false;
int creator180Loop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		if (!creator180LP) {
			creator180LP = true;
			HeadingLoop = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~+Yaw Loop:~b~ON!");
		} else if (creator180LP) {
			creator180LP = false;
			HeadingLoop = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~+Yaw Loop:~r~OFF!");
		}
	}
	return 0;
}

bool creator1802LP = false;
bool HeadingLoop2 = false;
int creator180Loop2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		if (!creator1802LP) {
			creator1802LP = true;
			HeadingLoop2 = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Creator Vehicle Loop 2:~b~ON!");
		} else if (creator1802LP) {
			creator1802LP = false;
			HeadingLoop2 = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Creator Vehicle Loop 2:~r~OFF!");
		}
	}
	return 0;
}

bool creator1803LP = false;
bool HeadingLoop3 = false;
int creator180Loop3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		if (!creator1803LP) {
			creator1803LP = true;
			HeadingLoop3 = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Object Rotation Loop:~b~ON!");
		} else if (creator1803LP) {
			creator1803LP = false;
			HeadingLoop3 = false;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Object Rotation Loop:~r~OFF!");
		}
	}
	return 0;
}

bool creator360LP = false;
bool PitchLoop = false;
int creator360Mod(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		if (!creator360LP) {
			creator360LP = true;
			PitchLoop = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Object Pitch Loop:~b~ON!");
		} else if (creator360LP) {
			creator360LP = false;
			PitchLoop = false;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Object Pitch Loop:~r~OFF!");
		}
	}
	return 0;
}

void creator180LoopProcess() {
	float Heading = get_entity_heading(objecthandle);
	if (HeadingLoop) Heading += 3;
	set_entity_heading(objecthandle, Heading);
}

void creator180LoopProcess1() {
	float Heading = get_entity_heading(objecthandle);
	if (HeadingLoop1) Heading -= 3;
	set_entity_heading(objecthandle, Heading);
}


void creator180LoopProcess2() {
	float Heading = get_entity_heading(objecthandle);
	if (HeadingLoop2) Heading += 12;
	set_entity_heading(objecthandle, Heading);
}

void creator180LoopProcess3() {
	float Heading = get_entity_heading(objecthandle);
	if (HeadingLoop3) Heading += 180;
	set_entity_heading(objecthandle, Heading);
}

void creator360RotationProcess() {
	float objPitch = get_entity_pitch(objecthandle);
	if (PitchLoop) objPitch += 3;
	set_entity_rotation(objecthandle, objPitch, objectroll, objectyaw, 2, 1);
}

bool cInvisibleObj = false;
int creatorInvisible(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		if (!cInvisibleObj) {
			set_entity_visible(objecthandle, false);
			cInvisibleObj = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Object Invisibility:~b~ON!");
		} else if (cInvisibleObj) {
			set_entity_visible(objecthandle, true);
			cInvisibleObj = false;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Object Invisibility:~r~OFF");
		}
	}
	return 0;
}

int creatorFixVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		FixCar(objecthandle);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Fixed Vehicle!");
	}
	return 0;
}

int creatorVehHorn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		START_VEHICLE_HORN(objecthandle, 30000, get_hash_key("HELDDOWN"), true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle Horn Activated for 30 seconds!");
	}
	return 0;
}

int creatorFlipVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		SET_VEHICLE_ON_GROUND_PROPERLY(objecthandle);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Flipped Vehicle!");
	}
	return 0;
}

int creatorDeleteVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		deletevehicle = objecthandle;
		deleted = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Deleted Vehicle!");
	}
	return 0;
}

int creatorInvincible(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_entity_invincible(objecthandle, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle Set Invincible!");
	}
	return 0;
}

int creatorNotInvincible(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_entity_invincible(objecthandle, false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle Is Now Vulnerable!");
	}
	return 0;
}

int creatorBulletproof(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_vehicle_tyres_can_burst(objecthandle, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle Tires Bulletproof!");
	}
	return 0;
}

int creatorLock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_vehicle_doors_locked(objecthandle, 0); //Unlocked
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle Doors Unlocked!");
	}
	return 0;
}

int creatorLaunchForward(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		apply_force_to_entity(objecthandle, true, 0, 150, 0, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle has been launched forwards, may have to click more than once!");
	}
	return 0;
}

int smashwindows(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		SMASH_VEHICLE_WINDOW(objecthandle, 0);
		SMASH_VEHICLE_WINDOW(objecthandle, 1);
		SMASH_VEHICLE_WINDOW(objecthandle, 2);
		SMASH_VEHICLE_WINDOW(objecthandle, 3);
		SMASH_VEHICLE_WINDOW(objecthandle, 4);
		SMASH_VEHICLE_WINDOW(objecthandle, 5);
		SMASH_VEHICLE_WINDOW(objecthandle, 6);
		SMASH_VEHICLE_WINDOW(objecthandle, 7);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Smashed Vehicles Windows.");
	}
	return 0;
}

int stripcar2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_vehicle_door_broken(objecthandle, 0, 1);
		set_vehicle_door_broken(objecthandle, 1, 1);
		set_vehicle_door_broken(objecthandle, 2, 1);
		set_vehicle_door_broken(objecthandle, 3, 1);
		set_vehicle_door_broken(objecthandle, 4, 1);
		set_vehicle_door_broken(objecthandle, 5, 1);
		set_vehicle_door_broken(objecthandle, 6, 1);
		set_vehicle_door_broken(objecthandle, 7, 1);
		set_vehicle_door_broken(objecthandle, 8, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Stripped Car.");
	}
	return 0;
}


bool launchswagger = false;
int LaunchForward(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!launchswagger) {
		launchswagger = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Launch Car Active");

	} else if (launchswagger) {
		launchswagger = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Launch Car Disabled");
	}
	return 0;
}

int creatorLaunchUp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		apply_force_to_entity(objecthandle, true, 0, 150, 150, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle has been launched up, may have to click more than once!");
	}
	return 0;
}

int creatorVehAlarm(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_vehicle_doors_locked(objecthandle, 4);
		SET_VEHICLE_ALARM(objecthandle, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle alarm has been set!");
	}
	return 0;
}

int creatorExplodeVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		EXPLODE_VEHICLE(objecthandle, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle has been bombed!");
	}
	return 0;
}


bool LowRider1 = false;
int ToggleLowRider(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!LowRider1) {
		LowRider1 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Lowrider Vehicle:~b~ON!");
	} else if (LowRider1) {
		LowRider1 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Lowrider Vehicle:~r~OFF!");
	}
	return 0;
}

bool tFlyingVeh = false;
int ToggleFlyingVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!tFlyingVeh) {
		tFlyingVeh = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Flying Vehicle:~b~ON! X to Go Up, RB to Go Forward! (No Clip)");
	} else if (tFlyingVeh) {
		tFlyingVeh = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Flying Vehicle:~r~OFF!");
	}
	return 0;
}

bool novclip2 = false;
int vehnoclip3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!novclip2) {
		novclip2 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Wheelie:~b~ON!");
	} else if (novclip2) {
		novclip2 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Wheelie:~r~OFF!");
	}
	return 0;
}

bool novclip1 = false;
int vehnoclip(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!novclip1) {
		novclip1 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Drive On Walls:~b~ON! (Press X To Get On Wall)");
	} else if (novclip1) {
		novclip1 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Drive On Walls:~r~OFF!");
	}
	return 0;
}


VOID Launchforwardloop() {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		if (is_control_just_pressed(0, 24)) {
			apply_force_to_entity(objecthandle, true, 0, 150, 0, 0, 0, 0, true, true, true, true, false, true);
		}
	}
}


void novclip() {

	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			if (novclip1 == true) {

				apply_force_to_entity(myvehicle, true, 0, 0, -0.5f, 0, 0, 0, true, true, true, true, false, true);
			}
			if (is_control_just_pressed(2, Button_X)) {

				apply_force_to_entity(myvehicle, true, 0, 0, 1, 0, 50, 0, true, true, true, true, false, true);
			}
		}
	}
}

void novclip3() {

	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			if (novclip2 == true) {

				if (is_control_just_pressed(2, Button_X)) {

					apply_force_to_entity(myvehicle, true, 0, 0, 1, 0, 30, 0, true, true, true, true, false, true);
				}
			}
		}
	}
}
/*
 int myhandle = GetPlayerHandle(PlayerId());
 int myvehicle;
 if (is_ped_in_any_vehicle(myhandle)) {
  myvehicle = GetCarCharIsIn(myhandle, 0);
  if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
   if (novclip1 == true){

	apply_force_to_entity(myvehicle, true, 0, 0, -0.5f, 0, 0, 0, true, true, true, true, false, true);
   }
   if(is_control_just_pressed(2, Button_X)) {

	   apply_force_to_entity(myvehicle, true, 0, 0, 1, 0, 7, 0, true, true, true, true, false, true);
   }
  }
 }
}
*/

void tFlyingVehLoop() {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle = GetCarCharIsIn(myhandle, 0);
	set_entity_collision(myvehicle, true);
	if (menuInputHandler->RightBumperDown()) {
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle = GetCarCharIsIn(myhandle, 0);
		set_entity_collision(myvehicle, false);
		if (is_ped_in_any_vehicle(myhandle)) {
			apply_force_to_entity(myvehicle, true, 0, 1, 0, 0, 0, 0, true, true, true, true, false, true);
		}
	}
	if (menuInputHandler->XButtonDown()) {
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle = GetCarCharIsIn(myhandle, 0);
		if (is_ped_in_any_vehicle(myhandle)) {
			apply_force_to_entity(myvehicle, true, 0, 0, 1, 0, 0, 0, true, true, true, true, false, true);
		}
	}
}


int creatorLaunchBackward(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		apply_force_to_entity(objecthandle, true, 0, -150, 0, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle has been launched backwards, may have to click more than once!");
	}
	return 0;
}
float creatorTeleObjCoords[3];
int creatorTeleToObj(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, creatorTeleObjCoords);
		set_entity_coords(PlayerPedId(), creatorTeleObjCoords[0], creatorTeleObjCoords[1], creatorTeleObjCoords[2], 0, 0, 0, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Teleported To Object!");
	}
	return 0;
}

float creatorTeleCoords2[3];
int creatorTeleToObj2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(PlayerPedId(), creatorTeleCoords2);
		set_entity_coords(objecthandle, creatorTeleCoords2[0], creatorTeleCoords2[1], creatorTeleCoords2[2], 0, 0, 0, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Teleported Object To You!");
	}
	return 0;
}


int creatorTeleportVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		int myhandle = GetPlayerHandle(PlayerId());
		int var4 = -1;
		int pasnmax;
		pasnmax = get_vehicle_max_number_of_passengers(objecthandle);
		while (var4 < pasnmax) {
			if (is_vehicle_seat_free(objecthandle, var4)) {
				set_ped_into_vehicle(myhandle, objecthandle, var4);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported into creator vehicle!");
				break;
			} else {
				var4++;
			}
		}
		if (var4 > pasnmax) {
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed, No available seat in creator vehicle!");
		}
	}
	return 0;
}

int creatorPopAllTyres(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_vehicle_tyres_can_burst(objecthandle, true);
		if (!IS_VEHICLE_TYRE_BURST(objecthandle, 0, 0)) {
			PopCarTyre(objecthandle, 0, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(objecthandle, 1, 0)) {
			PopCarTyre(objecthandle, 1, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(objecthandle, 2, 0)) {
			PopCarTyre(objecthandle, 2, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(objecthandle, 3, 0)) {
			PopCarTyre(objecthandle, 3, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(objecthandle, 4, 0)) {
			PopCarTyre(objecthandle, 4, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(objecthandle, 5, 0)) {
			PopCarTyre(objecthandle, 5, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(objecthandle, 6, 0)) {
			PopCarTyre(objecthandle, 6, 1, 1148846080);
		}
		if (!IS_VEHICLE_TYRE_BURST(objecthandle, 7, 0)) {
			PopCarTyre(objecthandle, 7, 1, 1148846080);
		}
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle tyres have been blown out!");
	}
	return 0;
}

int creatorMaxLSC(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_vehicle_mod_kit(objecthandle, 0);
		PaintCar(objecthandle, 120, 120);
		PaintCarExtra(objecthandle, 0, 140);
		//prop_mp_base_marker(objecthandle, 0, 0);
		set_number_plate(objecthandle, "HASTER");
		SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(objecthandle, 5);
		toggle_vehicle_mod(objecthandle, 18, 1);
		toggle_vehicle_mod(objecthandle, 22, 1);
		set_vehicle_mod(objecthandle, 16, 5, 0);
		set_vehicle_mod(objecthandle, 12, 2, 0);
		set_vehicle_mod(objecthandle, 11, 3, 0);
		set_vehicle_mod(objecthandle, 14, 14, 0);
		set_vehicle_mod(objecthandle, 15, 3, 0);
		set_vehicle_mod(objecthandle, 13, 2, 0);
		set_vehicle_wheel_type(objecthandle, 6);
		set_vehicle_window_tint(objecthandle, 5);
		set_vehicle_mod(objecthandle, 23, 19, 1);
		set_vehicle_mod(objecthandle, 0, 1, 0);
		set_vehicle_mod(objecthandle, 1, 1, 0);
		set_vehicle_mod(objecthandle, 2, 1, 0);
		set_vehicle_mod(objecthandle, 3, 1, 0);
		set_vehicle_mod(objecthandle, 4, 1, 0);
		set_vehicle_mod(objecthandle, 5, 1, 0);
		set_vehicle_mod(objecthandle, 6, 1, 0);
		set_vehicle_mod(objecthandle, 7, 1, 0);
		set_vehicle_mod(objecthandle, 8, 1, 0);
		set_vehicle_mod(objecthandle, 9, 1, 0);
		set_vehicle_mod(objecthandle, 10, 1, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Your vehicle has been maxed!");
	}
	return 0;
}




bool vOutOfControl = false;
int vOutOfControlIndex = 0;
int vOutOfControlTimeout = 310;
int vOutOfControlTimeoutCounter = 0;

void vOutOfControlProcess() {
	int subMenuIndex = vOutOfControlIndex;


	if (vOutOfControlTimeoutCounter >= vOutOfControlTimeout) {
		vOutOfControl = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to set vehicle out of control. Retrys timed out.");
		vOutOfControlTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		SET_VEHICLE_OUT_OF_CONTROL(Vehicle, 1, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle set out of control!");
		vOutOfControlTimeoutCounter = 0;
		vOutOfControl = false;
	}

	vOutOfControlTimeoutCounter++;
}

int SetVehOutOfControl(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!vOutOfControl) {
		vOutOfControlIndex = selectedMenuIndexes->operator[](1);
		vOutOfControl = true;
	}
	return 0;
}

bool pitchT = false;
int ShowPitch(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!pitchT) {
		pitchT = true;
	} else if (pitchT) {
		pitchT = false;
	}
	return 0;
}

bool coordsT = false;
int ShowCoords(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!coordsT) {
		coordsT = true;
	} else if (coordsT) {
		coordsT = false;
	}
	return 0;
}

bool pcoordsT = false;
int ShowPlayerCoords(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!pcoordsT) {
		pcoordsT = true;
	} else if (pcoordsT) {
		pcoordsT = false;
	}
	return 0;
}

bool trollCash = false;
int MoneyTrollMiniGame(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!trollCash) {
		trollCash = true;
	} else if (trollCash) {
		trollCash = false;
	}
	return 0;
}

bool hashT = false;
int ShowObjHash(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!hashT) {
		hashT = true;
	} else if (hashT) {
		hashT = false;
	}
	return 0;
}

int DriveWater(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!dw) {
		dw = true;
		da = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drive On Water:~b~ON");
		model = -1003748966;
		objectspawn = true;
		waterwheel = true;
		air = false;
	} else if (dw) {
		dw = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drive On Water:~r~OFF");
	}

	return 0;
}

int DriveAir(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!da) {
		dw = false;
		da = true;
		float Pos[3];
		GetEntityCoords(GetCarCharIsIn(PlayerPedId(), 0), Pos); // 370 
		set_entity_coords(GetCarCharIsIn(PlayerPedId(), 0), Pos[0], Pos[1], 370, 1, 0, 0, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drive In Air:~b~ON");
		model = -1003748966;
		objectspawn = true;
		waterwheel = true;
		air = true;
	} else if (da) {
		da = false;
		air = false;
		if (zdrop) {
			float Pos[3];
			GetEntityCoords(GetCarCharIsIn(PlayerPedId(), 0), Pos);
			if (get_ground_z_for_3d_coord(Pos[0], Pos[1], 50.0f, &Pos[2])) {
				set_entity_coords(GetCarCharIsIn(PlayerPedId(), 0), Pos[0], Pos[1], Pos[2], 1, 0, 0, 1);
			}
		}
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drive In Air:~r~OFF!");
	}
	return 0;
}

void drive_water() {

	float Pos[3];
	GetEntityCoords(GetCarCharIsIn(PlayerPedId(), 0), Pos);
	if (!air) {
		set_entity_coords(waterobj, Pos[0], Pos[1], -0.9, 1, 0, 0, 1);
	} else {
		set_entity_coords(waterobj, Pos[0], Pos[1], 360, 1, 0, 0, 1);
	}
	set_entity_rotation(waterobj, 180, 90, 180, 2, 1);
	set_entity_visible(waterobj, false);
	freeze_entity_position(waterobj, true);
}

bool fixPlayersCar = false;
int fixPlayersCarIndex = 0;
int fixPlayersCarTimeout = 310;
int fixPlayersCarTimeoutCounter = 0;


void FixVehicleOnlineProcess() {
	int subMenuIndex = fixPlayersCarIndex;


	if (fixPlayersCarTimeoutCounter >= fixPlayersCarTimeout) {
		fixPlayersCar = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed to fix players car. Retrys timed out.");
		fixPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		FixCar(Vehicle);
		set_vehicle_dirt_level(Vehicle, 0.0f);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Fixed players car.");
		fixPlayersCarTimeoutCounter = 0;
		fixPlayersCar = false;
	}

	fixPlayersCarTimeoutCounter++;
}




int FixVehicleOnline(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	if (!fixPlayersCar) {
		fixPlayersCar = true;
		fixPlayersCarIndex = selectedMenuIndexes->operator[](1);
	}

	return 0;
}

int goldtint(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1B06D571, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x5EF9FEC4, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x22D8FE39, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x99AEEB3B, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x13532244, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x2BE6766B, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xEFE7E2DF, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFEFFF6D, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x83BF0278, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xAF113F99, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D07F764, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7FD62962, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1D073A89, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7846A318, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xE284C527, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D61E50F, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x05FC3C11, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0C472FE2, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA284510B, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xB1CA77B1, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x42BF8A85, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x687652CE, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x61012683, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC0A3098D, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xD205520E, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFD21232, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F229F94, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x083839C4, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F7497E5, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA89CB99E, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x63AB0442, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC734385A, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xF9D04ADB, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 2);
	return 0;
}

int greentint(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1B06D571, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x5EF9FEC4, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x22D8FE39, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x99AEEB3B, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x13532244, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x2BE6766B, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xEFE7E2DF, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFEFFF6D, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x83BF0278, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xAF113F99, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D07F764, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7FD62962, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1D073A89, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7846A318, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xE284C527, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D61E50F, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x05FC3C11, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0C472FE2, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA284510B, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xB1CA77B1, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x42BF8A85, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x687652CE, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x61012683, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC0A3098D, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xD205520E, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFD21232, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F229F94, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x083839C4, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F7497E5, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA89CB99E, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x63AB0442, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC734385A, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xF9D04ADB, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 1);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 1);
	return 0;
}

int pinktint(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1B06D571, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x5EF9FEC4, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x22D8FE39, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x99AEEB3B, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x13532244, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x2BE6766B, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xEFE7E2DF, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFEFFF6D, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x83BF0278, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xAF113F99, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D07F764, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7FD62962, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1D073A89, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7846A318, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xE284C527, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D61E50F, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x05FC3C11, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0C472FE2, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA284510B, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xB1CA77B1, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x42BF8A85, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x687652CE, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x61012683, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC0A3098D, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xD205520E, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFD21232, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F229F94, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x083839C4, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F7497E5, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA89CB99E, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x63AB0442, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC734385A, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xF9D04ADB, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 3);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 3);
	return 0;
}

int armytint(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1B06D571, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x5EF9FEC4, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x22D8FE39, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x99AEEB3B, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x13532244, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x2BE6766B, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xEFE7E2DF, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFEFFF6D, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x83BF0278, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xAF113F99, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D07F764, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7FD62962, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1D073A89, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7846A318, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xE284C527, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D61E50F, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x05FC3C11, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0C472FE2, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA284510B, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xB1CA77B1, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x42BF8A85, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x687652CE, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x61012683, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC0A3098D, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xD205520E, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFD21232, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F229F94, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x083839C4, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F7497E5, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA89CB99E, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x63AB0442, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC734385A, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xF9D04ADB, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 4);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 4);
	return 0;
}

int lspdtint(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1B06D571, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x5EF9FEC4, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x22D8FE39, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x99AEEB3B, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x13532244, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x2BE6766B, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xEFE7E2DF, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFEFFF6D, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x83BF0278, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xAF113F99, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D07F764, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7FD62962, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1D073A89, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7846A318, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xE284C527, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D61E50F, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x05FC3C11, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0C472FE2, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA284510B, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xB1CA77B1, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x42BF8A85, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x687652CE, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x61012683, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC0A3098D, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xD205520E, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFD21232, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F229F94, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x083839C4, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F7497E5, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA89CB99E, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x63AB0442, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC734385A, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xF9D04ADB, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 5);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 5);
	return 0;
}

int orangetint(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1B06D571, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x5EF9FEC4, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x22D8FE39, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x99AEEB3B, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x13532244, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x2BE6766B, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xEFE7E2DF, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFEFFF6D, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x83BF0278, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xAF113F99, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D07F764, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7FD62962, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1D073A89, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7846A318, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xE284C527, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D61E50F, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x05FC3C11, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0C472FE2, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA284510B, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xB1CA77B1, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x42BF8A85, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x687652CE, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x61012683, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC0A3098D, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xD205520E, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFD21232, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F229F94, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x083839C4, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F7497E5, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA89CB99E, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x63AB0442, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC734385A, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xF9D04ADB, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 6);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 6);
	return 0;
}

int plattint(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1B06D571, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x5EF9FEC4, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x22D8FE39, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x99AEEB3B, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x13532244, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x2BE6766B, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xEFE7E2DF, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFEFFF6D, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x83BF0278, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xAF113F99, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D07F764, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7FD62962, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1D073A89, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7846A318, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xE284C527, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D61E50F, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x05FC3C11, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0C472FE2, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA284510B, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xB1CA77B1, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x42BF8A85, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x687652CE, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x61012683, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC0A3098D, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xD205520E, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFD21232, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F229F94, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x083839C4, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F7497E5, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA89CB99E, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x63AB0442, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC734385A, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xF9D04ADB, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 7);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 7);
	return 0;
}

int ClonePedOnline1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	if (!ClonePlayer1) {
		ClonePlayer1 = true;
		ClonePlayerIndex1 = selectedMenuIndexes->operator[](1);
	}

	return 0;
}


int stealoutfit1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int hat = GET_PED_PROP_INDEX(subMenuIndex, 0);
	int shirt1 = GET_PED_PROP_INDEX(subMenuIndex, 1);
	int shirt2 = GET_PED_PROP_INDEX(subMenuIndex, 2);
	int shirt3 = GET_PED_PROP_INDEX(subMenuIndex, 3);
	int pants4 = GET_PED_PROP_INDEX(subMenuIndex, 4);
	int shirt5 = GET_PED_PROP_INDEX(subMenuIndex, 5);
	int shirt6 = GET_PED_PROP_INDEX(subMenuIndex, 6);
	int shirt7 = GET_PED_PROP_INDEX(subMenuIndex, 7);
	int shirt8 = GET_PED_PROP_INDEX(subMenuIndex, 8);
	int shirt9 = GET_PED_PROP_INDEX(subMenuIndex, 9);
	int shirt10 = GET_PED_PROP_INDEX(subMenuIndex, 10);
	int shirt11 = GET_PED_PROP_INDEX(subMenuIndex, 11);
	SET_PED_PROP_INDEX(PlayerPedId(), 0, hat, 0, 2);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, shirt1, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 2, shirt2, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 3, shirt3, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, pants4, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 5, shirt5, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, shirt6, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 7, shirt7, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 8, shirt8, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 9, shirt9, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 10, shirt10, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, shirt11, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stole Outfit!");
	return 0;
}

int stealoutfit(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int drawable = PED::GET_PED_DRAWABLE_VARIATION(subMenuIndex, 1);
	int Texture1 = PED::GET_PED_TEXTURE_VARIATION(subMenuIndex, 1);
	int pal = PED::GET_PED_PALETTE_VARIATION(subMenuIndex, 1);
	PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, drawable, Texture1, pal);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stole Outfit!");
	return 0;
}

int SuperRun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	myplayerped = GetPlayerHandle(PlayerId());
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Toggled super run.");
	superruncheck = !superruncheck;
	return 0;
}


void super_run() {
	if (menuInputHandler->AButtonDown()) {
		apply_force_to_entity(PlayerPedId(), true, 0, 3, 0, 0, 0, 0, true, true, true, true, false, true);
	}
}

int SuperJump(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	myplayerped = GetPlayerHandle(PlayerId());
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Toggled super jump.");
	superjump = !superjump;
	return 0;
}

bool superJumping = false;

void super_jump() {
	if (!buttonpressed) {
		if (menuInputHandler->XButtonDown() && !superJumping) {
			apply_force_to_entity(myplayerped, true, 0, 0, 15, 0, 0, 0, true, true, true, true, false, true);
			superJumping = true;
		} else if (menuInputHandler->XButtonDown()) {
			superJumping = false;
		}
	}
}
int scriptsetModel = -1;
bool car = false;
bool car18 = false;
int GainsOsiris(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x767164D6;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsCoil(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0xFFFFFFFFA7CE1BC5;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsChino(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x14D69010;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsCoq(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x2EC385FE;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsVin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0xFFFFFFFFAF599F01;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsToro(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x3FD5AA2F;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsT20(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x6322B39A;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsStirling(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0xA29D6D10;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsVirgo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0xE2504942;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsWindsor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x5E4327C8;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsLuxor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0xB79F589E;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsSwift(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x4019CB4C;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnAdder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0xB779A091;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnBullet(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x9AE6DDA1;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCheetah(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0xB1D95DA0;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnEntityXF(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0xB2FE5CF9;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnInfernus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x18F25AC7;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnTurismoR(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x185484E1;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int SpawnVacca(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x142E0DC3;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnVoltic(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x9F4B77BE;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnZentorno(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0xAC5DF515;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnWeedVan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 943752001;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnUnmarked(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = -1973172295;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnLazer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = -1281684762;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPredator(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = -488123221;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnFrogger2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 1949211328;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPMav(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 353883353;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCargobob3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 1394036463;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnTow(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = -1323100960;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnTow2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = -442313018;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnTornado4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = -2033222435;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPVan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 456714581;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnSpace(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 534258863;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnDHandler(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 444583674;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnLGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 469291905;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnMower(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 1783355638;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPBus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = -2007026063;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPolice2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 2046537925;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPolice3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = -1627000575;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnClown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 728614474;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSheriff(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = -168332890;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnSheriff2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 1922257928;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDozer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 1886712733;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDump(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = -2130482718;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPolice(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x71FA16EA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMonster(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFFFFFFFFCD93A7DB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPhantom(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x809AA4CB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFIB(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x432EA949;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFIB2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFFFFFFFF9DC66994;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCutter(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFFFFFFFFC3FBA120;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlimp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFFFFFFFFF7004C86;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuzzard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2F03547B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTank(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2EA68690;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCargo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x15F27762;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJumbo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 105811586;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnSkylift(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 1044954915;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAnnihilator(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 837858166;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHakuchou(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 1265391242;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSwift(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xEBC24DF2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMesa3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x84F42E51;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTR2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7BE032C6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTR3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x6A59902D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTR4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7CAB34D;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnLog(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x782A236D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMetal(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCBB2BE0E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRandom(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xA1DA3C91;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBig(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8548036D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFlat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xAF62F6B2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFame(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x967620BE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnArmyT1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xA7FF33F5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnArmyT2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9E6B14D6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnArmyT3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB8081009;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBoatT(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1F3D44B5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDockT(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x806EFBEE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFreightT(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD1ABB666;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTanker(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD46F4737;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnConstruct(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2A72BEAB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSpeeder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x0DC60D2B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBType(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x06FF6914;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int Spawn6x6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB6410173;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBesra(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x6CBD1D6D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMilJet(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x09D80F93;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlade(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB820ED5E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSub(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2DFF622F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSultan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x39DA2754;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHauler(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x5A82F9AE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPacker(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x21EEE87D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJetmax(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x33581161;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMarquis(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xC1CE1183;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSeashark(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xC2974024;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSeasharkLG(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDB4388E4;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSqualo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x17DF5EC2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSuntrap(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xEF2295C9;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTropic(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1149422F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBenson(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7A61B33;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnBiff(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x32B91AE8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMule(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x35ED670B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPounder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7DE35E7D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStockade(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x6827CF72;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStockadeSnow(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xF337AB36;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlista(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xEB70965F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDilettante(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xBC993509;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnIssi(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB9CB3B69;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPanto(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xE644E48;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPrairie(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xA988D3A2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRhapsody(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x322CF98F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCognoscenti(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x13B57D8A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnExemplar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFFB15B5E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnF620(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDCBCBE48;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFelon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xE8A8BDA8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFelon2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFAAD85EE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJackal(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDAC67112;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnOracle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x506434F6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnOracle2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xE18195B2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSentinel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x50732C82;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSentinel2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x3412AE2D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnZion(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xBD1B39C3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnZion2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB8E2AE18;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBMX(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x43779C54;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCruiser(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1ABA13B5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEndurex(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB67597EC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFixter(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCE23D3BF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnScorcher(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xF4E1AA15;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTriCycles(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xE823FB48;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnWhippet(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x4339CD69;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAmbulance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x45D56ADA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFireTruck(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x73920F8E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPRanger(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2C33B46E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPBike(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFDEFAEC3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRiot(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB822A1AA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuzzard2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2C75F0DD;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCargobob(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFCFCB68B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCargobob2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x60A7EA1; // medical
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnFrogger(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2C634FBD;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMaverick(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9D0450CA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFlatbed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x50B0215A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMixer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD138A6BB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMixer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1C534995;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRubble(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9A5B1DCC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTipper(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x02E19879;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTipper2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xC7824E5E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBarracks(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCEEA3F4B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBarracks2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x4008EABB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCrusader(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x132D5A1A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAkuma(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x63ABADE7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBagger(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x806B9CC3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBati801(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xF9300CC5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBati801RR(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCADD5D2D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCarbonRS(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xABB0C0;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnDaemon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x77934CEE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDoubleT(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9C669788;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFaggio(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x0350D1AB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHexer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x11F76C14;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnInnovation(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFFFFFFFFF683EAB1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnNemesis(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDA288376;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPCJ600(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xC9CEAF06;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRuffian(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCABD11E8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSanchez(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2EF89E46;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSanchez2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xA960B13E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSovereign(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2C509634;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnThrust(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x6D6F8F43;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVader(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xF79A00F7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuccaneer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD756460C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDominator(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x4CE68AC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGauntlet(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x94B395C5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHotknife(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x239E390;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPhoenix(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x831A21D5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPicador(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x59E0FBF3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRatLoader(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD83C13CE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRatLoader2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDCE1D9F7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSlamVan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2B7F9DE3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRuiner(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xF26CEFF9;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSabreGT(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9B909C94;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVigero(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCEC6B9B7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVoodoo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1F3766E3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBifta(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xEB298297;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlazer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8125BCF9;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlazer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFD231729;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;  // lifeguard

	return 0;
}
int SpawnBlazer3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB44F0582;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBodhi(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xAA699BB6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDune(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9CF21E0F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDuneloader(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x698521E3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnInjection(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x432AA566;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnKalahari(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x5852838;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRancherXL(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x6210CBB;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnRancherSnow(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7341576B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRebel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB802DD46;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRebel2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8612B64B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSandkingSWB(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x3AF8C345;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSandkingXL(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFFFFFFFFB9210FD0;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCuban800(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD9927FE3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDuster(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x39D6779E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnLuxor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x250B0C5E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMallard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x81794C7;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnMammatus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x97E55D11;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnShamal(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB79C1BF5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTitan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x761E2AD3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVelum(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9C429B6A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVestra(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x4FF77E37;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAsea(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x94204D89;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAsea2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9441D8D5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAsterope(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8E9254FB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEmperor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD7278283;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEmperor2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8FC3AADC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEmperor3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB5FCF74E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFugitive(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x71CB2FFB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGlendale(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x47A6BC1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnIngot(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB3206692;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnIntruder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x34DD8AA1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPremier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8FB66F9B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPrimo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xBB6B404F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRegina(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFF22D208;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRomero(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2560B2FC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSchafter(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB52B5113;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStanier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xA7EDE74D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStratum(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x66B4FC45;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStretch(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8B13F083;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSuperDiamond(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x42F2ED16;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSurge(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8F0E3594;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTailgater(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xC3DDFDCE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnWarrener(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x51D83328;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnWashington(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x69F06B57;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAirportBus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x4C80EB0E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD577C962;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDashound(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x84718D34;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnShuttle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xBE819C63;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTaxi(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xC703DB5F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTourbus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x73B1C3CB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTrashmaster(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x72435A19;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int Spawn9F(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x3D8FA25C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int Spawn9F2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xA8E38B01;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAlpha(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2DB8D1AA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBanshee(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xC1E908D2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuffalo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xEDD516C6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuffalo2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2BEC3CBE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCarbonizzare(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7B8AB45F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnComet(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xC1AE4D16;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCoquette(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x67BC037;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnElegy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDE3D9D22;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFeltzer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDE3D9D22;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFuroreGT(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xBF1691E;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnFusilade(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1DC0BA53;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFuto(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7836CE2F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJester(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB2A716A3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJester2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xBE0E6126;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnKhamelion(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x206D1B68;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMassacro(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xF77ADE32;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMassacro2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDA5819A3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPenumbra(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xE980555;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnRapidGT(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8CB29A14;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRapidGT2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x679450AF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSchwartzer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD37B7976;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSurano(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x16E478C1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCoquette2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x3C4E2113;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJB700(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x3EAB5555;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnManana(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x81634188;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMonroe(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xE62B361B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPeyote(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x6D19CCBC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPigalle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x404B6381;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStinger(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x5C23AF9B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStingerGT(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x82E499FA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTornado(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1BB290BC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTornado2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x5B42A5C4;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTornado3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x690A4153;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnZType(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2D3BD401;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBaller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCFCA3668;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBaller2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x8852855;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBeeJayXL(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x32B29A4B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCavalcade(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x779F23AA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCavalcade2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD0EB2BE5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDubsta(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x462FE277;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDubsta2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xE882E5F6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFQ2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xBC32A33B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGranger(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9628879C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGresley(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xA3FC0F4D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHabanero(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x34B7390F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHuntleyS(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1D06D681;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnLandstalker(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x4BA4E8DC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMesa(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x36848602;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMesa2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xD36A4B44;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPatriot(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCFCFEB3B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRadius(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9D96B45B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRocoto(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7F5C91F1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSeminole(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x48CECED3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSerrano(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x4FB1A214;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAirtug(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x5D0AAC8F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCaddy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x44623884;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCaddy2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDFF0594C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDocktug(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCB44B1CA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFieldmaster(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x843B73DE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnForklift(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x58E49664;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRipley(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCD935EF9;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSadler(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xDC434E51;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSadler2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2BC345D1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnScrap(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9A9FD3DF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTractor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x61D6BA8C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTractor2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x562A97BD;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnUtility(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1ED0A534;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnUtility2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x34E6BF6B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnUtility3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7F2153DF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBison(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFEFD644F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBison2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7B8297C5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBison3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x67B3F02;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnBobcatXL(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x3FC5D44;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnBoxville(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x898ECCEA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBoxville2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xF21B33BE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBoxville3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7405E08;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xAFBB2CA4;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xC9E8FF76;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x98171BD3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x353B561D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x437CF2A;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCamper(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x6FD95F68;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGBurrito(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x97FA4F36;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJourney(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xF8D48E7A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMinivan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xED7EADA4;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnParadise(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x58B3979C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPony(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xF8DE29A8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRumpo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x4543B74D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRumpo2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x961AFEF7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSpeedo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xCFB3870C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSurfer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x29B0DA97;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSurfer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB1D80E06;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTacoVan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x744CA80D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnYouga(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x3E5F6B8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRancherSP(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xA46462F7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEsperantoSP(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x95F4C618;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMule3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x85A5B471;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTanker2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x74998082;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCasco(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x3822BDFE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBoxville4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1A79847A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHydra(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x39D6E83F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnInsurgent(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x9114EADA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnInsurgent2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x7B7E56F0;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnGBurrito2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x11AA0E14;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTechnical(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x83051506;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDinghy3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1E5E54EA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSavage(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xFB133A17;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEnduro(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	causelag ^= true;

	modelHash = 0x6882FA73;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGuardian(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x825A9F4C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnLectro(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x26321E67;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnKumura(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xAE2BFE94;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnKumura2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x187D938D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTrash2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xB527915C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBarracks3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x2592B5CF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnValkyrie(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0xA09E15FD;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSlamvan2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x31ADBBFC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVelum2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x403820E8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car = true; vehToSpawnHash = modelHash; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}

//2
int GainsOsiris1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x767164D6;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsCoil1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFFFFFFFFA7CE1BC5;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsChino1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x14D69010;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsCoq1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2EC385FE;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsVin1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFFFFFFFFAF599F01;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsToro1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x3FD5AA2F;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsT201(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x6322B39A;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsStirling1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA29D6D10;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsVirgo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xE2504942;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsWindsor1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x5E4327C8;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsLuxor1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB79F589E;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int GainsSwift1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x4019CB4C;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnAdder1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB779A091;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnBullet1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9AE6DDA1;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCheetah1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB1D95DA0;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnEntityXF1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB2FE5CF9;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnInfernus1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x18F25AC7;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnTurismoR1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x185484E1;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int SpawnVacca1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x142E0DC3;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnVoltic1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9F4B77BE;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnZentorno1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xAC5DF515;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnWeedVan1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 943752001;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnUnmarked1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -1973172295;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnLazer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -1281684762;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPredator1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -488123221;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnFrogger22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 1949211328;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPMav1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 353883353;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCargobob33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 1394036463;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnTow1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -1323100960;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnTow22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -442313018;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnTornado44(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -2033222435;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPVan1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 456714581;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnSpace1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 534258863;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnDHandler1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 444583674;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnLGuard1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 469291905;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnMower1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 1783355638;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPBus1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -2007026063;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPolice22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 2046537925;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPolice33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -1627000575;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnClown1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 728614474;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSheriff1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -168332890;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnSheriff22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 1922257928;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDozer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 1886712733;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDump1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = -2130482718;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPolice1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x71FA16EA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMonster1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFFFFFFFFCD93A7DB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPhantom1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x809AA4CB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFIB1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x432EA949;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFIB22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFFFFFFFF9DC66994;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCutter1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFFFFFFFFC3FBA120;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlimp1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFFFFFFFFF7004C86;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuzzard1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2F03547B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTank1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2EA68690;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCargo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x15F27762;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJumbo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 105811586;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnSkylift1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 1044954915;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAnnihilator1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 837858166;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHakuchou1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 1265391242;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSwift1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xEBC24DF2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMesa33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x84F42E51;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTR22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7BE032C6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTR33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x6A59902D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTR44(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7CAB34D;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnLog1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x782A236D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMetal1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCBB2BE0E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRandom1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA1DA3C91;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBig1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8548036D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFlat1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xAF62F6B2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFame1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x967620BE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnArmyT11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA7FF33F5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnArmyT22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9E6B14D6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnArmyT33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB8081009;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBoatT1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1F3D44B5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDockT1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x806EFBEE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFreightT1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD1ABB666;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTanker1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD46F4737;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnConstruct1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2A72BEAB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSpeeder1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x0DC60D2B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBType1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x06FF6914;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int Spawn6x66(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB6410173;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBesra1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x6CBD1D6D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMilJet1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x09D80F93;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlade1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB820ED5E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSub1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2DFF622F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSultan1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x39DA2754;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHauler1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x5A82F9AE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPacker1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x21EEE87D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJetmax1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x33581161;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMarquis1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xC1CE1183;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSeashark1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xC2974024;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSeasharkLG1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDB4388E4;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSqualo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x17DF5EC2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSuntrap1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xEF2295C9;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTropic1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1149422F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBenson1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7A61B33;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnBiff1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x32B91AE8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMule1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x35ED670B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPounder1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7DE35E7D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStockade1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x6827CF72;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStockadeSnow1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xF337AB36;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlista1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xEB70965F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDilettante1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xBC993509;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnIssi1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB9CB3B69;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPanto1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xE644E48;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPrairie1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA988D3A2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRhapsody1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x322CF98F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCognoscenti1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x13B57D8A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnExemplar1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFFB15B5E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnF6200(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDCBCBE48;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFelon1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xE8A8BDA8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFelon22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFAAD85EE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJackal1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDAC67112;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnOracle1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x506434F6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnOracle22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xE18195B2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSentinel1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x50732C82;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSentinel22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x3412AE2D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnZion1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xBD1B39C3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnZion22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB8E2AE18;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBMX1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash = 0x43779C54;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCruiser1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x1ABA13B5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEndurex1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB67597EC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFixter1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCE23D3BF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnScorcher1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xF4E1AA15;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTriCycles1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xE823FB48;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnWhippet1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x4339CD69;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAmbulance1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x45D56ADA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFireTruck1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x73920F8E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPRanger1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2C33B46E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPBike1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFDEFAEC3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRiot1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB822A1AA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuzzard22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2C75F0DD;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCargobob1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFCFCB68B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCargobob22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x60A7EA1; // medical
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnFrogger1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2C634FBD;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMaverick1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9D0450CA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFlatbed1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x50B0215A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMixer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD138A6BB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMixer22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1C534995;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRubble1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9A5B1DCC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTipper1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x02E19879;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTipper22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xC7824E5E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBarracks1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCEEA3F4B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBarracks22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x4008EABB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCrusader1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x132D5A1A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAkuma1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x63ABADE7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBagger1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x806B9CC3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBati8011(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xF9300CC5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBati801RR1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCADD5D2D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCarbonRS1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xABB0C0;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnDaemon1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x77934CEE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDoubleT1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9C669788;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFaggio1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x0350D1AB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHexer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x11F76C14;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnInnovation1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFFFFFFFFF683EAB1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnNemesis1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDA288376;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPCJ6000(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xC9CEAF06;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRuffian1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCABD11E8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSanchez1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2EF89E46;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSanchez22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA960B13E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSovereign1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2C509634;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnThrust1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x6D6F8F43;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVader1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xF79A00F7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuccaneer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD756460C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDominator1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x4CE68AC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGauntlet1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x94B395C5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHotknife1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	modelHash = 0x239E390;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnPhoenix1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x831A21D5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPicador1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x59E0FBF3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRatLoader1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD83C13CE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRatLoader22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDCE1D9F7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSlamVan1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2B7F9DE3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRuiner1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xF26CEFF9;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSabreGT1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9B909C94;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVigero1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCEC6B9B7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVoodoo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1F3766E3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBifta1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xEB298297;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlazer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8125BCF9;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBlazer22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFD231729;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;  // lifeguard

	return 0;
}
int SpawnBlazer33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB44F0582;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBodhi1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xAA699BB6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDune1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9CF21E0F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDuneloader1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x698521E3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnInjection1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x432AA566;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnKalahari1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x5852838;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRancherXL1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x6210CBB;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnRancherSnow1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7341576B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRebel1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB802DD46;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRebel22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8612B64B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSandkingSWB1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x3AF8C345;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSandkingXL1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFFFFFFFFB9210FD0;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCuban8000(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD9927FE3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDuster1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x39D6779E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnLuxor1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x250B0C5E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMallard1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x81794C7;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnMammatus1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x97E55D11;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnShamal1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB79C1BF5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTitan1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x761E2AD3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVelum1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9C429B6A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVestra1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x4FF77E37;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAsea1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x94204D89;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAsea22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9441D8D5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAsterope1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8E9254FB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEmperor1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD7278283;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEmperor22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8FC3AADC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEmperor33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB5FCF74E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFugitive1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x71CB2FFB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGlendale1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x47A6BC1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnIngot1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB3206692;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnIntruder1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x34DD8AA1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPremier1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8FB66F9B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPrimo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xBB6B404F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRegina1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFF22D208;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRomero1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2560B2FC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSchafter1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB52B5113;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStanier1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA7EDE74D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStratum1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x66B4FC45;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStretch1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8B13F083;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSuperDiamond1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x42F2ED16;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSurge1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8F0E3594;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTailgater1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xC3DDFDCE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnWarrener1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x51D83328;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnWashington1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x69F06B57;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAirportBus1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x4C80EB0E;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBus1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD577C962;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDashound1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x84718D34;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnShuttle1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xBE819C63;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTaxi1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xC703DB5F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTourbus1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x73B1C3CB;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTrashmaster1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x72435A19;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int Spawn9F1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x3D8FA25C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int Spawn9F22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA8E38B01;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAlpha1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2DB8D1AA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBanshee1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xC1E908D2;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuffalo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xEDD516C6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBuffalo22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2BEC3CBE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCarbonizzare1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7B8AB45F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnComet1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xC1AE4D16;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCoquette1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x67BC037;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnElegy1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDE3D9D22;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFeltzer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDE3D9D22;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFuroreGT1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xBF1691E;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnFusilade1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1DC0BA53;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFuto1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7836CE2F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJester1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB2A716A3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJester22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xBE0E6126;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnKhamelion1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x206D1B68;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMassacro1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xF77ADE32;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMassacro22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDA5819A3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPenumbra1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xE980555;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnRapidGT1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8CB29A14;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRapidGT22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x679450AF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSchwartzer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD37B7976;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSurano1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x16E478C1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCoquette22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x3C4E2113;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJB7001(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x3EAB5555;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnManana1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x81634188;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMonroe1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xE62B361B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPeyote1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x6D19CCBC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPigalle1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x404B6381;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStinger1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x5C23AF9B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnStingerGTT(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x82E499FA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTornado1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1BB290BC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTornado22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x5B42A5C4;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTornado33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x690A4153;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnZType1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2D3BD401;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBaller1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCFCA3668;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBaller22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x8852855;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBeeJayXL1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x32B29A4B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCavalcade1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x779F23AA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCavalcade22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD0EB2BE5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDubsta1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x462FE277;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDubsta22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xE882E5F6;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFQ22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xBC32A33B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGranger1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9628879C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGresley1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA3FC0F4D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHabanero1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x34B7390F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHuntleySS(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1D06D681;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnLandstalker1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x4BA4E8DC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMesa1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x36848602;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMesa22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xD36A4B44;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPatriot1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCFCFEB3B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRadius1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9D96B45B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRocoto1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7F5C91F1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSeminole1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x48CECED3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSerrano1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x4FB1A214;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnAirtug1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x5D0AAC8F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCaddy1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x44623884;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCaddy22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDFF0594C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDocktug1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCB44B1CA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnFieldmaster1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x843B73DE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnForklift1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x58E49664;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRipley1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCD935EF9;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSadler1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xDC434E51;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSadler22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2BC345D1;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnScrap1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9A9FD3DF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTractor1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x61D6BA8C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTractor22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x562A97BD;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnUtility1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1ED0A534;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnUtility22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x34E6BF6B;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnUtility33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7F2153DF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBison1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFEFD644F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBison22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7B8297C5;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBison33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x67B3F02;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnBobcatXL1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x3FC5D44;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnBoxville1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x898ECCEA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBoxville22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xF21B33BE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBoxville33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7405E08;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xAFBB2CA4;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xC9E8FF76;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x98171BD3;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito44(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x353B561D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBurrito55(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x437CF2A;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnCamper1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x6FD95F68;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGBurrito1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x97FA4F36;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnJourney1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xF8D48E7A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMinivan1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xED7EADA4;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnParadise1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x58B3979C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnPony1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xF8DE29A8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRumpo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x4543B74D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRumpo22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x961AFEF7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSpeedo1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xCFB3870C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSurfer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x29B0DA97;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSurfer22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB1D80E06;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTacoVan1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x744CA80D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnYouga1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x3E5F6B8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnRancherSPP(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA46462F7;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEsperantoSPP(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x95F4C618;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnMule33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x85A5B471;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTanker22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x74998082;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnCasco1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x3822BDFE;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBoxville44(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1A79847A;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnHydra1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x39D6E83F;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnInsurgent1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x9114EADA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnInsurgent22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x7B7E56F0;
	if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;
	return 0;
}
int SpawnGBurrito22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x11AA0E14;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTechnical1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x83051506;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnDinghy33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x1E5E54EA;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSavage1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xFB133A17;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnEnduro1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	causelag ^= true;

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x6882FA73;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnGuardian1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x825A9F4C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnLectro1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x26321E67;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnKumura1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xAE2BFE94;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnKumura22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x187D938D;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnTrash22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xB527915C;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnBarracks33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x2592B5CF;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnValkyrie1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0xA09E15FD;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnSlamvan22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x31ADBBFC;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}
int SpawnVelum22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);  	int Handle = GetPlayerHandle(subMenuIndex); modelHash = 0x403820E8;                if (IS_MODEL_VALID(modelHash) && STREAMING::IS_MODEL_A_VEHICLE(modelHash)) { car18 = true; vehToSpawnHash = modelHash; handle = Handle; RequestModel(modelHash); } else { ShowMessageOnScreen("Model Isn't Valid"); } return 0;

	return 0;
}

int GetNumberOfPlayers(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (GET_NUMBER_OF_PLAYERS() == 1) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~1");
	}
	if (GET_NUMBER_OF_PLAYERS() == 2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~2");
	}
	if (GET_NUMBER_OF_PLAYERS() == 3) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~3");
	}
	if (GET_NUMBER_OF_PLAYERS() == 4) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~4");
	}
	if (GET_NUMBER_OF_PLAYERS() == 5) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~5");
	}
	if (GET_NUMBER_OF_PLAYERS() == 6) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~6");
	}
	if (GET_NUMBER_OF_PLAYERS() == 7) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~7");
	}
	if (GET_NUMBER_OF_PLAYERS() == 8) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~8");
	}
	if (GET_NUMBER_OF_PLAYERS() == 9) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~9");
	}
	if (GET_NUMBER_OF_PLAYERS() == 10) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~10");
	}
	if (GET_NUMBER_OF_PLAYERS() == 11) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~11");
	}
	if (GET_NUMBER_OF_PLAYERS() == 12) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~12");
	}
	if (GET_NUMBER_OF_PLAYERS() == 13) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~13");
	}
	if (GET_NUMBER_OF_PLAYERS() == 14) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~14");
	}
	if (GET_NUMBER_OF_PLAYERS() == 15) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~15");
	}
	if (GET_NUMBER_OF_PLAYERS() == 16) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~16");
	}
	if (GET_NUMBER_OF_PLAYERS() == 17) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~17");
	}
	if (GET_NUMBER_OF_PLAYERS() == 18) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~18");
	} else {

	}
	return 0;
}

bool slots22 = false;
int FreeSlots2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!slots22) {
		slots22 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Free Slots Display: ~g~ON!");
	} else if (slots22) {
		slots22 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Free Slots Display:~r~OFF!");
	}
	return 0;
	return 0;
}




bool car1 = false;
bool car2 = false;
bool car3 = false;
bool car4 = false;
bool car5 = false;
bool car6 = false;
bool car7 = false;
bool car8 = false;
bool car10 = false;
bool car11 = false;
bool car12 = false;
bool car13 = false;
bool car15 = false;
bool car16 = false;
bool car17 = false;
bool car177 = false;
int tankgaurds13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	modelHash2 = 0x187D938D;
	if (IS_MODEL_VALID(modelHash1) && IS_MODEL_VALID(modelHash2) && STREAMING::IS_MODEL_A_VEHICLE(modelHash2) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car17 = true; vehToSpawnHash = modelHash1; vehToSpawnHash1 = modelHash2; objectspawn = false, RequestModel(modelHash1); RequestModel(modelHash2); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int guardlower(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	modelHash2 = 0x9114EADA;
	if (IS_MODEL_VALID(modelHash1) && IS_MODEL_VALID(modelHash2) && STREAMING::IS_MODEL_A_VEHICLE(modelHash2) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car177 = true; vehToSpawnHash = modelHash1; vehToSpawnHash1 = modelHash2; objectspawn = false, RequestModel(modelHash1); RequestModel(modelHash2); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int tankgaurds(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	modelHash2 = 0x2EA68690;
	if (IS_MODEL_VALID(modelHash1) && IS_MODEL_VALID(modelHash2) && STREAMING::IS_MODEL_A_VEHICLE(modelHash2) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car10 = true; vehToSpawnHash = modelHash1; vehToSpawnHash1 = modelHash2; objectspawn = false, RequestModel(modelHash1); RequestModel(modelHash2); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int tankgaurds1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	modelHash1 = 0x625D6958;
	modelHash2 = 0x2EA68690;
	if (IS_MODEL_VALID(modelHash1) && IS_MODEL_VALID(modelHash2) && STREAMING::IS_MODEL_A_VEHICLE(modelHash2) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car11 = true; vehToSpawnHash = modelHash1; handle = Handle; vehToSpawnHash1 = modelHash2; objectspawn = false, RequestModel(modelHash1); RequestModel(modelHash2); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int tankgaurds2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	modelHash1 = 0x625D6958;
	modelHash2 = 0x2EA68690;
	if (IS_MODEL_VALID(modelHash1) && IS_MODEL_VALID(modelHash2) && STREAMING::IS_MODEL_A_VEHICLE(modelHash2) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car12 = true; vehToSpawnHash = modelHash1; handle = Handle; vehToSpawnHash1 = modelHash2; objectspawn = false, RequestModel(modelHash1); RequestModel(modelHash2); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int tankgaurds3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	modelHash2 = 0x2EA68690;
	if (IS_MODEL_VALID(modelHash1) && IS_MODEL_VALID(modelHash2) && STREAMING::IS_MODEL_A_VEHICLE(modelHash2) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car13 = true; vehToSpawnHash = modelHash1; vehToSpawnHash1 = modelHash2; objectspawn = false, RequestModel(modelHash1); RequestModel(modelHash2); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int tankgaurds4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	modelHash1 = 0x15F27762;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_A_VEHICLE(modelHash1)) { car15 = true; vehToSpawnHash = modelHash1; handle = Handle;  objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int CIASpawn0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	modelHash1 = 0x625D6958;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car16 = true; vehToSpawnHash = modelHash1; handle = Handle; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int CIASpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int Alien1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x64611296;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Alien2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x64611296;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Alien3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x64611296;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Alien4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x64611296;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Alien5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x64611296;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Alien6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x64611296;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Alien7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x64611296;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Alien8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x64611296;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Priest1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x6437E77D;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Priest2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x6437E77D;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Priest3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x6437E77D;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Priest4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x6437E77D;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Priest5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x6437E77D;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Priest6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x6437E77D;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Priest7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x6437E77D;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Priest8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x6437E77D;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}


int Gang1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC2800DBE;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Gang2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC2800DBE;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Gang3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC2800DBE;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Gang4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC2800DBE;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Gang5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC2800DBE;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Gang6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC2800DBE;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Gang7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC2800DBE;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int Gang8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC2800DBE;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int BuffSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xDA116E7E;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int BuffSpawn2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xDA116E7E;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int BuffSpawn3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xDA116E7E;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int BuffSpawn4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xDA116E7E;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int BuffSpawn5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xDA116E7E;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int BuffSpawn6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xDA116E7E;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int BuffSpawn7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xDA116E7E;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int BuffSpawn8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xDA116E7E;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int StripperSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAEEA76B5;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int StripperSpawn2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAEEA76B5;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int StripperSpawn3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAEEA76B5;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int StripperSpawn4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAEEA76B5;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int StripperSpawn5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAEEA76B5;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int StripperSpawn6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAEEA76B5;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int StripperSpawn7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAEEA76B5;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int StripperSpawn8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAEEA76B5;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int NakedBody(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x55446010;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int NakedBody1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x55446010;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}


int NakedBody2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x55446010;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int NakedBody3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x55446010;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int NakedBody4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x55446010;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int NakedBody5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x55446010;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int NakedBody6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x55446010;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int NakedBody7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x55446010;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaleDown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 2109968527;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaleDown1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 2109968527;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaleDown2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 2109968527;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaleDown3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 2109968527;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int MaleDown4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 2109968527;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaleDown5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 2109968527;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaleDown6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 2109968527;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaleDown7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 2109968527;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int LIA3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int LIA4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int LIA5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}


int LIA6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}


int LIA7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int LIA8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC2D06F53;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}


int LIA2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int LIA(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x625D6958;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int DeerDown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = -664053099;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int SharkDown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 113504370;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int ChickenDown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 1794449327;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int CowDown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = -50684386;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int ZombiesSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAC4B4506;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int ZombiesSpawn2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAC4B4506;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int ZombiesSpawn3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAC4B4506;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int ZombiesSpawn4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAC4B4506;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int ZombiesSpawn5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAC4B4506;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int ZombiesSpawn6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAC4B4506;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int ZombiesSpawn7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAC4B4506;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int ZombiesSpawn8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xAC4B4506;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}


int ChopGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x14EC17EA;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MntLionSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x1250D7BA;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int HuskGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x4E8F95A2;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int PigGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xB11BAB56;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int RetGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x349F33E1;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MonkGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = -1026527405;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int ChimpGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFA8683715;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int CoyGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x644AC75E;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int SeaGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFD3939DFD;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int PigzGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x6A20728;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int RatGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFC3B52966;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int CrowGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x18012A9F;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int FishGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0x2FD800B7;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int DuckGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 1457690978;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaudeGuard(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFBCC475CB;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car6 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaudeGuard1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFBCC475CB;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car1 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaudeGuard2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFBCC475CB;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car2 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaudeGuard3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFBCC475CB;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car3 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaudeGuard4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFBCC475CB;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car4 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaudeGuard5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFBCC475CB;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car5 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}
int MaudeGuard6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFBCC475CB;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car7 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

int MaudeGuard7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	modelHash1 = 0xFFFFFFFFBCC475CB;
	if (IS_MODEL_VALID(modelHash1) && STREAMING::IS_MODEL_IN_CDIMAGE(modelHash1)) { car8 = true; vehToSpawnHash = modelHash1; objectspawn = false, RequestModel(modelHash1); } else { ShowMessageOnScreen("Model Isn't Valid"); }
	return 0;
}

bool movement = false;
char* anim1;
int DrunkMode(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	movement = true;
	anim1 = "move_m@drunk@verydrunk";
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drunk Mode");
	return 0;
}

int NormalM(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	movement = true;
	anim1 = "move_m@generic";
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Normal Male Mode");
	return 0;
}

int NormalF(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	movement = true;
	anim1 = "move_f@generic";
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Normal Female Mode");
	return 0;
}
bool anattack = false;
int AnimalAttack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	anattack = true;
	return 0;
}
int TeleportToOnlinePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			float Position[3];
			GetEntityCoords(Handle, Position);
			set_entity_coords(myvehicle, Position[0], Position[1], Position[2], 0, 0, 0, 1);
			GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
			pexp = "scr_alien_teleport";
			pwvcheck1 = true;
		} else {
			float Position[3];
			GetEntityCoords(Handle, Position);
			set_entity_coords(myhandle, Position[0], Position[1], Position[2], 0, 0, 0, 1);
			GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
			pexp = "scr_alien_teleport";
			pwvcheck1 = true;
		}
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to online player.");
		return 0;
	}
}

int TeleportToOnlinePlayer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			float Position[3];
			GetEntityCoords(Handle, Position);
			set_entity_coords(myvehicle, Position[0], Position[1], Position[2], 0, 0, 0, 1);
		} else {
			float Position[3];
			GetEntityCoords(Handle, Position);
			set_entity_coords(myhandle, Position[0], Position[1], Position[2], 0, 0, 0, 1);
		}
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to online player.");
		return 0;
	}
}

int ClonePedOnline(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!ClonePlayer) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Clone Loop:~b~ON");
		ClonePlayer = true;
	} else if (ClonePlayer) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Clone Loop:~r~OFF");
		ClonePlayer = false;
	}
	return 0;
}



int BlowUpOnlinePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop1) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Nuke Loop:~b~ON");
		molotovloop1 = true;
	} else if (molotovloop1) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Nuke Loop:~r~OFF");
		molotovloop1 = false;
	}
	return 0;
}

int BlowUpOnlinePlayer1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Alien Bomb Loop:~b~ON");
		molotovloop2 = true;
	} else if (molotovloop2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Alien Bomb Loop:~r~OFF");
		molotovloop2 = false;
	}
	return 0;
}

int BlowUpOnlinePlayer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop3) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Fire Loop:~b~ON");
		molotovloop3 = true;
	} else if (molotovloop3) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Fire Loop:~r~OFF");
		molotovloop3 = false;
	}
	return 0;
}

int BlowUpOnlinePlayer3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop4) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gas Loop:~b~ON");
		molotovloop4 = true;
	} else if (molotovloop4) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gas Loop:~r~OFF");
		molotovloop4 = false;
	}
	return 0;
}

int BlowUpOnlinePlayer4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop5) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Extinguish Loop:~b~ON");
		molotovloop5 = true;
	} else if (molotovloop5) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Extinguish Loop:~r~OFF");
		molotovloop5 = false;
	}
	return 0;
}

int BlowUpOnlinePlayer5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop6) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Smoke Loop:~b~ON");
		molotovloop6 = true;
	} else if (molotovloop6) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Smoke Loop:~r~OFF");
		molotovloop6 = false;
	}
	return 0;
}

int BlowUpOnlinePlayer6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop7) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ FireWork Loop:~b~ON");
		molotovloop7 = true;
	} else if (molotovloop7) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ FireWork Loop:~r~OFF");
		molotovloop7 = false;
	}
	return 0;
}

int BlowUpOnlinePlayer7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop8) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Grenade Loop:~b~ON");
		molotovloop8 = true;
	} else if (molotovloop8) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Grenade Loop:~r~OFF");
		molotovloop8 = false;
	}
	return 0;
}

int BlowUpOnlinePlayer8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!molotovloop9) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Water Loop:~b~ON");
		molotovloop9 = true;
	} else if (molotovloop9) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Water Loop:~r~OFF");
		molotovloop9 = false;
	}
	return 0;
}


int PortableLazer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	float launchPos[3];
	float targetPos[3];
	float dim_min[3], dim_max[3];


	GetEntityCoords(Handle, targetPos);

	get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0], dim_min[1] + 4.0f, 0.0f, launchPos);

	targetPos[2]--;

	shoot_single_bullet_between_coords(launchPos, targetPos, 200, 0, get_hash_key("VEHICLE_WEAPON_PLAYER_LAZER"), rocketid, 1, 1, -1082130432);

	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Shot Lazer Bullets At Player! (This is a proximity thing. You have to be by them!)");

	return 0;
}

int crashtester(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = ClonePlayerIndex;
	int Player = GetPlayerHandle(subMenuIndex);
	GetEntityCoords(Player, ClonedPlayerPos1);
	int clone1 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone1, false);
	int clone2 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone2, false);
	int clone3 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone3, false);
	int clone4 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone4, false);
	int clone5 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone5, false);
	int clone6 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone6, false);
	int clone7 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone7, false);
	int clone8 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone8, false);
	int clone9 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone9, false);
	int clone10 = PED::CLONE_PED(Player, ClonedPlayerPos1[0], ClonedPlayerPos1[1], ClonedPlayerPos1[2]);
	set_entity_visible(clone10, false);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Crash Test (Press 5 Times and Wait)");
	return 0;
}

int PortableTank(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	float launchPos[3];
	float targetPos[3];
	float dim_min[3], dim_max[3];



	GetEntityCoords(Handle, targetPos);

	get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0], dim_min[1] + 4.0f, 0.0f, launchPos);

	targetPos[2]--;

	shoot_single_bullet_between_coords(launchPos, targetPos, 200, 0, get_hash_key("VEHICLE_WEAPON_TANK"), rocketid, 1, 1, -1082130432);

	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Tank Bullet At Player! ");

	return 0;
}

int GuardAttack1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	task_combat_ped(chop, Handle, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Set Guard on Player");
	return 0;
}

int GuardAttack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	network_request_control_of_entity(objecthandle);
	if (network_has_control_of_entity(objecthandle)) {
		task_combat_ped(objecthandle, Handle, 0, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Set Guard on Player (Aim At Guard With Creator Mode)");
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}


int Mass(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	NETWORKCASH::NETWORK_BUY_BOUNTY(999999999, Handle, false, true);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Massive Bounty On Player!");
	return 0;
}

int Airstrikepl(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	float Position[3];
	GetEntityCoords(Handle, Position);
	_CALL_AIRSTRIKE(Position[0], Position[1], Position[2]);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ AirStriked Player!");
	return 0;
}

int Airstrike23(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	int weaponHash = GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_SPACE_ROCKET");

	Vector3 getcoords1 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0, 0, 26.6);

	Vector3 getcoords2 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Handle, 0, 0, 1.5);

	float coords1[] = { getcoords1.x, getcoords1.y, getcoords1.z };
	float coords2[] = { getcoords2.x, getcoords2.y, getcoords2.z };

	SHOOT_SINGLE_BULLET_BETWEEN_COORDS1(coords1, coords2, 25, 0, weaponHash, Handle, 1, 1, 100);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ AirStriked Player!");
	return 0;
}

int BlowUpOnlinePlayerInvisible(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	float Position[3];
	GetEntityCoords(Handle, Position);
	AddExplosion(Position[0], Position[1], Position[2], BLIMP, FLT_MAX, false, true, 0.0f);
	AddExplosion(Position[0], Position[1], Position[2], TRAIN, FLT_MAX, false, true, 0.0f);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Invisible Nuke!");

	return 0;
}



int ClearGuardTask(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	network_request_control_of_entity(chop);
	if (network_has_control_of_entity(chop)) {
		clear_ped_tasks_immediately(chop);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard's task should be cleared!");
	}
	return 0;
}


int TakeAwayGuardInvincibility(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	network_request_control_of_entity(objecthandle);
	if (network_has_control_of_entity(objecthandle)) {
		set_entity_invincible(objecthandle, false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard Invincibility Disabled!(Creator Mode)");
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}


int MakeBodyGuardRun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float Position[3], dim_min[3], dim_max[3];
	network_request_control_of_entity(chop);
	if (network_has_control_of_entity(chop)) {
		get_model_dimensions(get_entity_model(PlayerPedId()), dim_min, dim_max);
		get_offset_from_entity_in_world_coords(chop, dim_min[0], dim_min[1] + 5.0f, 0.0f, Position);
		TASK_GO_STRAIGHT_TO_COORD(chop, dim_min[0], dim_min[1], dim_min[2], 3.0, 20000, 40000, 0.5f);
	}
	return 0;
}

int GiveGuardInvincibility(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	network_request_control_of_entity(chop);
	if (network_has_control_of_entity(chop)) {
		set_entity_invincible(chop, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ All Guards Invincibility Enabled!");
	}
	return 0;
}


int GiveGUzi(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	network_request_control_of_entity(chop);
	if (network_has_control_of_entity(chop)) {
		GiveWeaponDelayed(chop, 0x13532244, 9999, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ All Guards Given Uzi!");
	}
	return 0;
}


int FixMyCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			FixCar(myvehicle);
			set_vehicle_dirt_level(myvehicle, 0.0f);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Fixed Vehicle!");
		}
	} else {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ You aren't in a vehicle!");
	}
	return 0;
}


int VehLivery1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Veh = GetCarCharIsIn(PlayerPedId(), PlayerId());
	SET_VEHICLE_LIVERY(Veh, 1);
	return 0;
}

int VehLivery2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Veh = GetCarCharIsIn(PlayerPedId(), PlayerId());
	SET_VEHICLE_LIVERY(Veh, 2);
	return 0;
}

int VehLivery3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Veh = GetCarCharIsIn(PlayerPedId(), PlayerId());
	SET_VEHICLE_LIVERY(Veh, 3);
	return 0;
}

int VehLivery4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Veh = GetCarCharIsIn(PlayerPedId(), PlayerId());
	SET_VEHICLE_LIVERY(Veh, 4);
	return 0;
}

int VehLivery5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Veh = GetCarCharIsIn(PlayerPedId(), PlayerId());
	SET_VEHICLE_LIVERY(Veh, 5);
	return 0;
}

int VehLivery6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Veh = GetCarCharIsIn(PlayerPedId(), PlayerId());
	SET_VEHICLE_LIVERY(Veh, 6);
	return 0;
}

int VehLivery7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Veh = GetCarCharIsIn(PlayerPedId(), PlayerId());
	SET_VEHICLE_LIVERY(Veh, 7);
	return 0;
}

int VehLivery8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Veh = GetCarCharIsIn(PlayerPedId(), PlayerId());
	SET_VEHICLE_LIVERY(Veh, 8);
	return 0;
}

int ShowVehLivery(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int Veh = GetCarCharIsIn(myhandle, 0);
	int LivCount = GET_VEHICLE_LIVERY_COUNT(Veh);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Number of Available Skins: ", LivCount);
	return 0;
}


bool showMyAlpha = false;
int showEntityAlpha(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!showMyAlpha) {
		showMyAlpha = true;
	} else if (showMyAlpha) {
		showMyAlpha = false;
	}
	return 0;
}

float z = 0;
float unk = 4.0;
float unk1 = 2.5;
int RedNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 255, neong = 0, neonb = 0;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}

int GreenNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 0, neong = 255, neonb = 0;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int BlueNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 0, neong = 0, neonb = 255;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int PinkNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 255, neong = 51, neonb = 255;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int PurpleNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 153, neong = 0, neonb = 153;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int OrangeNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 255, neong = 128, neonb = 0;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int CyanNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 0, neong = 204, neonb = 204;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}

int WhiteNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 255, neong = 255, neonb = 255;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}

int RemoveNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 0, neong = 0, neonb = 0;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}

bool neons = false;
int ToggleNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!neons) {
		neons = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Neons: ON");
	}
	else if (neons) {
		neons = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Neons: OFF");
	}
	return 0;
}

void neonloop() {
	float Pos[3];
	GetEntityCoords(GetCarCharIsIn(PlayerPedId(), 0), Pos);
	draw_light_with_range(Pos[0], Pos[1], Pos[2] - z, neonr, neong, neonb, unk, unk1);
}

bool lowered = false;
int lower = 0;
int LowerVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		if (lower == 0) {
			lowered = true;
			lower = 1;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Lower Car:~b~ON");
		} else if (lower == 1) {
			lowered = false;
			lower = 0;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Lower Car:~r~OFF");
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle.");
	}
	return 0;
}

bool wanted = false;
int wantedvar = 0;
int WantedPlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (wantedvar == 0) {
		wanted = true;
		wantedvar = 1;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Never Wanted:~b~ON!");
	} else if (wantedvar == 1) {
		wanted = false;
		wantedvar = 0;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Never Wanted:~r~OFF!");
	}
	return 0;
}

int WantedPlayer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_player_wanted_level(PlayerId(), 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ 5 Star Wanted Level!(Just start killing stuff)");
	return 0;
}

void wantedloop() {
	set_player_wanted_level(PlayerId(), 0);
}


bool creatorField = false;
int creatorFieldvar = 0;
int creatorFieldToggle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (creatorFieldvar == 0) {
		creatorField = true;
		creatorFieldvar = 1;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Force Field:~b~ON");
		SetPlayerInvincible(PlayerId(), true);
	} else if (creatorFieldvar == 1) {
		creatorField = false;
		creatorFieldvar = 0;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Object Force Field:~r~OFF");
		SetPlayerInvincible(PlayerId(), false);
	}
	return 0;
}

void creatorFieldloop() {
	float Position[3];
	GetEntityCoords(objecthandle, Position);
	AddExplosion(Position[0], Position[1], Position[2], BLIMP, FLT_MAX, false, true, 0.0f);
	AddExplosion(Position[0], Position[1], Position[2], TRAIN, FLT_MAX, false, true, 0.0f);
}

bool field = false;
int fieldvar = 0;
int FieldToggle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (fieldvar == 0) {
		field = true;
		fieldvar = 1;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Force Field:~b~ON");
		SetPlayerInvincible(PlayerId(), true);
	} else if (fieldvar == 1) {
		field = false;
		fieldvar = 0;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Force Field:~r~OFF");
		SetPlayerInvincible(PlayerId(), false);
	}
	return 0;
}

void fieldloop() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	AddExplosion(Position[0], Position[1], Position[2], BLIMP, FLT_MAX, false, true, 0.0f);
	AddExplosion(Position[0], Position[1], Position[2], TRAIN, FLT_MAX, false, true, 0.0f);
}

void lowerloop() {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			if (lower == 1) {
				apply_force_to_entity(myvehicle, true, 0, 0, -0.07, 0, 0, 0, true, true, true, true, false, true);
			}
		}
	}
}

bool screenfx04 = false;
int screenfx3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!screenfx04) {
		unk_0x1D980479("ChopVision", 0, false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Chop Vision:~b~ON!");
		screenfx04 = true;
	} else if (screenfx04) {
		unk_0x06BB5CDA("ChopVision");
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Chop Vision:~r~OFF!");
		screenfx04 = false;
	}
	return 0;
}

bool screenfx02 = false;
int screenfx1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!screenfx02) {
		unk_0x1D980479("Dont_tazeme_bro", 0, false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Taze Vision:~b~ON!");
		screenfx02 = true;
	} else if (screenfx02) {
		unk_0x06BB5CDA("Dont_tazeme_bro");
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Taze Vision:~r~OFF!");
		screenfx02 = false;
	}
	return 0;
}

bool screenfx05 = false;
int screenfx4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!screenfx05) {
		unk_0x1D980479("MinigameTransitionIn", 0, false);
		unk_0x1D980479("MinigameEndMichael", 0, false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~End Vision:~b~ON!");
		screenfx05 = true;
	} else if (screenfx05) {
		unk_0x06BB5CDA("MinigameEndMichael");
		unk_0x06BB5CDA("MinigameTransitionIn");
		unk_0x06BB5CDA("MinigameTransitionOut");
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~End Vision:~r~OFF!");
		screenfx05 = false;
	}
	return 0;
}


bool screenfx01 = false;
int screenfx0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!screenfx01) {
		unk_0x1D980479("DrugsMichaelAliensFightIn", 0, false);
		unk_0x1D980479("DrugsMichaelAliensFight", 0, false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Alien Vision:~b~ON!");
		screenfx01 = true;
	} else if (screenfx01) {
		unk_0x06BB5CDA("DrugsMichaelAliensFightIn");
		unk_0x06BB5CDA("DrugsMichaelAliensFight");
		unk_0x06BB5CDA("DrugsMichaelAliensFightOut");
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Alien Vision:~r~OFF!");
		screenfx01 = false;
	}
	return 0;
}

bool screenfx03 = false;
int screenfx2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!screenfx03) {
		unk_0x1D980479("DrugsTrevorClownsFightIn", 0, false);
		unk_0x1D980479("DrugsTrevorClownsFight", 0, false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Clown Vision:~b~ON!");
		screenfx03 = true;
	} else if (screenfx03) {
		unk_0x06BB5CDA("DrugsTrevorClownsFightIn");
		unk_0x06BB5CDA("DrugsTrevorClownsFight");
		unk_0x06BB5CDA("DrugsTrevorClownsFightOut");
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Clown Vision:~r~OFF!");
		screenfx03 = false;
	}
	return 0;
}


bool ragdoll = false;
int Ragdollswagger(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!ragdoll) {
		SET_PED_CAN_RAGDOLL(PlayerPedId(), false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~RagDoll:~b~ON!");
		ragdoll = true;
	} else if (ragdoll) {
		SET_PED_CAN_RAGDOLL(PlayerPedId(), true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~RagDoll:~r~OFF!");
		ragdoll = false;
	}
	return 0;
}

int SetCarInvisible(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			//FixCar(myvehicle);
			if (!carvisible) {
				set_entity_visible(myvehicle, false);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Car is invisible");
				carvisible = true;
			} else if (carvisible) {
				set_entity_visible(myvehicle, true);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Car is visible");
				carvisible = false;
			}
		}
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle.");
	}
	return 0;
}

int givetracker1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int player = GetPlayerHandle(subMenuIndex);
	int vehicle = GetCarCharIsIn(player, 0);
	VEHICLE::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(vehicle, true);
	DECORATOR::DECOR_REGISTER("Player_Vehicle", 3);
	DECORATOR::DECOR_REGISTER("Veh_Modded_By_Player", 3);
	DECORATOR::DECOR_SET_INT(vehicle, "Player_Vehicle", NETWORK::_0xF8D7AF3B(player));
	DECORATOR::DECOR_SET_INT(vehicle, "Veh_Modded_By_Player", GAMEPLAY::GET_HASH_KEY(PLAYER::GET_PLAYER_NAME(player)));
	DECORATOR::DECOR_GET_BOOL(vehicle, "Player_Vehicle");
	DECORATOR::DECOR_GET_BOOL(vehicle, "Veh_Modded_By_Player");
	return 0;
}

int givetracker(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int player = GetPlayerHandle(subMenuIndex);
	int vehicle = GetCarCharIsIn(player, 0);
	VEHICLE::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(vehicle, true);
	return 0;
}

int Give100MillionOnlinePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int player = GetPlayerHandle(subMenuIndex);
	network_earn_from_rockstar(100000000);
	return 0;
}



int KickOnlinePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	network_session_kick_player(subMenuIndex);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Kicked online player");

	return 0;
}


int ParticleFx1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	if (!pwvcheck) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Clown Smoke:~b~ON");
		pexp = "scr_clown_appears";
		pwvcheck = true;
	} else if (pwvcheck) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Clown Smoke:~r~OFF");
		pwvcheck = false;
	}
	return 0;
}

int ParticleFx2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_alien_teleport";
	pwvcheck1 = true;
	return 0;
}
int ParticleFx3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_alien_disintegrate";
	pwvcheck1 = true;
	return 0;
}
int ParticleFx4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_fbi5_ped_water_splash";
	pwvcheck2 = true;
	return 0;
}
int ParticleFx5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_sh_lighter_sparks";
	pwvcheck3 = true;
	return 0;
}
int ParticleFx6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_sh_lighter_flame";
	pwvcheck3 = true;
	return 0;
}
int ParticleFx7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_carsteal4_wheel_burnout";
	pwvcheck4 = true;
	return 0;
}
int ParticleFx8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_carsteal5_car_muzzle_flash";
	pwvcheck4 = true;
	return 0;
}
int ParticleFx9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_carsteal5_tyre_spiked";
	pwvcheck4 = true;
	return 0;
}
int ParticleFx10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "taxi_clowncar";
	pwvcheck5 = true;
	return 0;
}
int ParticleFx11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_trev4_747_blood_impact";
	pwvcheck6 = true;
	return 0;
}
int ParticleFx12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_ojtt_train_sparks";
	pwvcheck7 = true;
	return 0;
}
int ParticleFx13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_paleto_banknotes";
	pwvcheck8 = true;
	return 0;
}

int ParticleFx14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	if (!pwvcheck9) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Fart Smoke:~b~ON");
		pexp = "scr_meth_pipe_smoke";
		pwvcheck9 = true;
	} else if (pwvcheck) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Fart Smoke:~r~OFF");
		pwvcheck9 = false;
	}
	return 0;
}

int ParticleFx15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
	pexp = "scr_clown_appears";
	pwvcheck10 = true;
	return 0;
}


bool fwloaded = false;
bool fwvcheck = false;
char *fexp = "";
float fcoords[3];
int FireWorkExp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), fcoords);
	fexp = "scr_indep_firework_fountain";
	fwvcheck = true;
	return 0;
}
int FireWorkExp1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), fcoords);
	fexp = "scr_indep_firework_shotburst";
	fwvcheck = true;
	return 0;
}
int FireWorkExp2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), fcoords);
	fexp = "scr_indep_firework_starburst";
	fwvcheck = true;
	return 0;
}
int FireWorkExp3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(subMenuIndex), fcoords);
	fexp = "scr_indep_firework_trailburst";
	fwvcheck = true;
	return 0;
}
char *fexp1 = "";
int FireWorkExp_0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fexp1 = "scr_indep_firework_fountain";
	return 0;
}
int FireWorkExp_1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fexp1 = "scr_indep_firework_shotburst";
	return 0;
}
int FireWorkExp_2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fexp1 = "scr_indep_firework_starburst";
	return 0;
}
int FireWorkExp_3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fexp1 = "scr_indep_firework_trailburst";
	return 0;
}
float fr, fg, fb;
float fwsize;
int FWOpt(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fwsize = 1.0;
	return 0;
}
int FWOpt1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fwsize = 3.0;
	return 0;
}
int FWOpt2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fwsize = 5.0;
	return 0;
}
int FWOpt3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fr = 1.0, fg = 0, fb = 0;
	return 0;
}
int FWOpt4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fr = 0, fg = 1.0, fb = 0;
	return 0;
}
int FWOpt5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fr = 0, fg = 0, fb = 1.0;
	return 0;
}
int FWOpt6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fr = 1, fg = 0, fb = 0.603921568627451;
	return 0;
}
int FWOpt7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fr = 0.7254901960784314, fg = 0, fb = 0.5058823529411765;
	return 0;
}
int FWOpt8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fr = 1.0, fg = 0.5176470588235294, fb = 0.0352941176470588;
	return 0;
}
int FWOpt9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	fr = 0, fg = 1.0, fb = 0.9686274509803922;
	return 0;
}
bool col_loop = false;
int FWOpt10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!col_loop) {
		col_loop = true;
	} else if (col_loop) {
		col_loop = false;
	}
	return 0;
}
int fwcol = 2;
void fw_col_loop() {
	if (fwcol > 1) {
		fr = 1.0, fg = 0, fb = 0;
		fwcol++;
	}
	if (fwcol > 40) {
		fr = 0, fg = 1.0, fb = 0;
		fwcol++;
	}
	if (fwcol > 80) {
		fr = 0, fg = 0, fb = 1.0;
		fwcol++;
	}
	if (fwcol > 120) {
		fr = 1, fg = 0, fb = 0.603921568627451;
		fwcol++;
	}
	if (fwcol > 160) {
		fr = 0.7254901960784314, fg = 0, fb = 0.5058823529411765;
		fwcol++;
	}
	if (fwcol > 200) {
		fr = 1.0, fg = 0.5176470588235294, fb = 0.0352941176470588;
		fwcol++;
	}
	if (fwcol > 240) {
		fr = 0, fg = 1.0, fb = 0.9686274509803922;
		fwcol++;
	}
	if (fwcol > 280) {
		fwcol = 2;
	}
}




int NoWeps(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	REMOVE_WEAPON_FROM_PED(Handle, 0x99B507EA); // knife
	REMOVE_WEAPON_FROM_PED(Handle, 0x678B81B1); // night stick
	REMOVE_WEAPON_FROM_PED(Handle, 0x4E875F73); // hammer
	REMOVE_WEAPON_FROM_PED(Handle, 0x958A4A8F); // bat
	REMOVE_WEAPON_FROM_PED(Handle, 0x440E4788); // golf club
	REMOVE_WEAPON_FROM_PED(Handle, 0x84BD7BFD); // crowbar
	REMOVE_WEAPON_FROM_PED(Handle, 0x1B06D571); // pistol
	REMOVE_WEAPON_FROM_PED(Handle, 0xF9E6AA4B); // bottle
	REMOVE_WEAPON_FROM_PED(Handle, 0x92A27487); // dagger
	REMOVE_WEAPON_FROM_PED(Handle, 0xB32BE614); // knuckle dusters
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Removed All Melee Weapons!");
	return 0;
}

int NoWeps2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	REMOVE_WEAPON_FROM_PED(Handle, 0x99B507EA); // knife
	REMOVE_WEAPON_FROM_PED(Handle, 0xC734385A); // marksman rifle
	REMOVE_WEAPON_FROM_PED(Handle, 0x7F229F94); // bullpup rifle
	REMOVE_WEAPON_FROM_PED(Handle, 0xBFEFFF6D); // assault rifle
	REMOVE_WEAPON_FROM_PED(Handle, 0x83BF0278); // carbine rifle
	REMOVE_WEAPON_FROM_PED(Handle, 0xAF113F99); // advanced rifle
	REMOVE_WEAPON_FROM_PED(Handle, 0xC0A3098D); // special carbine rifle
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Removed All ARs!");
	return 0;
}
int NoWeps3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	REMOVE_WEAPON_FROM_PED(Handle, 0x687652CE); // stinger
	REMOVE_WEAPON_FROM_PED(Handle, 0xA284510B); // grenade launcher
	REMOVE_WEAPON_FROM_PED(Handle, 0xB1CA77B1); // rpg
	REMOVE_WEAPON_FROM_PED(Handle, 0x42BF8A85); // minigun
	REMOVE_WEAPON_FROM_PED(Handle, 0x63AB0442); // homing launcher
	REMOVE_WEAPON_FROM_PED(Handle, 0x7F7497E5); // firework launcher
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Removed All Heavy Weapons!");
	return 0;
}

bool custom = false;
int PlayerAcuse(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Ped = GetPlayerHandle(subMenuIndex);
	if (!custom) {
		rocketid = Ped;
		custom = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ You will now suffer no consequences for your destruction!");
	} else if (custom) {
		custom = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Tracker has been turned back on the game will now know you are the one behind the destruction!");
	}

	return 0;
}



bool invisweapon = false;
int VisWeapon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!invisweapon) {
		invisweapon = true;
		SET_PED_CURRENT_WEAPON_VISIBLE(PlayerPedId(), 0, 0, 0, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Invisible Weapon Active");

	} else if (invisweapon) {
		invisweapon = false;
		SET_PED_CURRENT_WEAPON_VISIBLE(PlayerPedId(), 1, 1, 1, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Invisible Weapon Disabled");
	}
	return 0;
}


int GivePlayerStun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	GiveWeaponDelayed(Handle, 0x3656C8C1, 300, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gave them a stun gun!");

	return 0;
}

int GiveFreezeGun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	GiveWeaponDelayed(Handle, 0x420DA69, 300, 1);
	modelHash = 0x420DA69;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gave them a Freeze gun!");

	return 0;
}

int GiveBootGun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	network_session_kick_player(subMenuIndex);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gave Them The Boot Gun!");

	return 0;
}

int InvisiblePlayer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_entity_visible(objecthandle, false);
	}
	return 0;
}

int InvisiblePlayer3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		set_entity_visible(objecthandle, true);
	}
	return 0;
}



int InvisiblePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!invisiblePlayer) {
		set_entity_visible(PlayerPedId(), false);
		invisiblePlayer = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Invisible Player Loop:~b~ON");
	} else if (invisiblePlayer) {
		set_entity_visible(PlayerPedId(), true);
		invisiblePlayer = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Invisible Player Loop:~r~OFF");
	}
	return 0;
}

bool superbreakswaggerswag = false;

int superbreakswag(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!superbreakswaggerswag) {
		superbreakswaggerswag = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Break On Press RB To Use:~b~ON!");
	} else if (superbreakswaggerswag) {
		superbreakswaggerswag = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Break:~r~OFF!");
	}
	return 0;
}

int InvisibleVehicleLP(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
	}

	if (!invisibleVeh) {
		set_entity_visible(myvehicle, false);
		invisibleVeh = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Invisible Vehicle Loop:~b~ON");
	} else if (invisibleVeh) {
		set_entity_visible(myvehicle, true);
		invisibleVeh = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Invisible Vehicle Loop:~r~OFF");
	}
	return 0;
}


int TeleportInToCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	CarPed = selectedMenuIndexes->operator[](1);
	int player = selectedMenuIndexes->operator[](1);
	animid = selectedMenuIndexes->operator[](1);
	int ped = GetPlayerHandle(player);
	float Pos[3];
	GetEntityCoords(ped, Pos);
	set_entity_coords(PlayerPedId(), Pos[0], Pos[1], Pos[2]);
	warp = true;
	return 0;
}

int GiveHealth(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int player = selectedMenuIndexes->operator[](1);
	int ped = GetPlayerHandle(player);
	float Pos[3];
	float HealthNeeded = GET_ENTITY_MAX_HEALTH(ped) - GET_ENTITY_HEALTH(ped); //Note: This should get the health they need.
	GetEntityCoords(ped, Pos);
	create_ambient_pickup(get_hash_key("PICKUP_HEALTH_STANDARD"), Pos, 0, HealthNeeded, 1, 0, 1);
	set_stat_int(get_hash_key("MP0_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP3_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);

	return 0;
}

int GiveArmour(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int player = selectedMenuIndexes->operator[](1);
	int ped = GetPlayerHandle(player);
	float Pos[3];
	GetEntityCoords(ped, Pos);
	OBJECT::CREATE_PORTABLE_PICKUP(get_hash_key("PICKUP_ARMOUR_STANDARD"), Pos[0], Pos[1], Pos[2], 0, 1);
	set_stat_int(get_hash_key("MP0_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP3_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);

	return 0;
}

int GiveOnlineAmmo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int player = selectedMenuIndexes->operator[](1);
	int ped = GetPlayerHandle(player);
	float Pos[3];
	GetEntityCoords(ped, Pos);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_BULLET_MP"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_MISSILE_MP"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_GRENADELAUNCHER_MP"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_PISTOL"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_SMG"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_RIFLE"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_MG"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_SHOTGUN"), Pos, 0, 19999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_SNIPER"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_GRENADELAUNCHER"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_RPG"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_MINIGUN"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_FIREWORK_MP"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_HOMINGLAUNCHER"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_AMMO_FLAREGUN"), Pos, 0, 9999, 1, 0, 1);
	set_stat_int(get_hash_key("MP0_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP3_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);

	return 0;
}


int GiveAllWeapons(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	GiveWeaponDelayed(PlayerPedId(), 0x3656C8C1, 9999, 1); // stun gun
	GiveWeaponDelayed(PlayerPedId(), 0x99B507EA, 9999, 1); // knife
	GiveWeaponDelayed(PlayerPedId(), 0x678B81B1, 9999, 1); // night stick
	GiveWeaponDelayed(PlayerPedId(), 0x4E875F73, 9999, 1); // hammer
	GiveWeaponDelayed(PlayerPedId(), 0x958A4A8F, 9999, 1); // bat
	GiveWeaponDelayed(PlayerPedId(), 0x440E4788, 9999, 1); // golf club
	GiveWeaponDelayed(PlayerPedId(), 0x84BD7BFD, 9999, 1); // crowbar
	GiveWeaponDelayed(PlayerPedId(), 0x1B06D571, 9999, 5); // pistol
	GiveWeaponDelayed(PlayerPedId(), 0x5EF9FEC4, 9999, 1); // combat pistol
	GiveWeaponDelayed(PlayerPedId(), 0x22D8FE39, 9999, 1); // ap pistol
	GiveWeaponDelayed(PlayerPedId(), 0x99AEEB3B, 9999, 1); // pistol 50.
	GiveWeaponDelayed(PlayerPedId(), 0x13532244, 9999, 1); // micro smg
	GiveWeaponDelayed(PlayerPedId(), 0x2BE6766B, 9999, 1); // smg
	GiveWeaponDelayed(PlayerPedId(), 0xEFE7E2DF, 9999, 1); // assault smg
	GiveWeaponDelayed(PlayerPedId(), 0xBFEFFF6D, 9999, 1); // assault rifle
	GiveWeaponDelayed(PlayerPedId(), 0x83BF0278, 9999, 1); // carbine rifle
	GiveWeaponDelayed(PlayerPedId(), 0xAF113F99, 9999, 1); // advanced rifle
	GiveWeaponDelayed(PlayerPedId(), 0x9D07F764, 9999, 1); // MG
	GiveWeaponDelayed(PlayerPedId(), 0x7FD62962, 9999, 1); // combat mg
	GiveWeaponDelayed(PlayerPedId(), 0x1D073A89, 9999, 1); // pump shotgun
	GiveWeaponDelayed(PlayerPedId(), 0x7846A318, 9999, 1); // sawnoff shotgun
	GiveWeaponDelayed(PlayerPedId(), 0xE284C527, 9999, 1); // assault shotgun
	GiveWeaponDelayed(PlayerPedId(), 0x9D61E50F, 9999, 1); // bullpupshotgun
	GiveWeaponDelayed(PlayerPedId(), 0x05FC3C11, 9999, 1); // sniper
	GiveWeaponDelayed(PlayerPedId(), 0x0C472FE2, 9999, 1); // heavy sniper
	GiveWeaponDelayed(PlayerPedId(), 0xA284510B, 9999, 1); // grenade launcher
	GiveWeaponDelayed(PlayerPedId(), 0xB1CA77B1, 9999, 1); // rpg
	GiveWeaponDelayed(PlayerPedId(), 0x42BF8A85, 9999, 1); // minigun
	GiveWeaponDelayed(PlayerPedId(), 0x93E220BD, 9999, 1); // grenades
	GiveWeaponDelayed(PlayerPedId(), 0x2C3731D9, 9999, 1); // sticky bomb
	GiveWeaponDelayed(PlayerPedId(), 0xFDBC8A50, 9999, 1); // smoke grenade
	GiveWeaponDelayed(PlayerPedId(), 0x34A67B97, 9999, 1); // petrol can
	GiveWeaponDelayed(PlayerPedId(), 0x060EC506, 9999, 1); // fire extinguisher
	GiveWeaponDelayed(PlayerPedId(), 0x24B17070, 9999, 1); // moltovs
	GiveWeaponDelayed(PlayerPedId(), 0x497FACC3, 9999, 1); // flare
	GiveWeaponDelayed(PlayerPedId(), 0xFDBADCED, 9999, 1); // digiscanner
	GiveWeaponDelayed(PlayerPedId(), 0x687652CE, 9999, 1); // stinger
	GiveWeaponDelayed(PlayerPedId(), 600439132, 9999, 1); // ball
	//DLC Weapons
	GiveWeaponDelayed(PlayerPedId(), 0xF9E6AA4B, 9999, 1); // bottle
	GiveWeaponDelayed(PlayerPedId(), 0x61012683, 9999, 1); // gusenerg
	GiveWeaponDelayed(PlayerPedId(), 0xC0A3098D, 9999, 1); // special carbine
	GiveWeaponDelayed(PlayerPedId(), 0xD205520E, 9999, 1); // heavy pistol
	GiveWeaponDelayed(PlayerPedId(), 0xBFD21232, 9999, 1); // sns pistol
	GiveWeaponDelayed(PlayerPedId(), 0x7F229F94, 9999, 1); // bullpup rifle
	GiveWeaponDelayed(PlayerPedId(), 0x92A27487, 9999, 1); // dagger
	GiveWeaponDelayed(PlayerPedId(), 0x083839C4, 9999, 1); // vintage pistol
	GiveWeaponDelayed(PlayerPedId(), 0x7F7497E5, 9999, 1); // firework launcher
	GiveWeaponDelayed(PlayerPedId(), 0xA89CB99E, 9999, 1); // musket
	GiveWeaponDelayed(PlayerPedId(), 0x63AB0442, 9999, 1); // homing launcher
	GiveWeaponDelayed(PlayerPedId(), 0xAB564B93, 9999, 1); // proxmine
	GiveWeaponDelayed(PlayerPedId(), 0x787F0BB, 9999, 1); // snowball
	GiveWeaponDelayed(PlayerPedId(), 0xC734385A, 9999, 1); // marksman rifle
	GiveWeaponDelayed(PlayerPedId(), 0x47757124, 9999, 1); // flare gun
	GiveWeaponDelayed(PlayerPedId(), 0x0A3D4D34, 9999, 1); // Combat PDW
	GiveWeaponDelayed(PlayerPedId(), 0xF9D04ADB, 9999, 1); // marksman pistol
	GiveWeaponDelayed(PlayerPedId(), 0xB32BE614, 9999, 1); // knuckle dusters
	GiveWeaponDelayed(PlayerPedId(), 0x0A3D4D34, 9999, 1); // combat pdw
	GiveWeaponDelayed(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 9999, 1); // HEAVYSHOTGUN

	//Attachments FlashLight
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xAF113F99, 0x359B7AAE); //Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0A3D4D34, 0x7BC4CDDC); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x13532244, 0x359B7AAE); //Micro SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x22D8FE39, 0x359B7AAE); //AP Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xD205520E, 0x359B7AAE); //Heavy Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0x7BC4CDDC); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0x7BC4CDDC); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x1B06D571, 0x359B7AAE); //Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x5EF9FEC4, 0x359B7AAE); //Combat Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x99AEEB3B, 0x359B7AAE); //.50 Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x2BE6766B, 0x7BC4CDDC); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xEFE7E2DF, 0x7BC4CDDC); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0x7BC4CDDC); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0x7BC4CDDC); //Carbine Rifle



	//Attachments Clips
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xAF113F99, 0x8EC1C979); //Extened Clip Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x05FC3C11, 0xBC54DA77); //Advanced scope Sniper Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x22D8FE39, 0x249A17D5); //Extended Clip AP Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0C472FE2, 0xBC54DA77); //Advanced scope Heavy Sniper
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xD205520E, 0x64F9C62B); //Heavy Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFD21232, 0x7B0033B3); //SNS Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0x7C8BD10E); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xE284C527, 0x86BD7F72); //Assault Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0xB3688B0F); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7FD62962, 0xD6C59CD6); //Combat MG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x1B06D571, 0xED265A1C); //Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x5EF9FEC4, 0xD67B4F2D); //Combat Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x99AEEB3B, 0xD9D3AC92); //.50 Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x083839C4, 0x33BA12E8); //Vintage Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x13532244, 0x10E6BA2B); //Micro SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x2BE6766B, 0x350966FB); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xEFE7E2DF, 0xBB46E417); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0A3D4D34, 0x334A5203); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x9D07F764, 0x82158B47); //MG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x61012683, 0xEAC8C270); //Gusenberg
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0xB1214F9B); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0x91109691); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC734385A, 0xCCFD2AC5); //Marksman Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0x971CF6FD); //Heavy Shotgun


	//Attachments Scopes
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xAF113F99, 0xAA2C45B4); //Extened Clip Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x05FC3C11, 0xD2443DDC); //Advanced scope Sniper Rifle, 
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0C472FE2, 0xD2443DDC); //Advanced scope Heavy Sniper
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0xA0D89C42); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0xAA2C45B4); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x13532244, 0x9D2FBF29); //Micro SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x2BE6766B, 0x3CC6BA57); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xEFE7E2DF, 0x9D2FBF29); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0A3D4D34, 0xAA2C45B4); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x3C00AFED, 0x82158B47); //MG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0x9D2FBF29); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0xA0D89C42); //Carbine Rifle

	//Attachments Supressors
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xAF113F99, 0x8EC1C979); //Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x05FC3C11, 0xA73D4664); //Sniper Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x22D8FE39, 0xC304849A); //AP Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xD205520E, 0xC304849A); //Heavy Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0xA73D4664); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0x837445AA); //Bullpump Rifle
	//GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x9D61E50F, 0xA73D4664); //Bullpump ShotGun
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x1B06D571, 0x65EA7EBB); //Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x5EF9FEC4, 0xC304849A); //Combat Pistol
	//GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x99AEEB3B, 0xA73D4664); //.50 Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x083839C4, 0xC304849A); //Vintage Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x2BE6766B, 0xC304849A); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xEFE7E2DF, 0xA73D4664); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0xA73D4664); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0x837445AA); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC734385A, 0x837445AA); //Marksman Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x1D073A89, 0xE608B35E); //Pump Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xA73D4664); //Heavy Shotgun

	//Attachments Grip
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0xC164F53); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0xC164F53); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x9D61E50F, 0xC164F53); //Bullpump ShotGun
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0xC164F53); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0xC164F53); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC734385A, 0xC164F53); //Marksman Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0A3D4D34, 0xC164F53); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7FD62962, 0xC164F53); //Combat MG
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xE284C527, 0xC164F53); //Assault Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xC164F53); //Heavy Shotgun

	//Special Finish
	GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0xD89B9658); //Carbine Rifle
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gave all weapons");

	//Paints
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1B06D571, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x5EF9FEC4, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x22D8FE39, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x99AEEB3B, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x13532244, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x2BE6766B, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xEFE7E2DF, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFEFFF6D, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x83BF0278, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xAF113F99, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D07F764, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7FD62962, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1D073A89, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7846A318, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xE284C527, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D61E50F, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x05FC3C11, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0C472FE2, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA284510B, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xB1CA77B1, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x42BF8A85, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x687652CE, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x61012683, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC0A3098D, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xD205520E, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFD21232, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F229F94, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x083839C4, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F7497E5, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA89CB99E, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x63AB0442, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC734385A, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xF9D04ADB, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 2);
	SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 2);

	return 0;
}

int GiveOnlinePickupGuns(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int player = selectedMenuIndexes->operator[](1);
	int ped = GetPlayerHandle(player);
	float Pos[3];
	GetEntityCoords(ped, Pos);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_BULLPUPSHOTGUN"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_ASSAULTSMG"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_PISTOL50"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_ASSAULTRIFLE"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_CARBINERIFLE"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_ADVANCEDRIFLE"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_MG"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_COMBATMG"), Pos, 0, 19999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_HEAVYSNIPER"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_MICROSMG"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_SMG"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_RPG"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_MINIGUN"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_PUMPSHOTGUN"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_SAWNOFFSHOTGUN"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_ASSAULTSHOTGUN"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_GRENADE"), Pos, 0, 25, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_MOLOTOV"), Pos, 0, 25, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_SMOKEGRENADE"), Pos, 0, 25, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_STICKYBOMB"), Pos, 0, 25, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_PISTOL"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_COMBATPISTOL"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_APPISTOL"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_GRENADELAUNCHER"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_STUNGUN"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_FIREEXTINGUISHER"), Pos, 0, 100, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_PETROLCAN"), Pos, 0, 100, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_KNIFE"), Pos, 0, 1, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_NIGHTSTICK"), Pos, 0, 1, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_HAMMER"), Pos, 0, 1, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_BAT"), Pos, 0, 1, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_GolfClub"), Pos, 0, 1, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_CROWBAR"), Pos, 0, 1, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_BOTTLE"), Pos, 0, 1, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_SNSPISTOL"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_GUSENBERG"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_HEAVYSNIPER"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_SPECIALCARBINE"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_DAGGER"), Pos, 0, 1, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_VINTAGEPISTOL"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_FIREWORK"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_MUSKET"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_MARKSMANRIFLE"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_PROXMINE"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_HOMINGLAUNCHER"), Pos, 0, 9999, 1, 0, 1);
	create_ambient_pickup(get_hash_key("PICKUP_WEAPON_FLAREGUN"), Pos, 0, 9999, 1, 0, 1);
	set_stat_int(get_hash_key("MP0_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP3_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);

	return 0;
}


int GiveWeaponsOnline(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	GiveWeaponDelayed(Handle, 0x3656C8C1, 9999, 1); // stun gun
	GiveWeaponDelayed(Handle, 0x99B507EA, 9999, 1); // knife
	GiveWeaponDelayed(Handle, 0x678B81B1, 9999, 1); // night stick
	GiveWeaponDelayed(Handle, 0x4E875F73, 9999, 1); // hammer
	GiveWeaponDelayed(Handle, 0x958A4A8F, 9999, 1); // bat
	GiveWeaponDelayed(Handle, 0x440E4788, 9999, 1); // golf club
	GiveWeaponDelayed(Handle, 0x84BD7BFD, 9999, 1); // crowbar
	GiveWeaponDelayed(Handle, 0x1B06D571, 9999, 5); // pistol
	GiveWeaponDelayed(Handle, 0x5EF9FEC4, 9999, 1); // combat pistol
	GiveWeaponDelayed(Handle, 0x22D8FE39, 9999, 1); // ap pistol
	GiveWeaponDelayed(Handle, 0x99AEEB3B, 9999, 1); // pistol 50.
	GiveWeaponDelayed(Handle, 0x13532244, 9999, 1); // micro smg
	GiveWeaponDelayed(Handle, 0x2BE6766B, 9999, 1); // smg
	GiveWeaponDelayed(Handle, 0xEFE7E2DF, 9999, 1); // assault smg
	GiveWeaponDelayed(Handle, 0xBFEFFF6D, 9999, 1); // assault rifle
	GiveWeaponDelayed(Handle, 0x83BF0278, 9999, 1); // carbine rifle
	GiveWeaponDelayed(Handle, 0xAF113F99, 9999, 1); // advanced rifle
	GiveWeaponDelayed(Handle, 0x9D07F764, 9999, 1); // MG
	GiveWeaponDelayed(Handle, 0x7FD62962, 9999, 1); // combat mg
	GiveWeaponDelayed(Handle, 0x1D073A89, 9999, 1); // pump shotgun
	GiveWeaponDelayed(Handle, 0x7846A318, 9999, 1); // sawnoff shotgun
	GiveWeaponDelayed(Handle, 0xE284C527, 9999, 1); // assault shotgun
	GiveWeaponDelayed(Handle, 0x9D61E50F, 9999, 1); // bullpupshotgun
	GiveWeaponDelayed(Handle, 0x05FC3C11, 9999, 1); // sniper
	GiveWeaponDelayed(Handle, 0x0C472FE2, 9999, 1); // heavy sniper
	GiveWeaponDelayed(Handle, 0xA284510B, 9999, 1); // grenade launcher
	GiveWeaponDelayed(Handle, 0xB1CA77B1, 9999, 1); // rpg
	GiveWeaponDelayed(Handle, 0x42BF8A85, 9999, 1); // minigun
	GiveWeaponDelayed(Handle, 0x93E220BD, 9999, 1); // grenades
	GiveWeaponDelayed(Handle, 0x2C3731D9, 9999, 1); // sticky bomb
	GiveWeaponDelayed(Handle, 0xFDBC8A50, 9999, 1); // smoke grenade
	GiveWeaponDelayed(Handle, 0x34A67B97, 9999, 1); // petrol can
	GiveWeaponDelayed(Handle, 0x060EC506, 9999, 1); // fire extinguisher
	GiveWeaponDelayed(Handle, 0x24B17070, 9999, 1); // moltovs
	GiveWeaponDelayed(Handle, 0x497FACC3, 9999, 1); // flare
	GiveWeaponDelayed(Handle, 0xFDBADCED, 9999, 1); // digiscanner
	GiveWeaponDelayed(Handle, 0x687652CE, 9999, 1); // stinger
	GiveWeaponDelayed(Handle, 600439132, 9999, 1); // ball
	//DLC Weapons
	GiveWeaponDelayed(Handle, 0xF9E6AA4B, 9999, 1); // bottle
	GiveWeaponDelayed(Handle, 0x61012683, 9999, 1); // gusenerg
	GiveWeaponDelayed(Handle, 0xC0A3098D, 9999, 1); // special carbine
	GiveWeaponDelayed(Handle, 0xD205520E, 9999, 1); // heavy pistol
	GiveWeaponDelayed(Handle, 0xBFD21232, 9999, 1); // sns pistol
	GiveWeaponDelayed(Handle, 0x7F229F94, 9999, 1); // bullpup rifle
	GiveWeaponDelayed(Handle, 0x92A27487, 9999, 1); // dagger
	GiveWeaponDelayed(Handle, 0x083839C4, 9999, 1); // vintage pistol
	GiveWeaponDelayed(Handle, 0x7F7497E5, 9999, 1); // firework launcher
	GiveWeaponDelayed(Handle, 0xA89CB99E, 9999, 1); // musket
	GiveWeaponDelayed(Handle, 0x63AB0442, 9999, 1); // homing launcher
	GiveWeaponDelayed(Handle, 0xAB564B93, 9999, 1); // proxmine
	GiveWeaponDelayed(Handle, 0x787F0BB, 9999, 1); // snowball
	GiveWeaponDelayed(Handle, 0xC734385A, 9999, 1); // marksman rifle
	GiveWeaponDelayed(Handle, 0x47757124, 9999, 1); // flare gun
	GiveWeaponDelayed(Handle, 0x0A3D4D34, 9999, 1); // Combat PDW
	GiveWeaponDelayed(Handle, 0xF9D04ADB, 9999, 1); // marksman pistol
	GiveWeaponDelayed(Handle, 0xB32BE614, 9999, 1); // knuckle dusters
	GiveWeaponDelayed(Handle, 0x0A3D4D34, 9999, 1); // combat pdw
	GiveWeaponDelayed(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 9999, 1); // HEAVYSHOTGUN


	//Attachments Clips
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xAF113F99, 0x8EC1C979); //Extened Clip Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x05FC3C11, 0xBC54DA77); //Advanced scope Sniper Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x22D8FE39, 0x249A17D5); //Extended Clip AP Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0C472FE2, 0xBC54DA77); //Advanced scope Heavy Sniper
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xD205520E, 0x64F9C62B); //Heavy Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFD21232, 0x7B0033B3); //SNS Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0x7C8BD10E); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xE284C527, 0x86BD7F72); //Assault Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0xB3688B0F); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7FD62962, 0xD6C59CD6); //Combat MG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x1B06D571, 0xED265A1C); //Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x5EF9FEC4, 0xD67B4F2D); //Combat Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x99AEEB3B, 0xD9D3AC92); //.50 Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x083839C4, 0x33BA12E8); //Vintage Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x13532244, 0x10E6BA2B); //Micro SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x2BE6766B, 0x350966FB); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xEFE7E2DF, 0xBB46E417); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0A3D4D34, 0x334A5203); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x9D07F764, 0x82158B47); //MG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x61012683, 0xEAC8C270); //Gusenberg
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0xB1214F9B); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0x91109691); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC734385A, 0xCCFD2AC5); //Marksman Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0x971CF6FD); //Heavy Shotgun

	//Attachments FlashLight
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xAF113F99, 0x359B7AAE); //Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0A3D4D34, 0x7BC4CDDC); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x13532244, 0x359B7AAE); //Micro SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x22D8FE39, 0x359B7AAE); //AP Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xD205520E, 0x359B7AAE); //Heavy Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0x7BC4CDDC); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0x7BC4CDDC); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x1B06D571, 0x359B7AAE); //Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x5EF9FEC4, 0x359B7AAE); //Combat Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x99AEEB3B, 0x359B7AAE); //.50 Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x2BE6766B, 0x7BC4CDDC); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xEFE7E2DF, 0x7BC4CDDC); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0x7BC4CDDC); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0x7BC4CDDC); //Carbine Rifle

	//Attachments Scopes
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xAF113F99, 0xAA2C45B4); //Extened Clip Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x05FC3C11, 0xD2443DDC); //Advanced scope Sniper Rifle, 
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0C472FE2, 0xD2443DDC); //Advanced scope Heavy Sniper
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0xA0D89C42); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0xAA2C45B4); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x13532244, 0x9D2FBF29); //Micro SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x2BE6766B, 0x3CC6BA57); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xEFE7E2DF, 0x9D2FBF29); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0A3D4D34, 0xAA2C45B4); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x3C00AFED, 0x82158B47); //MG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0x9D2FBF29); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0xA0D89C42); //Carbine Rifle

	//Attachments Supressors
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xAF113F99, 0x8EC1C979); //Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x05FC3C11, 0xA73D4664); //Sniper Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x22D8FE39, 0xC304849A); //AP Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xD205520E, 0xC304849A); //Heavy Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0xA73D4664); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0x837445AA); //Bullpump Rifle
	//GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x9D61E50F, 0xA73D4664); //Bullpump ShotGun
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x1B06D571, 0x65EA7EBB); //Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x5EF9FEC4, 0xC304849A); //Combat Pistol
	//GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x99AEEB3B, 0xA73D4664); //.50 Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x083839C4, 0xC304849A); //Vintage Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x2BE6766B, 0xC304849A); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xEFE7E2DF, 0xA73D4664); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0xA73D4664); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0x837445AA); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC734385A, 0x837445AA); //Marksman Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x1D073A89, 0xE608B35E); //Pump Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xA73D4664); //Heavy Shotgun

	//Attachments Grip
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0xC164F53); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0xC164F53); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x9D61E50F, 0xC164F53); //Bullpump ShotGun
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0xC164F53); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0xC164F53); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC734385A, 0xC164F53); //Marksman Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0A3D4D34, 0xC164F53); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7FD62962, 0xC164F53); //Combat MG
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xE284C527, 0xC164F53); //Assault Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xC164F53); //Heavy Shotgun

	//Special Finish
	GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0xD89B9658); //Carbine Rifle

	//Paints
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x1B06D571, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x5EF9FEC4, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x22D8FE39, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x99AEEB3B, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x13532244, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x2BE6766B, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xEFE7E2DF, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xBFEFFF6D, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x83BF0278, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xAF113F99, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x9D07F764, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x7FD62962, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x1D073A89, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x7846A318, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xE284C527, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x9D61E50F, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x05FC3C11, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x0C472FE2, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xA284510B, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xB1CA77B1, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x42BF8A85, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x687652CE, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x61012683, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xC0A3098D, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xD205520E, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xBFD21232, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x7F229F94, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x083839C4, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x7F7497E5, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xA89CB99E, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x63AB0442, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xC734385A, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x0A3D4D34, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0xF9D04ADB, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, 0x0A3D4D34, 2);
	SET_PED_WEAPON_TINT_INDEX(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 2);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gave Online Player All Weapons!");

	return 0;
}

int TakeOnlineAllWeapons(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int i = 0;
	for (i = 0; i < 18; i++) {
		int Handle = GetPlayerHandle(i);
		RemoveWeapons(Handle);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Removed Everyone's Weapons!");
	return 0;
}

int GiveAllWeapons2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		int Handle = GetPlayerHandle(i);
		GiveWeaponDelayed(Handle, 0x687652CE, 9999, 1); // stinger
		GiveWeaponDelayed(Handle, 0xA284510B, 9999, 1); // grenade launcher
		GiveWeaponDelayed(Handle, 0xB1CA77B1, 9999, 1); // rpg
		GiveWeaponDelayed(Handle, 0x42BF8A85, 9999, 1); // minigun
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Took Away Heavy Weapons!");
	return 0;
}

int TakeOnlineWeapons(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	RemoveWeapons(Handle);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Removed player's weapons");
	return 0;
}

int GiveOnlineParachute(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	GiveWeaponDelayed(Handle, 0xFBAB5776, 9999, 1);

	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gave Them A Parachute");

	return 0;
}

int GiveOnlineAllchute(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		GiveWeaponDelayed(Handle, 0xFBAB5776, 9999, 1);
	}
	return 0;
}

int GiveOnlineAllWeapons(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		GiveWeaponDelayed(Handle, 0x3656C8C1, 9999, 1); // stun gun
		GiveWeaponDelayed(Handle, 0x99B507EA, 9999, 1); // knife
		GiveWeaponDelayed(Handle, 0x678B81B1, 9999, 1); // night stick
		GiveWeaponDelayed(Handle, 0x4E875F73, 9999, 1); // hammer
		GiveWeaponDelayed(Handle, 0x958A4A8F, 9999, 1); // bat
		GiveWeaponDelayed(Handle, 0x440E4788, 9999, 1); // golf club
		GiveWeaponDelayed(Handle, 0x84BD7BFD, 9999, 1); // crowbar
		GiveWeaponDelayed(Handle, 0x1B06D571, 9999, 5); // pistol
		GiveWeaponDelayed(Handle, 0x5EF9FEC4, 9999, 1); // combat pistol
		GiveWeaponDelayed(Handle, 0x22D8FE39, 9999, 1); // ap pistol
		GiveWeaponDelayed(Handle, 0x99AEEB3B, 9999, 1); // pistol 50.
		GiveWeaponDelayed(Handle, 0x13532244, 9999, 1); // micro smg
		GiveWeaponDelayed(Handle, 0x2BE6766B, 9999, 1); // smg
		GiveWeaponDelayed(Handle, 0xEFE7E2DF, 9999, 1); // assault smg
		GiveWeaponDelayed(Handle, 0xBFEFFF6D, 9999, 1); // assault rifle
		GiveWeaponDelayed(Handle, 0x83BF0278, 9999, 1); // carbine rifle
		GiveWeaponDelayed(Handle, 0xAF113F99, 9999, 1); // advanced rifle
		GiveWeaponDelayed(Handle, 0x9D07F764, 9999, 1); // MG
		GiveWeaponDelayed(Handle, 0x7FD62962, 9999, 1); // combat mg
		GiveWeaponDelayed(Handle, 0x1D073A89, 9999, 1); // pump shotgun
		GiveWeaponDelayed(Handle, 0x7846A318, 9999, 1); // sawnoff shotgun
		GiveWeaponDelayed(Handle, 0xE284C527, 9999, 1); // assault shotgun
		GiveWeaponDelayed(Handle, 0x9D61E50F, 9999, 1); // bullpupshotgun
		GiveWeaponDelayed(Handle, 0x05FC3C11, 9999, 1); // sniper
		GiveWeaponDelayed(Handle, 0x0C472FE2, 9999, 1); // heavy sniper
		GiveWeaponDelayed(Handle, 0xA284510B, 9999, 1); // grenade launcher
		GiveWeaponDelayed(Handle, 0xB1CA77B1, 9999, 1); // rpg
		GiveWeaponDelayed(Handle, 0x42BF8A85, 9999, 1); // minigun
		GiveWeaponDelayed(Handle, 0x93E220BD, 9999, 1); // grenades
		GiveWeaponDelayed(Handle, 0x2C3731D9, 9999, 1); // sticky bomb
		GiveWeaponDelayed(Handle, 0xFDBC8A50, 9999, 1); // smoke grenade
		GiveWeaponDelayed(Handle, 0x34A67B97, 9999, 1); // petrol can
		GiveWeaponDelayed(Handle, 0x060EC506, 9999, 1); // fire extinguisher
		GiveWeaponDelayed(Handle, 0x24B17070, 9999, 1); // moltovs
		GiveWeaponDelayed(Handle, 0x497FACC3, 9999, 1); // flare
		GiveWeaponDelayed(Handle, 0xFDBADCED, 9999, 1); // digiscanner
		GiveWeaponDelayed(Handle, 0x687652CE, 9999, 1); // stinger
		GiveWeaponDelayed(Handle, 600439132, 9999, 1); // ball
		//DLC Weapons
		GiveWeaponDelayed(Handle, 0xF9E6AA4B, 9999, 1); // bottle
		GiveWeaponDelayed(Handle, 0x61012683, 9999, 1); // gusenerg
		GiveWeaponDelayed(Handle, 0xC0A3098D, 9999, 1); // special carbine
		GiveWeaponDelayed(Handle, 0xD205520E, 9999, 1); // heavy pistol
		GiveWeaponDelayed(Handle, 0xBFD21232, 9999, 1); // sns pistol
		GiveWeaponDelayed(Handle, 0x7F229F94, 9999, 1); // bullpup rifle
		GiveWeaponDelayed(Handle, 0x92A27487, 9999, 1); // dagger
		GiveWeaponDelayed(Handle, 0x083839C4, 9999, 1); // vintage pistol
		GiveWeaponDelayed(Handle, 0x7F7497E5, 9999, 1); // firework launcher
		GiveWeaponDelayed(Handle, 0xA89CB99E, 9999, 1); // musket
		GiveWeaponDelayed(Handle, 0x63AB0442, 9999, 1); // homing launcher
		GiveWeaponDelayed(Handle, 0xAB564B93, 9999, 1); // proxmine
		GiveWeaponDelayed(Handle, 0x787F0BB, 9999, 1); // snowball
		GiveWeaponDelayed(Handle, 0xC734385A, 9999, 1); // marksman rifle
		GiveWeaponDelayed(Handle, 0x47757124, 9999, 1); // flare gun
		GiveWeaponDelayed(Handle, 0x0A3D4D34, 9999, 1); // Combat PDW
		GiveWeaponDelayed(Handle, 0xF9D04ADB, 9999, 1); // marksman pistol
		GiveWeaponDelayed(Handle, 0xB32BE614, 9999, 1); // knuckle dusters
		GiveWeaponDelayed(Handle, 0x0A3D4D34, 9999, 1); // combat pdw
		GiveWeaponDelayed(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 9999, 1); // HEAVYSHOTGUN


		//Attachments Clips
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xAF113F99, 0x8EC1C979); //Extened Clip Advanced Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x05FC3C11, 0xBC54DA77); //Advanced scope Sniper Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x22D8FE39, 0x249A17D5); //Extended Clip AP Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0C472FE2, 0xBC54DA77); //Advanced scope Heavy Sniper
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xD205520E, 0x64F9C62B); //Heavy Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFD21232, 0x7B0033B3); //SNS Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0x7C8BD10E); //Special Carbine
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xE284C527, 0x86BD7F72); //Assault Shotgun
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0xB3688B0F); //Bullpump Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7FD62962, 0xD6C59CD6); //Combat MG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x1B06D571, 0xED265A1C); //Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x5EF9FEC4, 0xD67B4F2D); //Combat Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x99AEEB3B, 0xD9D3AC92); //.50 Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x083839C4, 0x33BA12E8); //Vintage Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x13532244, 0x10E6BA2B); //Micro SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x2BE6766B, 0x350966FB); //SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xEFE7E2DF, 0xBB46E417); //Assault SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0A3D4D34, 0x334A5203); //Combat PDW
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x9D07F764, 0x82158B47); //MG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x61012683, 0xEAC8C270); //Gusenberg
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0xB1214F9B); //Assault Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0x91109691); //Carbine Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC734385A, 0xCCFD2AC5); //Marksman Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0x971CF6FD); //Heavy Shotgun

		//Attachments FlashLight
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xAF113F99, 0x359B7AAE); //Advanced Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0A3D4D34, 0x7BC4CDDC); //Combat PDW
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x13532244, 0x359B7AAE); //Micro SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x22D8FE39, 0x359B7AAE); //AP Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xD205520E, 0x359B7AAE); //Heavy Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0x7BC4CDDC); //Special Carbine
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0x7BC4CDDC); //Bullpump Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x1B06D571, 0x359B7AAE); //Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x5EF9FEC4, 0x359B7AAE); //Combat Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x99AEEB3B, 0x359B7AAE); //.50 Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x2BE6766B, 0x7BC4CDDC); //SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xEFE7E2DF, 0x7BC4CDDC); //Assault SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0x7BC4CDDC); //Assault Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0x7BC4CDDC); //Carbine Rifle

		//Attachments Scopes
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xAF113F99, 0xAA2C45B4); //Extened Clip Advanced Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x05FC3C11, 0xD2443DDC); //Advanced scope Sniper Rifle, 
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0C472FE2, 0xD2443DDC); //Advanced scope Heavy Sniper
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0xA0D89C42); //Special Carbine
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0xAA2C45B4); //Bullpump Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x13532244, 0x9D2FBF29); //Micro SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x2BE6766B, 0x3CC6BA57); //SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xEFE7E2DF, 0x9D2FBF29); //Assault SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0A3D4D34, 0xAA2C45B4); //Combat PDW
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x3C00AFED, 0x82158B47); //MG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0x9D2FBF29); //Assault Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0xA0D89C42); //Carbine Rifle

		//Attachments Supressors
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xAF113F99, 0x8EC1C979); //Advanced Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x05FC3C11, 0xA73D4664); //Sniper Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x22D8FE39, 0xC304849A); //AP Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xD205520E, 0xC304849A); //Heavy Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0xA73D4664); //Special Carbine
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0x837445AA); //Bullpump Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x9D61E50F, 0xA73D4664); //Bullpump ShotGun
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x1B06D571, 0x65EA7EBB); //Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x5EF9FEC4, 0xC304849A); //Combat Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x99AEEB3B, 0xA73D4664); //.50 Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x083839C4, 0xC304849A); //Vintage Pistol
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x2BE6766B, 0xC304849A); //SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xEFE7E2DF, 0xA73D4664); //Assault SMG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0xA73D4664); //Assault Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0x837445AA); //Carbine Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC734385A, 0x837445AA); //Marksman Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x1D073A89, 0xE608B35E); //Pump Shotgun
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xA73D4664); //Heavy Shotgun

		//Attachments Grip
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC0A3098D, 0xC164F53); //Special Carbine
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7F229F94, 0xC164F53); //Bullpump Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x9D61E50F, 0xC164F53); //Bullpump ShotGun
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xBFEFFF6D, 0xC164F53); //Assault Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0xC164F53); //Carbine Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xC734385A, 0xC164F53); //Marksman Rifle
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x0A3D4D34, 0xC164F53); //Combat PDW
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x7FD62962, 0xC164F53); //Combat MG
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0xE284C527, 0xC164F53); //Assault Shotgun
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xC164F53); //Heavy Shotgun

		//Special Finish
		GIVE_WEAPON_COMPONENT_TO_PED(Handle, 0x83BF0278, 0xD89B9658); //Carbine Rifle
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gave All Online Players All weapons");

		SET_PED_WEAPON_TINT_INDEX(Handle, 0x1B06D571, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x5EF9FEC4, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x22D8FE39, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x99AEEB3B, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x13532244, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x2BE6766B, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xEFE7E2DF, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xBFEFFF6D, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x83BF0278, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xAF113F99, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x9D07F764, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x7FD62962, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x1D073A89, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x7846A318, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xE284C527, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x9D61E50F, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x05FC3C11, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x0C472FE2, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xA284510B, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xB1CA77B1, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x42BF8A85, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x687652CE, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x61012683, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xC0A3098D, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xD205520E, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xBFD21232, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x7F229F94, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x083839C4, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x7F7497E5, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xA89CB99E, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x63AB0442, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xC734385A, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x0A3D4D34, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0xF9D04ADB, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, 0x0A3D4D34, 2);
		SET_PED_WEAPON_TINT_INDEX(Handle, get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 2);
	}
	return 0;
}




int GiveOnlineAllWeapons4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		REMOVE_WEAPON_FROM_PED(Handle, 0xA284510B); // grenade launcher
		REMOVE_WEAPON_FROM_PED(Handle, 0xB1CA77B1); // rpg
		REMOVE_WEAPON_FROM_PED(Handle, 0x42BF8A85); // minigun
		REMOVE_WEAPON_FROM_PED(Handle, 0x687652CE); // stinger
		REMOVE_WEAPON_FROM_PED(Handle, 0x7F7497E5); // firework launcher
		REMOVE_WEAPON_FROM_PED(Handle, 0x63AB0442); // homing launcher
	}
	return 0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Took Away ARs and Heavy Weps");
}


int BlowUpAllOnlinePlayers(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(Handle, Position);
		AddExplosion(Position[0], Position[1], Position[2] - 0.8f, FIREWORK, 8.0f, true, false, 0.0f);
	}
	return 0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Firework On All Players!");
}

int BlowUpAllOnlinePlayers2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(Handle, Position);
		AddExplosion(Position[0], Position[1], Position[2] - 0.8f, SHIP_DESTROY, 8.0f, true, false, 0.0f);
	}
	return 0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Ship Explosion All Players!");
}

bool swaggedstealth = false;
int StealthSwag(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!swaggedstealth) {
		swaggedstealth = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Explode Stealth:~b~ON!");

	} else if (swaggedstealth) {
		swaggedstealth = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Explode Stealth:~r~OFF!");
	}
	return 0;
}

bool swaggedunstealth = false;
int NotStealthSwag(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!swaggedunstealth) {
		swaggedunstealth = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Exploding:~b~ON!");

	} else if (swaggedunstealth) {
		swaggedunstealth = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Exploding:~r~OFF!");
	}
	return 0;
}

bool passivekillerswag = false;
int PassiveKiller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!passivekillerswag) {
		passivekillerswag = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Passive Killer:~b~ON!");

	} else if (passivekillerswag) {
		passivekillerswag = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Passive Killer:~r~OFF!");
	}
	return 0;
}


bool alldrop = false;
float allcash[3];
int AllCashDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!alldrop) {
		alldrop = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Lobby Drop:~b~ON!");
	} else if (alldrop) {
		alldrop = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Lobby Drop:~r~OFF!");
	}
	return 0;
}

int AllKickedFromVeh2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	allkickedfromveh2 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Sent To Oblivion!");
	return 0;
}

int AllKickedFromVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	allkickedfromveh = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Kicking all Players");
	return 0;
}

int STFUTroll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!STFUTrollactive) {
		STFUTrollactive = true;
	}

	else if (STFUTrollactive) {
		STFUTrollactive = false;
	}

	return 0;
}

bool waterswag = false;
int WaterSwagMessage(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!waterswag) {
		waterswag = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Water Explode Loop:~b~ON");

	} else if (waterswag) {
		waterswag = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Water Explode Loop:~r~OFF");
	}
	return 0;
}

void WaterSwagLoop() {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(Handle, Position);
		AddExplosion(Position[0], Position[1], Position[2] - 0.8f, DIR_WATER_HYDRANT, 8.0f, true, false, 0.0f);
	}
}

bool freezeallswag = false;
int FreezeAllMessage(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!freezeallswag) {
		freezeallswag = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Freeze All Players:~b~ON!");

	} else if (freezeallswag) {
		freezeallswag = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Freeze All Players:~r~OFF!");
	}
	return 0;
}

void FreezeAllLoop() {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		int theirPedHandle = GetPlayerHandle(i);
		int myPedHandle = PlayerPedId();
		set_ped_can_play_ambient_anims(theirPedHandle, true);
		set_ped_can_play_gesture_anims(theirPedHandle, true);
		set_ped_can_play_ambient_base_anims(theirPedHandle, true);
		clear_ped_tasks_immediately(theirPedHandle);
	}
}

bool whostalkingloop = false;
int Whostalking(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!whostalkingloop) {
		whostalkingloop = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Whos Talking:~b~ON!");

	} else if (whostalkingloop) {
		whostalkingloop = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Whos Talking:~r~OFF!");
	}
	return 0;
}

bool raceloop = false;
int racefx(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!raceloop) {
		raceloop = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Race Effect:~b~ON!");

	} else if (raceloop) {
		raceloop = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Race Effect:~r~OFF!");
	}
	return 0;
}

bool whosmutedmeloop = false;
int whosmutedme(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!whosmutedmeloop) {
		whosmutedmeloop = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Who Has Me Muted:~b~ON!");

	} else if (whosmutedmeloop) {
		whosmutedmeloop = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Who Has Me Muted:~r~OFF!");
	}
	return 0;
}

bool nocliploop = false;
int noclip(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!nocliploop) {
		set_entity_visible(PlayerPedId(), true);
		nocliploop = true;
		invisiblePlayer = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~No Clip:~b~ON!(Press LT To Fly)");

	} else if (nocliploop) {
		set_entity_visible(PlayerPedId(), true);
		nocliploop = false;
		invisiblePlayer = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~No Clip:~r~OFF!");
	}
	return 0;
}
bool DisableradarBOOL = false;
int Disableradar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!DisableradarBOOL) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Radar:~b~ON");
		DisableradarBOOL = true;
	} else if (DisableradarBOOL) {
		DisableradarBOOL = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~RADAR :~r~OFF");
	}
	return 0;
}

bool banloop2 = true;
int bypassthecash(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!banloop2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Bypass Loop:~b~ON");
		banloop2 = true;
	} else if (banloop2) {
		banloop2 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Bypass Loop:~r~OFF");
		banloop2 = false;
	}
	return 0;
}

int OffRadar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	NETWORK_SPENT_BUY_OFFTHERADAR;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Off The Radar Loop:~r~On");
	return 0;
}


bool MobileRadioBool = false;
int MobileRadioLoop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!MobileRadioBool) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Mobile radio:~b~ON (Hold Left to Open)");
		MobileRadioBool = true;
	} else if (MobileRadioBool) {
		MobileRadioBool = false;
		void(AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(false));
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Mobile radio:~r~OFF");
		MobileRadioBool = false;
	}
	return 0;
}

bool Mosesloop = false;
int noclip2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!Mosesloop) {
		Mosesloop = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Moses Loop:~b~ON!");

	} else if (Mosesloop) {
		Mosesloop = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Moses Loop:~r~OFF!");
	}
	return 0;
}

bool Protectionloop = false;
int Protection1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!Protectionloop) {
		Protectionloop = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~b~ON!");

	} else if (Protectionloop) {
		Protectionloop = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~r~OFF!");
	}
	return 0;
}

bool Protectionloop69 = false;
int Protection69(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	handle = subMenuIndex;
	if (!Protectionloop69) {
		Protectionloop69 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Friend Protection:~b~ON!");

	} else if (Protectionloop69) {
		Protectionloop69 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Friend Protection:~r~OFF!");
	}
	return 0;
}

int Detacnhloop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(PlayerPedId(), FALSE);
	Hash modelHashes[] = { 0x2E28CA22 , 0xA50DDDD0, 0xEFC4165A, 0x8E8C7A5B,
		0x456AA864, 0xBE862050, 0xB20E5785, 0x58D3B4EA, 0xC42C019A,
		0x8AF58425, 0x3DC31836, 0xA9BD0D16 , 0x1AFA6A0A , 0x4B3D240F ,
		0x40F52369 , 0xF830B63E , 0xD541462D , 0x532B1DD1 , 0x0E3BA450 ,
		0xFB631122 , 0x5571173D , 0x6AD326C2 , 0x7FFBC1E2 , 0x678FC2DB ,
		0x5869A8F8 , 0xE6CB661E , 0x2AE13DFA , 0x29CB0F3C , 0x922C2A43 ,
		0xFA686C0E , 0x1F550C17 , 0x5B5C4263 , 0x39885BB5 , 0x16A39A90 ,
		0xE3CE09E2 , 0x927A5723 , 0x34D5D3FD , 0xB467C540 , 0x745F3383 ,
		0x392D62AA , 0x07121AC4 , 0x0E8032E4 , 0xD44295DD , 0x6F9939C7 ,
		0x9C762726 , 0x8973A868 , 0xC2BC19CD , 0xFFFFFFFF858BB1D0, 0xFFFFFFFFA7694DEC,
		0x3B21C5E7, 0xFFFFFFFFDFF68A19, 0x69E5D9CC, 0x6F204E3A, 0xFFFFFFFF9B862E76,
		0x16A39A90, 0xFFFFFFFFE7ED1A59, 0xFFFFFFFFBEA0821B, 0xFFFFFFFFDCA9A809,
		0xFFFFFFFFC09CB0B8, 0x7C035CA2, 0xFFFFFFFFE3CE09E2, 0xFFFFFFFFC3F13FCC,
		0xFFFFFFFFC079B265, 0x7121AC4, 0x745F3383, 0x51709ADC, 0x392D62AA,
		0x1B6ED610, 0xFFFFFFFFE92E717E, 0xFFFFFFFF82826CD2, 0xFFFFFFFFEB2E00E0,
		0x8DA1C0E, 0xFFFFFFFFEFC4165A, 0x1081FBDD, 0x4AF2CCB6, 0xFFFFFFFFE2BA016F,
		0x2468F271, 0xFFFFFFFFC0382E48, 0xFFFFFFFF8E1E7CCF, 0xFFFFFFFFC40BBB0B,
		0xFFFFFFFFF0A61994, 0x1AB39621, 0xFFFFFFFFDF9841D7, 0xFFFFFFFF874B5974,
		0xFFFFFFFFC9751EF7, 0xFFFFFFFFC7C649FF, 0x74E9F5BB, 0x336E5E2A,
		0xFFFFFFFFC42C019A, 0xFFFFFFFFDF5F9F7F, 0xFFFFFFFF98EE1ACD, 0x6B795EBC,
		0xFFFFFFFF9BE9742E, 0xFFFFFFFFC815DEA1, 0xFFFFFFFFAFDD8CBB, 0xFFFFFFFFAFDD8CBB,
		0x2D4768B4, 0x54BBA095, 0xFFFFFFFFA7CF17C4, 0x7E6CAA3B, 0xFFFFFFFF997021A9,
		0x14E3D6EB, 0xFFFFFFFFC815DEA1, 0xFFFFFFFFA163B4AF, 0xFFFFFFFF81049349,
		0x6AE93235, 0x63F9CEA3, 0x66477EB0, 0xFFFFFFFF9F984011, 0xFFFFFFFFAE588C5F,
		0x7EA4A671, 0x47D2164, 0xFFFFFFFFE2BA016F, 0xF01B4D4, 0xFFFFFFFFC6FED6DC,
		0xFFFFFFFFC89630B8, 0xA2CE7D2, 0xFFFFFFFF80D6E7F4, 0x2C98B0ED, 0x2C98B0ED,
		0xFFFFFFFFD3674F13, 0x2C98B0ED, 0xFFFFFFFFD3674F13, 0xFFFFFFFFD3674F13,
		0x2C98B0ED, 0x2C98B0ED, 0x5A8F8CD2, 0xFFFFFFFF97A58869, 0x6DB9599A,
		0xFFFFFFFF8A451C5C, 0x69CA00DD, 0x683475EE, 0x5A9789A0, 0xFFFFFFFFE1C17F6F,
		0x531135E6, 0x3042936E, 0xF87EEF6, 0xFFFFFFFFE0264F5D, 0xFFFFFFFFBB55760A,
		0x58BA1208, 0xFFFFFFFFC80467C6 };
	for each (Hash modelHash in modelHashes) {
		Object obj = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(playerPosition.x, playerPosition.y, playerPosition.z, 2.0f, modelHash, TRUE);
		if (ENTITY::DOES_ENTITY_EXIST(obj))
			ENTITY::DELETE_ENTITY(&obj);
	}
	return 0;
}

bool crashplayer = false;
int crashplayerloop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	handle = subMenuIndex;
	if (!crashplayer) {
		crashplayer = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Crash Loop:~b~ON!");

	} else if (crashplayer) {
		crashplayer = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Crash Loop:~r~OFF!");
	}
	return 0;
}

bool Protectionloop5 = false;
int Protection5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!Protectionloop5) {
		Protectionloop5 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~b~ON!");

	} else if (Protectionloop5) {
		Protectionloop5 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~r~OFF!");
	}
	return 0;
}

bool Protectionloop6 = false;
int Protection6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!Protectionloop6) {
		Protectionloop6 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~b~ON!");

	} else if (Protectionloop6) {
		Protectionloop6 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~r~OFF!");
	}
	return 0;
}

bool Protectionloop7 = false;
int Protection7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!Protectionloop7) {
		Protectionloop7 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~b~ON!");

	} else if (Protectionloop7) {
		Protectionloop7 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~r~OFF!");
	}
	return 0;
}

bool Protectionloop4 = false;
int Protection4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!Protectionloop4) {
		Protectionloop4 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~b~ON!");

	} else if (Protectionloop4) {
		Protectionloop4 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~r~OFF!");
	}
	return 0;
}

bool FireManModeLoop1 = false;
int firemanloop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	if (!FireManModeLoop1) {
		FireManModeLoop1 = true;
		GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
		pexp = "scr_recrash_rescue_fire";
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~FireMan:~b~ON!");

	} else if (FireManModeLoop1) {
		FireManModeLoop1 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~FireMan:~r~OFF!");
	}
	return 0;
}

bool Protectionloop3 = false;
int Protection3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!Protectionloop3) {
		Protectionloop3 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~b~ON!");

	} else if (Protectionloop3) {
		Protectionloop3 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~r~OFF!");
	}
	return 0;
}

bool Protectionloop2 = false;
int Protection2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!Protectionloop2) {
		Protectionloop2 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~b~ON!");

	} else if (Protectionloop2) {
		Protectionloop2 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Protection:~r~OFF!");
	}
	return 0;
}

int DryOff(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Me = (PlayerPedId)();

	PED::CLEAR_PED_WETNESS(Me);
	ShowMessageOnScreen("~b~Dried Off");

	return 0;
}

float WaypointPos1[3];

int teleway(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int playerVehicle = GetCarCharIsIn(PlayerPedId(), PlayerId());
	set_entity_as_mission_entity(playerVehicle, 0, 1);
	delete_vehicle2(&playerVehicle);
	set_vehicle_as_no_longer_needed(playerVehicle);
	return 0;
}


int FlashMinimap(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Me = (PlayerPedId)();

	UI::FLASH_MINIMAP_DISPLAY();
	ShowMessageOnScreen("~b~Flash MiniMap");

	return 0;
}//FLASH_MINIMAP_DISPLAY//ENABLE_DEATHBLOOD_SEETHROUGH
int randomBloodshed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Me = (PlayerPedId)();

	UI::ENABLE_DEATHBLOOD_SEETHROUGH(true);
	ShowMessageOnScreen("~b~Dried off");

	return 0;
}//FLASH_MINIMAP_DISPLAY//ENABLE_DEATHBLOOD_SEETHROUGH

int MosesMOOD(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float pos[3];
	GetEntityCoords(Handle, &pos[0], &pos[1], &pos[2]);
	MODIFY_WATER(pos[0] + 9999999999999, pos[1] + 999999999999999, pos[2], FLT_MAX);
	MODIFY_WATER(pos[0] + 9999999, pos[1] + 99999999999999999, pos[2], FLT_MAX);
	MODIFY_WATER(pos[0] + 9999999, pos[1] + 4999999999999999, pos[2], FLT_MAX);
	MODIFY_WATER(pos[0] + 99999999999, pos[1] + 9999999999999999, pos[2], FLT_MAX);
	MODIFY_WATER(pos[0], pos[1] + 9999999999999999, pos[2], FLT_MAX);
	MODIFY_WATER(pos[0], pos[1] + 9999999999999999, pos[2], FLT_MAX);
	MODIFY_WATER(pos[0], pos[1] + 999999999, pos[2], FLT_MAX);
	MODIFY_WATER(pos[0], pos[1], pos[2] + 999999999999, FLT_MAX);
	MODIFY_WATER(pos[0], pos[1], pos[2], FLT_MAX);
	MODIFY_WATER(pos[0] + 999999999999999, pos[1], pos[2], FLT_MAX);
	MODIFY_WATER(pos[0], pos[1], pos[2], FLT_MAX);
	MODIFY_WATER(pos[0], pos[1] + 999999999999, pos[2] + 99999999, FLT_MAX);
	MODIFY_WATER(pos[0] - 3, pos[1], pos[2], FLT_MAX);
	return 0;
}



void BlowUpLoop2() {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(Handle, Position);
		AddExplosion(Position[0], Position[1], Position[2], BLIMP, FLT_MAX, false, true, 0.0f);
		AddExplosion(Position[0], Position[1], Position[2], TRAIN, FLT_MAX, false, true, 0.0f);
	}
}

void KillPassiveLoop() {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(Handle, Position);
		AddExplosion(Position[0], Position[1], Position[2] - 0.8f, DIR_FLAME, 8.0f, true, false, 0.0f);
	}
}



void BlowUpLoop() {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(Handle, Position);
		AddExplosion(Position[0], Position[1], Position[2], 16, 2.0f, true, false, 0.0f);
	}
}





int ToggleFunGun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!fun_gun) {
		fun_gun = true;
		ShowMessageOnScreen("Prop shooter has been turned on, make sure you set your item!");
	} else if (fun_gun) {
		fun_gun = false;
		ShowMessageOnScreen("Prop shooter has been turned ~o~ OFF!");
	}
	return 0;
}

int Cross1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!cross) {
		cross = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cross Turned:~b~ON!");
	} else if (cross) {
		cross = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cross Turned:~r~OFF!");
	}
	return 0;
}
int Cross2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!cross02) {
		cross02 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cross Turned:~b~ON!");
	} else if (cross02) {
		cross02 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cross Turned:~r~OFF!");
	}
	return 0;
}
int Cross3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!cross03) {
		cross03 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cross Turned:~b~ON!");
	} else if (cross03) {
		cross03 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cross Turned:~r~OFF!");
	}
	return 0;
}
int Cross4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!cross04) {
		cross04 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cross Turned:~b~ON!");
	} else if (cross04) {
		cross04 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cross Turned:~r~OFF!");
	}
	return 0;
}

int FunGunItem;
int FunGunItemDildo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = get_hash_key("prop_cs_dildo_01");
	ShowMessageOnScreen("Dildo ammo for prop shooter has been set!");
	return 0;
}

int FunGunItemWhiteBlock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = -1007599668;
	ShowMessageOnScreen("White block ammo for prop shooter has been set!");
	return 0;
}

int FunGunItemAlienEgg(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = 1803116220;
	ShowMessageOnScreen("Alien egg ammo for prop shooter has been set!");
	return 0;
}

int FunGunItemBodyParts(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = -1268580434;
	ShowMessageOnScreen("Body part ammo for prop shooter has been set!");
	return 0;
}

int FunGunItem1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = -1288515433;
	ShowMessageOnScreen("Wrecked Buzzard has been set");
	return 0;
}

int FunGunItem2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = 1171614426;
	ShowMessageOnScreen("Ambulance Ammo Set");//1519357138
	return 0;
}

int FunGunItem3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = 1519357138;
	ShowMessageOnScreen("Ammo Set");//1519357138//0xB467C540
	return 0;
}

int FunGunItem4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = 0xB467C540;
	ShowMessageOnScreen("Ammo Set");//1262298127
	return 0;
}

int FunGunItem5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = 1262298127;
	ShowMessageOnScreen("Ammo Set");
	return 0;
}

int FunGunItem6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = -1113453233;
	ShowMessageOnScreen("Ammo Set");
	return 0;
}

int FunGunItem7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = 351714669;
	ShowMessageOnScreen("Ammo Set");//0x113FD533
	return 0;
}

int FunGunItem8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = 0x113FD533;
	ShowMessageOnScreen("Ammo Set");//-1603796423
	return 0;
}

int FunGunItem9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = -1603796423;
	ShowMessageOnScreen("Ammo Set");//-1603796423
	return 0;
}//1677315747


int FunGunItem10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = 1677315747;
	ShowMessageOnScreen("Tube ammo Set");//-1603796423
	return 0;
}//1677315747

int FunGunItem11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	FunGunItem = -1729226035;
	ShowMessageOnScreen("Hotdog ammo set!");//-1603796423
	return 0;
}//1677315747

void fungun() {
	int myhandle = GetPlayerHandle(PlayerId());
	if (is_ped_on_foot(myhandle)) {
		if (is_ped_shooting(myhandle)) {
			//Declaring
			int funitemhandle;
			float Pos[3];
			float directioncoords[3];
			float launchPos[3];
			float targetPos[3];
			float dim_min[3], dim_max[3];
			GetEntityCoords(PlayerPedId(), Pos);

			funitemhandle = create_object(FunGunItem, Pos[0], Pos[1], Pos[2]);

			if (network_request_control_of_entity(funitemhandle)) {
				freeze_entity_position(funitemhandle, true);
				set_entity_coords(funitemhandle, Pos[0], Pos[1] + 1, Pos[2], 0, 0, 0, 1);//Added 1 to the y coord
				set_entity_heading(funitemhandle, get_entity_heading(PlayerPedId()));
				freeze_entity_position(funitemhandle, false);
				apply_force_to_entity(funitemhandle, 1, 0.0, 500.0f, 0.0, 0.0, -1.5f, 0.0f, 0, 1, 1, 1, false, true);
			}
		}
	}
}

void cross1() {
	draw_sprite("mpmissmarkers128", "survival_icon", 0.4995f, 0.50f, 0.02f, 0.03f, 0.0f, 94, 224, 86, 250);
}

void cross2() {
	draw_sprite("mpmissmarkers128", "survival_icon", 0.4995f, 0.50f, 0.02f, 0.03f, 0.0f, 175, 25, 235, 250);
}

void cross3() {
	draw_sprite("CommonMenu", "MP_SpecItem_Weed", 0.4995f, 0.50f, 0.02f, 0.03f, 0.0f, 234, 17, 22, 200);
}

void cross4() {
	draw_sprite("CommonMenu", "MP_SpecItem_Weed", 0.4995f, 0.50f, 0.02f, 0.03f, 0.0f, 255, 32, 238, 200);
}

void UltimateDeagleLoop() {
	float Pos[3];
	float health;
	if (is_control_just_pressed(0, 24)) {
		GetEntityCoords(PlayerPedId(), Pos);
		int vehHandle = get_closest_vehicle(Pos[0], Pos[1], Pos[2], 2000.0f, 0, 0);
		health = get_vehicle_petrol_tank_health(vehHandle);
		GetCoordsInfrontOfSelf(&Pos[0], &Pos[1], &Pos[2]);
		if (network_request_control_of_entity(vehHandle) && (health > 1)) {
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ ");
			freeze_entity_position(vehHandle, true);
			set_entity_coords(vehHandle, Pos[0], Pos[1], Pos[2], 0, 0, 0, 1);
			set_entity_heading(vehHandle, get_entity_heading(PlayerPedId()));
			freeze_entity_position(vehHandle, false);
			apply_force_to_entity(vehHandle, 1, 0.0, 1000.0f, 0.0, 0.0, -1.5f, 0.0f, 0, 1, 1, 1, false, true);
		} else { ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ No vehicle in memory at this time."); }
	}

}

bool ammo;
int ToggleAmmo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!ammo) {
		ammo = true;
		set_ped_infinite_ammo_clip(PlayerPedId(), true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Unlimited Ammo:~b~ON!");
	} else if (ammo) {
		set_ped_infinite_ammo_clip(PlayerPedId(), false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Unlimited Ammo:~r~OFF!");
		ammo = false;
	}
	return 0;
}


int TeleImpoundLot(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float x, y, z;
	x = -1330.267822, y = -390.644684, z = 36.602779;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}


	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to ammunation store!");
	return 0;
}

int ObjectCoords(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float Pos[3];
	GetEntityCoords(objecthandle, Pos);
	printf("\tPosition = {%f, %f, %f};\n", Pos[0], Pos[1], Pos[2]);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Position = %.3f   %.3f   %.3f", Pos[0], Pos[1], Pos[2]);
	return 0;
}

int ObjectHash(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
#ifdef PRIVATE
	int hash = get_entity_model(objecthandle);
	printf("Object Hash = %i \n", hash);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Object Hash = %i", hash);
#else
	ShowMessageOnScreen("~r~ Sorry this is only available in the private version!");
#endif
	return 0;
}
bool objectcopy = false;
int ObjectCopy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int hash = get_entity_model(objecthandle);
	model = hash;
	objectspawn = true;
	objectcopy = true;
	printf("Copied Object", hash);
	return 0;
}

bool deleted_obj = false;
int ObjectDelete(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int hash = get_entity_model(objecthandle);
	deleted_obj = true;
	return 0;
}

int DetachModder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int attachedEnt = GET_ENTITY_ATTACHED_TO(PlayerPedId());
	if (DoesEntityExist(attachedEnt)) {
		detach_entity(attachedEnt);
	}
	return 0;
}



int TeleFranklinsCrib(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 8.069606, y = 537.153015, z = 176.028015;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		}

		else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Franklins crib!");
	return 0;
}

int TeleMicsCrib(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -813.176453, y = 179.232452, z = 72.159149;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Micheals crib!");
	return 0;
}

int TeleLsCustoms(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -384.217834, y = -118.733658, z = 38.689579;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to LS Customs!");
	return 0;
}

int ChillLakeTele(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 2567.403809, y = 6135.191406, z = 169.433304;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Chill Lake!");
	return 0;
}

int LightHouseTele(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 3423.707275, y = 5175.0815413, z = 7.382134;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Light House!");
	return 0;
}

int TeleWeaselTower(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -847.499084, y = -434.825989, z = 36.639900;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Weasel Tower Garage!");
	return 0;
}

int TeleUnionDepository(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 8.873180, y = -684.307739, z = 32.338120;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Union Depository!");
	return 0;
}

float saveX, saveY, saveZ;
int SaveTeleLocation(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &saveX, &saveY, &saveZ);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Saved Location 1!");
	return 0;
}

int TeleToSave(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, saveX, saveY, saveZ, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, saveX, saveY, saveZ, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Saved Location 1!");
	return 0;
}

float save2X, save2Y, save2Z;
int SaveTeleLocation2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &save2X, &save2Y, &save2Z);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Saved Location 2!");
	return 0;
}

int TeleToSave2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, save2X, save2Y, save2Z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, save2X, save2Y, save2Z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Saved Location 2!");
	return 0;
}

float save3X, save3Y, save3Z;
int SaveTeleLocation3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &save3X, &save3Y, &save3Z);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Saved Location 3!");
	return 0;
}

int TeleToSave3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, save3X, save3Y, save3Z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, save3X, save3Y, save3Z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Saved Location 3!");
	return 0;
}

float save4X, save4Y, save4Z;
int SaveTeleLocation4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &save4X, &save4Y, &save4Z);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Saved Location 4!");
	return 0;
}

int TeleToSave4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, save4X, save4Y, save4Z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, save4X, save4Y, save4Z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Saved Location 4!");
	return 0;
}

float save5X, save5Y, save5Z;
int SaveTeleLocation5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &save5X, &save5Y, &save5Z);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Saved Location 5!");
	return 0;
}

int TeleToSave5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, save5X, save5Y, save5Z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, save5X, save5Y, save5Z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Saved Location 5!");
	return 0;
}

float save6X, save6Y, save6Z;
int SaveTeleLocation6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &save6X, &save6Y, &save6Z);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Saved Location 6!");
	return 0;
}

int TeleToSave6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, save6X, save6Y, save6Z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, save6X, save6Y, save6Z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Saved Location 6!");
	return 0;
}

float save7X, save7Y, save7Z;
int SaveTeleLocation7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &save7X, &save7Y, &save7Z);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Saved Location 7!");
	return 0;
}


int TeleToSave7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, save7X, save7Y, save7Z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, save7X, save7Y, save7Z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Saved Location 7!");
	return 0;
}

float save8X, save8Y, save8Z;
int SaveTeleLocation8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &save8X, &save8Y, &save8Z);
	ShowMessageOnScreen("~y~ Saved Location !");
	return 0;
}

int TeleToSave8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, save8X, save8Y, save8Z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, save8X, save8Y, save8Z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~g~ Teleported to Saved Location 8!");
	return 0;
}

float save9X, save9Y, save9Z;
int SaveTeleLocation9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &save9X, &save9Y, &save9Z);
	ShowMessageOnScreen("~y~ Saved Location 9!");
	return 0;
}

int TeleToSave9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, save9X, save9Y, save9Z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, save9X, save9Y, save9Z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~g~ Teleported to Saved Location 9!");
	return 0;
}

float save10X, save10Y, save10Z;
int SaveTeleLocation10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GetEntityCoords(PlayerPedId(), &save10X, &save10Y, &save10Z);
	ShowMessageOnScreen("~y~ Saved Location 10!");
	return 0;
}

int TeleToSav10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, save10X, save10Y, save10Z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, save10X, save10Y, save10Z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~g~ Teleported to Saved Location 10!");
	return 0;
}

int TeleIntoCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float Pos[3];
	GetEntityCoords(PlayerPedId(), Pos);
	int vehHandle = get_closest_vehicle(Pos[0], Pos[1], Pos[2], 2000.0f, 0, 0);
	int myhandle = GetPlayerHandle(PlayerId());
	int var4 = -1;
	int pasnmax;
	pasnmax = get_vehicle_max_number_of_passengers(vehHandle);
	while (var4 < pasnmax) {
		if (is_vehicle_seat_free(vehHandle, var4)) {
			set_ped_into_vehicle(myhandle, vehHandle, var4);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported into nearby car!");
			break;
		} else {
			var4++;
		}
	}
	if (var4 > pasnmax) {
		ShowMessageOnScreen("~r~ Failed, No available seat in nearby car!");
	}
	return 0;
}

int TeleGarage(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 228.7188, y = -989.9847, z = -99.0;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to 10 Car Garage!");
	return 0;
}

int ToggleLag(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	causelag ^= true;
	return 0;
}

int TeleAirport(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;

	x = -1157.929565, y = -3148.384766, z = 13.944441;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Airport!");
	return 0;
}

int TelePonsonbys(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;

	x = -148.248779, y = -308.142090, z = 38.151409;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Ponsonbys in Burton!");
	return 0;
}

int TeleVaginaCove(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;

	x = -1895.996582, y = 1390.620361, z = 216.218048;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Vagina Cove in Tongva Hills!");
	return 0;
}

int TeleEclipse(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -810.110901, y = 300.467865, z = 86.118515;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Eclipse Tower");
	return 0;
}

int TeleTinsel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -641.864624, y = 24.014740, z = 39.351025;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Tinsel Tower");
	return 0;
}

int TelePaletoBank(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -107.862190, y = 6466.428223, z = 31.626722;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Paleto Bank");
	return 0;
}

int TeleMntGraveSite(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 3201.509033, y = 4728.985840, z = 193.161636;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Mountain Grave Site!");
	return 0;
}

int TeleTrevorField(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 1704.752686, y = 3275.902832, z = 41.157715;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Trevor's Airfield");
	return 0;
}

int TeleSecretIsland(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -2167.429932, y = 5190.774414, z = 16.238092;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Secret Island");
	return 0;
}

int TeleArmyTower(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -2358.946045, y = 3252.216797, z = 101.450424;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Secret Army Tower");
	return 0;
}

int TeleMountChill(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 495.518433, y = 5588.867188, z = 794.483215;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Mount Chilliad");
	return 0;
}

int TeleDesertClub(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 2004.878540, y = 3073.016113, z = 46.794247;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Desert Night Club");
	return 0;
}

int TeleFIB(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 135.534073, y = -749.334595, z = 258.151764;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to FIB Building");
	return 0;
}

int TeleLabUpper(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 3618.517822, y = 3740.693604, z = 28.690096;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Secret Lab Upper Level");
	return 0;
}

int TeleBankVault(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 258.252930, y = 225.658600, z = 101.683197;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Bank Vault");
	return 0;
}

int TeleBridge(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -546.417297, y = -2229.224365, z = 122.364899;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Bridge Top");
	return 0;
}

int TeleTorture(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 136.323441, y = -2203.203857, z = 7.309136;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Torture Room");
	return 0;
}

int TeleTrailer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 1975.029297, y = 3820.041504, z = 33.432800;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Trevors Trailer");
	return 0;
}

int TeleLabLower(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 3526.256836, y = 3706.816895, z = 20.991793;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Secret Lab Lower Level");
	return 0;
}

int TeleMazeTower(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -73.92588, y = -818.455078, z = 326.174377;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Maze Tower");
	return 0;
}

int TeleJetSpawn1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -2150.634277, y = 3234.995117, z = 32.810455;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Military Base");
	return 0;
}

int TeleSubSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 3846.635254, y = 4243.365234, z = 5.335886;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Submarine Spawn");
	return 0;
}

int TeleJetSpawn3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -2138.139893, y = 3056.729736, z = 32.809875;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Jet Spawn");
	return 0;
}

int TeleJetSpawn4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -2022.258423, y = 2973.546875, z = 33.118137;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Jet Spawn");
	return 0;
}

int TeleJetSpawn5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -2007.929932, y = 3098.386475, z = 32.810257;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Jet Spawn");
	return 0;
}

int TeleLesterx(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 1273.206299, y = -1716.197510, z = 54.771473;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Lester's House");
	return 0;
}

int VineWoodSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 746.852844, y = 1188.229736, z = 347.190369;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to VineWood Sign");
	return 0;
}

int HippieCamp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 2508.434814, y = 3785.803467, z = 50.288586;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Hippie Camp");
	return 0;
}

int DatCave(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 3065.706787, y = 2209.467285, z = 2.694285;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Dat Cave");
	return 0;
}

int DatPhat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -180.464493, y = 854.566040, z = 231.702316;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Mansion");
	return 0;
}

int DatChill(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 2941.146729, y = 783.332520, z = 25.436565;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Chill Place");
	return 0;
}

int DatChill2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 96.712151, y = -1290.496338, z = 29.268761;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Chill Place 2");
	return 0;
}

int DatGlitch(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -1925.606567, y = -3069.330078, z = 6.407115;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Airport Glitch");
	return 0;
}

int DatFleek(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 145.889999, y = -1038.358521, z = 29.367849;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Fleeca Bank");
	return 0;
}

int DatMerc(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 536.585388, y = -3102.687012, z = 6.069393;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Mercenary Glitch!");
	return 0;
}

int DatTop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -792.988647, y = 325.181580, z = 230.647415;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to the top of Eclipse Tower!");
	return 0;
}
int DatTop2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -595.302368, y = 2086.993896, z = 131.382584;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to the top of Eclipse Tower!");
	return 0;
}

int DatPlaza(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -3134.536621, y = 1061.794434, z = 20.292444;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Chumash Plaza!");
	return 0;
}

int DatPb(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -557.506714, y = 5372.471680, z = 69.606773;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to PB Factory!");
	return 0;
}

int DatPb1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 404.691315, y = 6489.093262, z = 28.416893;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to PB Barn!");
	return 0;
}

int DatPb2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 4144.353027, y = 4487.149902, z = 20.411861;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Dat Island Swag!");
	return 0;
}


int PillBoxSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -144.703979, y = -593.125793, z = 210.809769;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to PillBox Tower");
	return 0;
}

int PierSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -1601.996216, y = -1043.851196, z = 13.036405;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to The Pier");
	return 0;
}

int TeleCoords(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float Pos[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Pos);
	printf("\tPosition = {%f, %f, %f};\n", Pos[0], Pos[1], Pos[2]);
	ShowMessageOnScreen("~g~ Position = %f   %f   %f", Pos[0], Pos[1], Pos[2]);
	return 0;
}

int TelePolice(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 446.413544, y = -985.128113, z = 30.689520;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Police Station");
	return 0;
}

int TeleMask(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -1337.396973, y = -1280.307495, z = 4.842985;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Mask Shop");
	return 0;
}

int TeleClock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -1238.675537, y = -847.954590, z = 85.161690;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Clock Tower");
	return 0;
}

int TeleSniper(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -550.989380, y = -193.862366, z = 76.499336;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Sniper Tower");
	return 0;
}

int StripClub(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 134.048294, y = -1307.860840, z = 29.002970;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Strip Club");
	return 0;
}

int TeleMerry(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 568.406006, y = -3125.799805, z = 18.768612;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Merryweather");
	return 0;
}

int TeleAirOffice(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -1559.734741, y = -3237.086182, z = 29.634100;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Airport Office");
	return 0;
}

int TeleConstructionTower(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -143.881927, y = -984.810852, z = 269.134308;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Construction Tower");
	return 0;
}

int TeleIAA(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float x, y, z;
	x = 121.494728, y = -622.014954, z = 206.046783;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to IAA Building");
	return 0;
}

bool TeleportToWaypoint = false;
float WaypointPos[3];
int WaypointEntity;
int TeleWay(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int waypoint = get_first_blip_info_id(8);
	if (does_blip_exist(waypoint)) {
		get_blip_coords(waypoint, WaypointPos);
		int myhandle = PlayerPedId(),
			myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				WaypointEntity = myvehicle;
				set_entity_coords(myvehicle, WaypointPos[0], WaypointPos[1], WaypointPos[2] + 1.5, 0, 0, 0, 1);
				load_all_objects_now();
			} else {
				WaypointEntity = myhandle;
				set_entity_coords(myhandle, WaypointPos[0], WaypointPos[1], WaypointPos[2] + 1.5, 0, 0, 0, 1);
				load_all_objects_now();
			}
			TeleportToWaypoint = true;
		}
	} else {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Please set a waypoint first!");
	}
	return 0;
}

void Waypointloop() {
	if (get_ground_z_for_3d_coord(WaypointPos[0], WaypointPos[1], 600.0f, &WaypointPos[2])) {
		set_entity_coords(WaypointEntity, WaypointPos[0], WaypointPos[1], WaypointPos[2] + 1, 0, 0, 0, 1);
		TeleportToWaypoint = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Waypoint!");
	}
}


int StripperModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x9CF26183;//0x9CF26183;

	return 0;
}

int MonkeyModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = -1026527405;//0x9CF26183;

	return 0;
}

int MonkeySpaceModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = -598109171;//0x9CF26183;

	return 0;
}


bool alienspawn = false;
int AlienModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x64611296;//0x9CF26183;
	alienspawn = true;
	return 0;
}
bool invisiblemodel = false;
int InvisibleModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x2970A494;//0x9CF26183;
	invisiblemodel = true;
	return 0;
}

int OnlineStripper(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x2970A494;//0x9CF26183;
	return 0;
}

float x10, y10, z10, x20, y20, z20, x101, y101, z101, x201, y201, z201, x30, y30, z30, x40, y40, z40;



int FlyingAnus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xB467C540;
		x10 = 0, y10 = 0, z10 = +3.9, x20 = 0, y20 = 0, z20 = 0;
		ShowMessageOnScreen("~b~ UFO Vehicle!");
		ufomode = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}
int MinBGun10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0x6AD326C2;
		x10 = 1, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~Space Rifle Car!");
		ufomode3 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int MinBGun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xFFFFFFFFC89630B8;
		x10 = 1, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~ MiniGun Car!");
		ufomode133 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int MinBGun11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0x6AD326C2;
		x10 = -1, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~ Space Rifle Car!");
		ufomode13 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int MinBGun1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xFFFFFFFFC89630B8;
		x10 = -1, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~ MiniGun Car!");
		ufomode4 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}
int MinBGun2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xFFFFFFFFC89630B8;
		x10 = -0.3, y10 = 0, z10 = 0.5, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~ MiniGun Car!");
		ufomode5 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}
int MinBGun3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xFFFFFFFFC89630B8;
		x10 = 0.3, y10 = 0, z10 = 0.5, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~ MiniGun Car!");
		ufomode6 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}
int MinBGun14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0x6AD326C2;
		x10 = -0.3, y10 = 2, z10 = 0.2, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~ Space Rifel Car!");
		ufomode14 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}
int MinBGun4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xFFFFFFFFC89630B8;
		x10 = -0.3, y10 = 2, z10 = 0.2, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~ MiniGun Car!");
		ufomode7 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int MinBGun13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0x6AD326C2;
		x10 = 0.3, y10 = 2, z10 = 0.2, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~ Space Rifle Car!");
		ufomode15 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int MinBGun5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xFFFFFFFFC89630B8;
		x10 = 0.3, y10 = 2, z10 = 0.2, x20 = 0, y20 = 0, z20 = 90;
		ShowMessageOnScreen("~b~ MiniGun Car!");
		ufomode8 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int toelitcar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0x52660DBB;
		x10 = -0.4, y10 = 0, z10 = -0.6, x20 = 0, y20 = 0, z20 = 180;
		ShowMessageOnScreen("~b~ Seat Car!");
		ufomode16 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int toelitcar1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xCAA2E334;
		x10 = 0.2, y10 = 0, z10 = -0.6, x20 = 0, y20 = 0, z20 = 180;
		ShowMessageOnScreen("~b~ Seat Car!");
		ufomode17 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}
int MinBGun6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xFFFFFFFF8D41C8BD;
		x10 = 0, y10 = 0.5, z10 = -0.44, x20 = 270, y20 = 0, z20 = 0;
		ShowMessageOnScreen("~b~ Blue Neon!");
		ufomode9 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}


int MinBGun7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xE11661;
		x10 = 0, y10 = -0.5, z10 = -0.46, x20 = 270, y20 = 0, z20 = 0;
		ShowMessageOnScreen("~b~ Red Neon!");
		ufomode10 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int MinBGun8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xFFFFFFFFCB1A9AC1;
		x10 = 0, y10 = -0.3, z10 = -0.45, x20 = 90, y20 = 0, z20 = 0;
		ShowMessageOnScreen("~b~ Orange Neon!");
		ufomode11 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int MinBGun9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0x1EA37333;
		x10 = 0, y10 = 0, z10 = -0.45, x20 = 270, y20 = 0, z20 = 0;
		ShowMessageOnScreen("~b~ Green Neon!");
		ufomode12 = true;
	} else {
		ShowMessageOnScreen("~r~ You aren't in a vehicle");
	}
	return 0;
}

int SpawnObject(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	//model = 0xBF8918DE; 
	model = -1536924937;
	return 0;
}

int SpawnWeed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 452618762;

	return 0;
}

int SpawnRamp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -1818980770;

	return 0;
}

int SpawnBody(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -1240857364;

	return 0;
}

int cam;
float rot[3];
bool cam_mode = false;
bool cam_check = false;
bool cam_load = false;
int FlyMod(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!cam_mode) {
		cam_load = true;
		cam_mode = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ First Person:~b~ON");
	} else if (cam_mode) {
		cam_mode = false;
		cam_load = false;
		set_cam_active(cam, false);
		DESTROY_CAM(cam, true);
		render_script_cams(0, 0, 3000, 1, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ First Person:~r~OFF");
	}
	return 0;
}

int Seccam1;
float SecCam1rot[3];
bool Seccam_mode = false;
bool Seccam_check = false;
bool Seccam_load = false;
int LSCSecCam(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!Seccam_mode) {
		Seccam_load = true;
		Seccam_mode = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~LSC Security Camera:~b~ON");
	} else if (Seccam_mode) {
		Seccam_mode = false;
		set_cam_active(Seccam1, false);
		DESTROY_CAM(Seccam1, true);
		render_script_cams(0, 0, 3000, 1, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~LSC Security Camera:~r~OFF");
	}
	return 0;
}

int Seccam2;
float SecCam2rot[3];
bool Seccam2_mode = false;
bool Seccam2_check = false;
bool Seccam2_load = false;
int EclipseSecCam(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!Seccam2_mode) {
		Seccam2_load = true;
		Seccam2_mode = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Eclipse Towers Security Camera:~b~ON");
	} else if (Seccam2_mode) {
		Seccam2_mode = false;
		set_cam_active(Seccam2, false);
		DESTROY_CAM(Seccam2, true);
		render_script_cams(0, 0, 3000, 1, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Eclipse Towers Security Camera:~r~OFF");
	}
	return 0;
}

int Seccam3;
float SecCam3rot[3];
bool Seccam3_mode = false;
bool Seccam3_check = false;
bool Seccam3_load = false;
int BeachSecCam(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!Seccam3_mode) {
		Seccam3_load = true;
		Seccam3_mode = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Beach Camera:~b~ON");
	} else if (Seccam3_mode) {
		Seccam3_mode = false;
		set_cam_active(Seccam3, false);
		DESTROY_CAM(Seccam3, true);
		render_script_cams(0, 0, 3000, 1, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Beach Camera:~r~OFF");
	}
	return 0;
}

int Seccam4;
float SecCam4rot[3];
bool Seccam4_mode = false;
bool Seccam4_check = false;
bool Seccam4_load = false;
int TinselSecCam(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!Seccam4_mode) {
		Seccam4_load = true;
		Seccam4_mode = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Tinsel Towers Camera:~b~ON");
	} else if (Seccam4_mode) {
		Seccam4_mode = false;
		set_cam_active(Seccam4, false);
		DESTROY_CAM(Seccam4, true);
		render_script_cams(0, 0, 3000, 1, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Tinsel Towers Camera:~r~OFF");
	}
	return 0;
}

int Seccam5;
float SecCam5rot[3];
bool Seccam5_mode = false;
bool Seccam5_check = false;
bool Seccam5_load = false;
int WeaselSecCam(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!Seccam5_mode) {
		Seccam5_load = true;
		Seccam5_mode = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Weasel Towers Camera:~b~ON");
	} else if (Seccam5_mode) {
		Seccam5_mode = false;
		set_cam_active(Seccam5, false);
		DESTROY_CAM(Seccam5, true);
		render_script_cams(0, 0, 3000, 1, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Weasel Tower Camera:~r~OFF");
	}
	return 0;
}

int Seccam6;
float SecCam6rot[3];
bool Seccam6_mode = false;
bool Seccam6_check = false;
bool Seccam6_load = false;
int MtSecCam(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!Seccam6_mode) {
		Seccam6_load = true;
		Seccam6_mode = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~MT Chiliad Camera:~b~ON");
	} else if (Seccam6_mode) {
		Seccam6_mode = false;
		set_cam_active(Seccam6, false);
		DESTROY_CAM(Seccam6, true);
		render_script_cams(0, 0, 3000, 1, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~MT Chiliad Camera:~r~OFF");
	}
	return 0;
}


void fly_car_loop() {
	if (!is_ped_on_foot(PlayerPedId())) {
		apply_force_to_entity(GetCarCharIsIn(PlayerPedId(), 0), true, 0, 100, 100, 0, 0, 0, false, true, false, false, false, true);
	}
}

bool super_check = false;
int SuperMod(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!super_check) {
		super_check = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Superman Mode Press RB To Fly:~b~ON! (No Clip)");
	} else if (super_check) {
		super_check = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Superman Mode:~r~OFF!");
	}
	return 0;
}

void super_loop() {
	set_entity_collision(PlayerPedId(), true);
	if (menuInputHandler->RightBumperDown()) {
		set_entity_collision(PlayerPedId(), false);
		GiveWeaponDelayed(PlayerPedId(), 0xFBAB5776, 1, 1);
		apply_force_to_entity(PlayerPedId(), true, 0, 1, 1, 0, 0, 0, true, true, true, true, false, true);
		SetPlayerInvincible(PlayerId(), true);
	}
}

int KD1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MPPLY_KILLS_PLAYERS"), 10000);
	set_stat_int(get_hash_key("MPPLY_DEATHS_PLAYER"), 8000);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~KD Has Been Set! (Kill A Player After To Set)");
	return 0;
}

int KD2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MPPLY_KILLS_PLAYERS"), 12000);
	set_stat_int(get_hash_key("MPPLY_DEATHS_PLAYER"), 6000);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~KD Has Been Set!");
	return 0;
}

int KD3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MPPLY_KILLS_PLAYERS"), 20000);
	set_stat_int(get_hash_key("MPPLY_DEATHS_PLAYER"), 6666);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~KD Has Been Set! (Kill A Player After To Set)");
	return 0;
}

int KD4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MPPLY_KILLS_PLAYERS"), 24000);
	set_stat_int(get_hash_key("MPPLY_DEATHS_PLAYER"), 6000);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~KD Has Been Set! (Kill A Player After To Set)");
	return 0;
}

int KD5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MPPLY_KILLS_PLAYERS"), 50000);
	set_stat_int(get_hash_key("MPPLY_DEATHS_PLAYER"), 10000);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~KD Has Been Set! (Kill A Player After To Set)");
	return 0;
}

int Rank(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_CHAR_XP_FM"), 2165850);
	return 0;
}

int Rank1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_CHAR_XP_FM"), 2165850);
	return 0;
}

int Rank3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_CHAR_XP_FM"), 4691850);
	return 0;
}

int Rank5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_CHAR_XP_FM"), 4691850);
	return 0;
}

int Rank6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_CHAR_XP_FM"), 8765850);
	return 0;
}

int Rank4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_CHAR_XP_FM"), 8765850);
	return 0;
}

int Rank420(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_CHAR_XP_FM"), 13288350);
	return 0;
}

int Rank8000(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_CHAR_XP_FM"), 9999999999);
	return 0;
}

int Rank4201(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_CHAR_XP_FM"), 13288350);
	return 0;
}

int Rank80001(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_CHAR_XP_FM"), 999999999);
	return 0;
}

int SirSmalls(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ XeSerenity Source Editor");
	return 0;
}

int Exybae(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ ExTForum.net Is Bae");
	return 0;
}

int authSnoW(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ SnoW Dah Genius with that Authentication");
	return 0;
}

int auth(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Eaqz Authentication");
	return 0;
}

int suport(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Tiny Tims Mods Tester/Seller");
	return 0;
}

int base(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ ChromexModz Menu Source");
	return 0;
}

int support(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Bati Tester/Seller");
	return 0;
}

int NoBadMP0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_BAD_SPORT_BITSET"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_OVERALL_BADSPORT"), 0);
	set_stat_int(get_hash_key("MPPLY_CHAR_IS_BADSPORT"), 0);
	set_stat_int(get_hash_key("MPPLY_OVERALL_BADSPORT"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_CHAR_IS_BADSPORT"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_BECAME_BADSPORT_NUM"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_DESTROYED_PVEHICLES"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MP0_MPPLY_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Bad Sport Has Been Removed!");
	return 0;
}


int RollsMP0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_SHOOTING_ABILITY"), 200);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Infinite Rolls and Recoil!");
	return 0;
}
int MaxMental(int selectedIndex, vector < int >  *selectedMenuIndexes, char  *itemText, void * functionParameters) {
	STATS::STAT_SET_FLOAT(get_hash_key("MP0_PLAYER_MENTAL_STATE"), 100, true);
	ShowMessageOnScreen("~y~ Maxed Mental State Takes A Few Seconds Or A Minute!");
	return 0;
}

int RollsMP2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_SHOOTING_ABILITY"), 15.000);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ More Ammo!");
	return 0;
}

int RollsMP4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_SHOOTING_ABILITY"), 1.000);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ No Recoil!");
	return 0;
}

int RollsMP3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MPPLY_VEHICLE_SELL_TIME"), 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Bypassed Sell Timer!");
	return 0;
}

int RollsMP1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_SHOOTING_ABILITY"), 150);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Infinite Rolls!");
	return 0;
}

int NoBadMP1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_BAD_SPORT_BITSET"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_WAS_I_BAD_SPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_OVERALL_BADSPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_CHAR_IS_BADSPORT"), 0);
	set_stat_int(get_hash_key("MPPLY_OVERALL_BADSPORT"), 0);
	set_stat_int(get_hash_key("MPPLY_CHAR_IS_BADSPORT"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_BECAME_BADSPORT_NUM"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_DESTROYED_PVEHICLES"), 0);
	set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MP1_MPPLY_EXPLOITS"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_1ST_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_2ND_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_3RD_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_4TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_5TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_6TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_7TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_8TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_9TH_OFFENCE"), 0);
	set_stat_int(get_hash_key("BADSPORT_NUMDAYS_10TH_OFFENCE"), 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Bad Sport Has Been Removed!");
	return 0;
}



bool drawT = false;
int DrawTool(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!drawT) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Draw Tool: ~b~ON");
		drawT = true;
	} else if (drawT) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Draw Tool: ~r~OFF");
		drawT = false;
	}
	return 0;
}

float xPos = 0.50f;
float yPos = 0.50f;
float xWidth = 0.10f;
float yLength = 0.10f;

void DrawToolMain() {
	CONTROLS::SET_INPUT_EXCLUSIVE(2, Button_X);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, Button_B);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, Button_LB);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, Button_RB);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, Dpad_Left);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, Dpad_Right);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, Dpad_Up);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, Dpad_Down);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, Button_RS);

	draw_rect(xPos, yPos, xWidth, yLength, 0, 225, 225, 255);

	if (is_control_pressed(2, Button_X)) {
		xPos -= 0.001f;;
		draw_rect(xPos, yPos, xWidth, yLength, 0, 225, 225, 255);
	}
	if (is_control_pressed(2, Button_B)) {
		xPos += 0.001f;
		draw_rect(xPos, yPos, xWidth, yLength, 0, 225, 225, 255);
	}
	if (is_control_pressed(2, Button_LB)) {
		yPos -= 0.001f;
		draw_rect(xPos, yPos, xWidth, yLength, 0, 225, 225, 255);
	}
	if (is_control_pressed(2, Button_RB)) {
		yPos += 0.001f;
		draw_rect(xPos, yPos, xWidth, yLength, 0, 225, 225, 255);
	}

	if (is_control_pressed(2, Dpad_Right)) {
		xWidth += 0.001f;
		draw_rect(xPos, yPos, xWidth, yLength, 0, 225, 225, 255);
	}
	if (is_control_pressed(2, Dpad_Left)) {
		xWidth -= 0.001f;
		draw_rect(xPos, yPos, xWidth, yLength, 0, 225, 225, 255);
	}
	if (is_control_pressed(2, Dpad_Up)) {
		yLength += 0.001f;
		draw_rect(xPos, yPos, xWidth, yLength, 0, 225, 225, 255);
	}
	if (is_control_pressed(2, Dpad_Down)) {
		yLength -= 0.001f;
		draw_rect(xPos, yPos, xWidth, yLength, 0, 225, 225, 255);
	}
	if (is_control_just_pressed(2, Button_RS)) {
		drawT = false;
	}

	PrintToScreen("X:", 0.20000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(xPos, 0.23000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);

	PrintToScreen("Y:", 0.340000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(yPos, 0.37000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);

	PrintToScreen("X2:", 0.470000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(xWidth, 0.5000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);

	PrintToScreen("Y2:", 0.620000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(yLength, 0.6500000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
}


int BypassTUTMP0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_bool(get_hash_key("MP0_NO_TUT_SPAWN"), true);
	set_stat_bool(get_hash_key("MP0_FRONT_END_JIP_UNLOCKED"), true);
	set_stat_bool(get_hash_key("MP0_FM_TRIGTUT_DONE"), true);
	set_stat_bool(get_hash_key("MP0_FM_HOLDTUT_DONE"), true);
	set_stat_bool(get_hash_key("MP0_FM_CMODTUT_DONE"), true);
	set_stat_bool(get_hash_key("MP0_FM_RACETUT_DONE"), true);
	set_stat_bool(get_hash_key("MP0_NO_MORE_TUTORIALS"), true);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Bypass Tutorial!");
	return 0;
}

int RedBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 255, mShaderG = 0, mShaderB = 0, mainAlpha = 100;
	return 0;
}

int RedBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 255, BorderG = 0, BorderB = 0, BorderA = 120;
	return 0;
}

int RedScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 255, sG = 0, sB = 0, scrollAlpha = 155;
	return 0;
}

int WhiteBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 255, mShaderG = 255, mShaderB = 255, mainAlpha = 100;
	return 0;
}

int WhiteBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 255, BorderG = 255, BorderB = 255, BorderA = 120;
	return 0;
}

int YellowBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 255, mShaderG = 255, mShaderB = 0, mainAlpha = 100;
	return 0;
}

int YellowBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 255, BorderG = 255, BorderB = 0, BorderA = 120;
	return 0;
}

int SalmonBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 240, mShaderG = 134, mShaderB = 120, mainAlpha = 100;
	return 0;
}

int SalmonBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 240, BorderG = 134, BorderB = 120, BorderA = 120;
	return 0;
}


int SalmonScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 240, sG = 134, sB = 120, scrollAlpha = 155;
	return 0;
}

int YellowScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 255, sG = 255, sB = 0, scrollAlpha = 155;
	return 0;
}

int WhiteScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 255, sG = 255, sB = 255, scrollAlpha = 155;
	return 0;
}

int CyanBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 0, mShaderG = 255, mShaderB = 255, mainAlpha = 100;
	return 0;
}

int CyanBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 0, BorderG = 255, BorderB = 255, BorderA = 120;
	return 0;
}

int CyanScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 0, sG = 255, sB = 255, scrollAlpha = 155;
	return 0;
}

int BlackScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 0, sG = 0, sB = 0, scrollAlpha = 155;
	return 0;
}

int OrangeScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 255, sG = 153, sB = 51, scrollAlpha = 155;
	return 0;
}

int GreyScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 192, sG = 192, sB = 192, scrollAlpha = 155;
	return 0;
}

int PinkScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 255, sG = 0, sB = 128, scrollAlpha = 155;
	return 0;
}

int PurpleScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 102, sG = 51, sB = 153, scrollAlpha = 155;
	return 0;
}

int GreenScroller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	sR = 103, sG = 248, sB = 33, scrollAlpha = 155;
	return 0;
}

int BlackBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 0, mShaderG = 0, mShaderB = 0, mainAlpha = 100;
	return 0;
}

int BlackBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 0, BorderG = 0, BorderB = 0, BorderA = 120;
	return 0;
}

int OrangeBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 255, mShaderG = 153, mShaderB = 51, mainAlpha = 100;
	return 0;
}

int OrangeBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 255, BorderG = 153, BorderB = 51, BorderA = 120;
	return 0;
}

int GreyBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 192, mShaderG = 192, mShaderB = 192, mainAlpha = 100;
	return 0;
}

int GreyBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 192, BorderG = 192, BorderB = 192, BorderA = 120;
	return 0;
}

int PinkBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 255, mShaderG = 0, mShaderB = 128, mainAlpha = 100;
	return 0;
}

int PinkBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 255, BorderG = 0, BorderB = 128, BorderA = 120;
	return 0;
}

int PurpleBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 102, mShaderG = 51, mShaderB = 153, mainAlpha = 100;
	return 0;
}

int PurpleBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 102, BorderG = 51, BorderB = 153, BorderA = 120;
	return 0;
}

int GreenBackground(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	mShaderR = 102, mShaderG = 248, mShaderB = 33, mainAlpha = 100;
	return 0;
}

int GreenBorder(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	BorderR = 103, BorderG = 248, BorderB = 33, BorderA = 120;
	return 0;
}

int tShaderBlack00(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	HostR = 0;
	HostG = 0;
	HostB = 0;
	HostA = 250;
	return 0;
}
int tShaderWhite00(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	HostR = 255;
	HostG = 255;
	HostB = 255;
	HostA = 250;
	return 0;
}
int tShaderCyan00(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	HostR = 0;
	HostG = 255;
	HostB = 255;
	HostA = 250;
	return 0;
}
int tShaderRed00(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	HostR = 255;
	HostG = 0;
	HostB = 0;
	HostA = 250;
	return 0;
}
int tShaderGreen00(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	HostR = 0;
	HostG = 255;
	HostB = 0;
	HostA = 250;
	return 0;
}
int tShaderOrange00(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	HostR = 255;
	HostG = 128;
	HostB = 0;
	HostA = 250;
	return 0;
}
int tShaderYellow00(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	HostR = 255;
	HostG = 255;
	HostB = 0;
	HostA = 250;
	return 0;
}
int tShaderPink00(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	HostR = 255;
	HostG = 0;
	HostB = 255;
	HostA = 250;
	return 0;
}
int tShaderPurp00(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	HostR = 102;
	HostG = 51;
	HostB = 153;
	HostA = 250;
	return 0;
}

int tShaderBlack0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SpriteR = 0;
	SpriteG = 0;
	SpriteB = 0;
	SpriteA = 250;
	return 0;
}
int tShaderWhite0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SpriteR = 255;
	SpriteG = 255;
	SpriteB = 255;
	SpriteA = 250;
	return 0;
}
int tShaderCyan0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SpriteR = 0;
	SpriteG = 255;
	SpriteB = 255;
	SpriteA = 250;
	return 0;
}
int tShaderRed0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SpriteR = 255;
	SpriteG = 0;
	SpriteB = 0;
	SpriteA = 250;
	return 0;
}
int tShaderGreen0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SpriteR = 0;
	SpriteG = 255;
	SpriteB = 0;
	SpriteA = 250;
	return 0;
}
int tShaderOrange0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SpriteR = 255;
	SpriteG = 128;
	SpriteB = 0;
	SpriteA = 250;
	return 0;
}
int tShaderYellow0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SpriteR = 255;
	SpriteG = 255;
	SpriteB = 0;
	SpriteA = 250;
	return 0;
}
int tShaderPink0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SpriteR = 255;
	SpriteG = 0;
	SpriteB = 255;
	SpriteA = 250;
	return 0;
}
int tShaderPurp0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SpriteR = 102;
	SpriteG = 51;
	SpriteB = 153;
	SpriteA = 250;
	return 0;
}

int tShaderBlack1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR = 0;
	tShaderG = 0;
	tShaderB = 0;
	titleAlpha = 161;
	return 0;
}
int tShaderWhite1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR = 255;
	tShaderG = 255;
	tShaderB = 255;
	titleAlpha = 161;
	return 0;
}
int tShaderCyan1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR = 0;
	tShaderG = 255;
	tShaderB = 255;
	titleAlpha = 161;
	return 0;
}
int tShaderRed1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR = 255;
	tShaderG = 0;
	tShaderB = 0;
	titleAlpha = 161;
	return 0;
}
int tShaderGreen1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR = 0;
	tShaderG = 255;
	tShaderB = 0;
	titleAlpha = 161;
	return 0;
}
int tShaderOrange1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR = 255;
	tShaderG = 128;
	tShaderB = 0;
	titleAlpha = 161;
	return 0;
}
int tShaderYellow1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR = 255;
	tShaderG = 255;
	tShaderB = 0;
	titleAlpha = 161;
	return 0;
}
int tShaderPink1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR = 255;
	tShaderG = 0;
	tShaderB = 255;
	titleAlpha = 161;
	return 0;
}
int PurpleBorder1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR = 102;
	tShaderG = 51;
	tShaderB = 153;
	titleAlpha = 161;
	return 0;
}

int tShaderBlack11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	TitleTextR = 0;
	TitleTextG = 0;
	TitleTextB = 0;
	return 0;
}
int tShaderWhite11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	TitleTextR = 255;
	TitleTextG = 255;
	TitleTextB = 255;
	return 0;
}
int tShaderCyan11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	TitleTextR = 0;
	TitleTextG = 255;
	TitleTextB = 255;
	return 0;
}
int tShaderRed11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	TitleTextR = 255;
	TitleTextG = 0;
	TitleTextB = 0;
	return 0;
}
int tShaderGreen11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	TitleTextR = 0;
	TitleTextG = 255;
	TitleTextB = 0;
	return 0;
}
int tShaderOrange11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	TitleTextR = 255;
	TitleTextG = 128;
	TitleTextB = 0;
	return 0;
}
int tShaderYellow11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	TitleTextR = 255;
	TitleTextG = 255;
	TitleTextB = 0;
	return 0;
}
int tShaderPink11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	TitleTextR = 255;
	TitleTextG = 0;
	TitleTextB = 255;
	return 0;
}
int PurpleBorder11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	TitleTextR = 102;
	TitleTextG = 51;
	TitleTextB = 153;
	return 0;
}

int tShaderBlack111(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	MenuTitleTextR = 0;
	MenuTitleTextG = 0;
	MenuTitleTextB = 0;
	return 0;
}
int tShaderWhite111(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	MenuTitleTextR = 255;
	MenuTitleTextG = 255;
	MenuTitleTextB = 255;
	return 0;
}
int tShaderCyan111(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	MenuTitleTextR = 0;
	MenuTitleTextG = 255;
	MenuTitleTextB = 255;
	return 0;
}
int tShaderRed111(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	MenuTitleTextR = 255;
	MenuTitleTextG = 0;
	MenuTitleTextB = 0;
	return 0;
}
int tShaderGreen111(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	MenuTitleTextR = 0;
	MenuTitleTextG = 255;
	MenuTitleTextB = 0;
	return 0;
}
int tShaderOrange111(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	MenuTitleTextR = 255;
	MenuTitleTextG = 128;
	MenuTitleTextB = 0;
	return 0;
}
int tShaderYellow111(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	MenuTitleTextR = 255;
	MenuTitleTextG = 255;
	MenuTitleTextB = 0;
	return 0;
}
int tShaderPink111(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	MenuTitleTextR = 255;
	MenuTitleTextG = 0;
	MenuTitleTextB = 255;
	return 0;
}
int PurpleBorder111(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	MenuTitleTextR = 102;
	MenuTitleTextG = 51;
	MenuTitleTextB = 153;
	return 0;
}

int tShaderBlack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR1 = 0;
	tShaderG2 = 0;
	tShaderB3 = 0;
	titleAlpha2 = 210;
	return 0;
}

int tShaderWhite(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR1 = 255;
	tShaderG2 = 255;
	tShaderB3 = 255;
	titleAlpha2 = 210;
	return 0;
}
int tShaderCyan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR1 = 0;
	tShaderG2 = 255;
	tShaderB3 = 255;
	titleAlpha2 = 210;
	return 0;
}
int tShaderRed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR1 = 255;
	tShaderG2 = 0;
	tShaderB3 = 0;
	titleAlpha2 = 210;
	return 0;
}
int tShaderGreen(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR1 = 103;
	tShaderG2 = 248;
	tShaderB3 = 33;
	titleAlpha2 = 210;
	return 0;
}
int tShaderOrange(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR1 = 255;
	tShaderG2 = 128;
	tShaderB3 = 0;
	titleAlpha2 = 210;
	return 0;
}
int tShaderYellow(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR1 = 255;
	tShaderG2 = 255;
	tShaderB3 = 0;
	titleAlpha2 = 210;
	return 0;
}
int tShaderPink(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR1 = 255;
	tShaderG2 = 0;
	tShaderB3 = 255;
	titleAlpha2 = 210;
	return 0;
}
int tShaderPurp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tShaderR1 = 102;
	tShaderG2 = 51;
	tShaderB3 = 153;
	titleAlpha2 = 210;
	return 0;
}
///////Menu Position Below
int MenuRightSide(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	x1 = 0.81f;
	staticItemX = 0.7000f;
	menuTitlef = 0.8650f;
	return 0;
}
int MenuLeftSide(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	x1 = 0.19f;
	staticItemX = 0.07f;
	menuTitlef = 0.1925;
	return 0;
}
int MenuCenter(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 6;
	titlefont = 4;

	tShaderR = 0;
	tShaderG = 0;
	tShaderB = 0;

	tShaderR1 = 0;
	tShaderG2 = 0;
	tShaderB3 = 0;

	TitleTextR = 240;
	TitleTextG = 15;
	TitleTextB = 20;
	TitleTextA = 255;


	TitleTextA = 255;
	MenuTitleTextR = 240;
	MenuTitleTextG = 15;
	MenuTitleTextB = 20;
	MenuTitleTextA = 255;

	mShaderR = 0;
	mShaderG = 0;
	mShaderB = 0;

	mShaderR2 = 0;
	mShaderG2 = 0;
	mShaderB2 = 0;

	BShaderR = 255;
	BShaderG = 0;
	BShaderB = 0;

	tR = 255;
	tG = 0;
	tB = 0;

	iR = 255;
	iG = 255;
	iB = 255;

	sR = 255;
	sG = 255;
	sB = 255;
	SpriteAlpha = 255;

	BorderR = 240;
	BorderG = 15;
	BorderB = 20;
	BorderA = 255;
	x1 = 0.81f;
	staticItemX = 0.7000f;
	staticItemY = 0.2f;
	BAlpha = 255;
	mainAlpha = 110;
	titleAlpha = 255;
	titleAlpha2 = 255;
	scrollAlpha = 255;
	return 0;
}
int Pinklayout(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 6;
	titlefont = 4;

	tShaderR = 166;
	tShaderG = 6;
	tShaderB = 216;

	tShaderR1 = 102;
	tShaderG2 = 51;
	tShaderB3 = 153;

	TitleTextR = 255;
	TitleTextG = 255;
	TitleTextB = 255;
	TitleTextA = 255;
	MenuTitleTextR = 255;
	MenuTitleTextG = 255;
	MenuTitleTextB = 255;
	MenuTitleTextA = 255;

	mShaderR = 102;
	mShaderG = 51;
	mShaderB = 153;

	mShaderR2 = 102;
	mShaderG2 = 51;
	mShaderB2 = 153;

	BShaderR = 166;
	BShaderG = 6;
	BShaderB = 216;

	tR = 255;
	tG = 0;
	tB = 0;

	iR = 255;
	iG = 255;
	iB = 255;

	HostR = 102;
	HostG = 51;
	HostB = 153;

	sR = 192;
	sG = 192;
	sB = 192;

	SpriteR = 228;
	SpriteG = 166;
	SpriteB = 234;
	SpriteAlpha = 250;

	BorderR = 166;
	BorderG = 6;
	BorderB = 216;
	BorderA = 120;
	x1 = 0.81f;
	staticItemX = 0.7000f;
	staticItemY = 0.2f;
	BAlpha = 255;
	mainAlpha = 100;
	titleAlpha = 161;
	titleAlpha2 = 210;
	scrollAlpha = 155;
	return 0;
}


int DefaultMenu(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 6;
	titlefont = 4;

	tShaderR = 0;
	tShaderG = 0;
	tShaderB = 0;

	tShaderR1 = 64;
	tShaderG2 = 159;
	tShaderB3 = 255;

	TitleTextR = 15;
	TitleTextG = 129;
	TitleTextB = 255;
	TitleTextA = 255;
	MenuTitleTextR = 255;
	MenuTitleTextG = 255;
	MenuTitleTextB = 255;
	MenuTitleTextA = 255;

	mShaderR = 0;
	mShaderG = 0;
	mShaderB = 0;

	mShaderR2 = 0;
	mShaderG2 = 0;
	mShaderB2 = 0;

	BShaderR = 255;
	BShaderG = 0;
	BShaderB = 0;

	tR = 255;
	tG = 0;
	tB = 0;

	iR = 255;
	iG = 255;
	iB = 255;

	sR = 255;
	sG = 255;
	sB = 255;
	SpriteAlpha = 250;

	BorderR = 15;
	BorderG = 129;
	BorderB = 255;
	BorderA = 120;
	x1 = 0.81f;
	staticItemX = 0.7000f;
	staticItemY = 0.2f;
	BAlpha = 255;
	mainAlpha = 100;
	titleAlpha = 161;
	titleAlpha2 = 210;
	scrollAlpha = 155;
	return 0;
}

int DefaultMenu1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 6;
	titlefont = 4;

	tShaderR = 0;
	tShaderG = 0;
	tShaderB = 0;

	tShaderR1 = 0;
	tShaderG2 = 0;
	tShaderB3 = 0;

	TitleTextR = 240;
	TitleTextG = 15;
	TitleTextB = 20;
	TitleTextA = 255;


	TitleTextA = 255;
	MenuTitleTextR = 240;
	MenuTitleTextG = 15;
	MenuTitleTextB = 20;
	MenuTitleTextA = 255;

	mShaderR = 0;
	mShaderG = 0;
	mShaderB = 0;

	mShaderR2 = 0;
	mShaderG2 = 0;
	mShaderB2 = 0;

	BShaderR = 255;
	BShaderG = 0;
	BShaderB = 0;

	tR = 255;
	tG = 0;
	tB = 0;

	iR = 255;
	iG = 255;
	iB = 255;

	sR = 255;
	sG = 255;
	sB = 255;
	SpriteAlpha = 250;

	BorderR = 240;
	BorderG = 15;
	BorderB = 20;
	BorderA = 120;
	x1 = 0.81f;
	staticItemX = 0.7000f;
	staticItemY = 0.2f;
	BAlpha = 255;
	mainAlpha = 100;
	titleAlpha = 161;
	titleAlpha2 = 210;
	scrollAlpha = 155;
	return 0;
}

int DefaultMenu2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 6;
	titlefont = 4;

	tShaderR = 60;
	tShaderG = 60;
	tShaderB = 60;

	tShaderR1 = 0;
	tShaderG2 = 0;
	tShaderB3 = 0;

	TitleTextR = 255;
	TitleTextG = 255;
	TitleTextB = 255;
	TitleTextA = 255;
	SpriteAlpha = 250;


	TitleTextA = 255;
	MenuTitleTextR = 255;
	MenuTitleTextG = 255;
	MenuTitleTextB = 255;
	MenuTitleTextA = 255;

	mShaderR = 0;
	mShaderG = 0;
	mShaderB = 0;

	mShaderR2 = 0;
	mShaderG2 = 0;
	mShaderB2 = 0;

	BShaderR = 103;
	BShaderG = 248;
	BShaderB = 33;

	tR = 255;
	tG = 0;
	tB = 0;

	iR = 255;
	iG = 255;
	iB = 255;

	sR = 0;
	sG = 0;
	sB = 0;
	SpriteAlpha = 250;

	BorderR = 103;
	BorderG = 248;
	BorderB = 33;
	BorderA = 120;
	x1 = 0.81f;
	staticItemX = 0.7000f;
	staticItemY = 0.2f;
	BAlpha = 255;
	mainAlpha = 100;
	titleAlpha = 161;
	titleAlpha2 = 210;
	scrollAlpha = 155;
	return 0;
}

int tBlack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tR = 0;
	tG = 0;
	tB = 0;
	return 0;
}
int tWhite(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tR = 255;
	tG = 255;
	tB = 255;
	return 0;
}
int tCyan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tR = 0;
	tG = 255;
	tB = 255;
	return 0;
}
int tRed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tR = 255;
	tG = 0;
	tB = 0;
	return 0;
}
int tGreen(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tR = 103;
	tG = 248;
	tB = 33;
	return 0;
}
int tOrange(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tR = 255;
	tG = 128;
	tB = 0;
	return 0;
}
int tYellow(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tR = 255;
	tG = 255;
	tB = 0;
	return 0;
}
int tPink(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tR = 255;
	tG = 0;
	tB = 255;
	return 0;
}
int tPurp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	tR = 102;
	tG = 51;
	tB = 153;
	return 0;
}
int TitleFont0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont = 0;
	return 0;
}
int TitleFont1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont = 1;
	return 0;
}

int TitleFont2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont = 2;
	return 0;
}

int TitleFont3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont = 3;
	return 0;
}

int TitleFont4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont = 4;
	return 0;
}

int TitleFont5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont = 5;
	return 0;
}

int TitleFont6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont = 6;
	return 0;
}

int TitleFont7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont = 7;
	return 0;
}

int TitleFont01(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont1 = 0;
	return 0;
}
int TitleFont11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont1 = 1;
	return 0;
}

int TitleFont21(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont1 = 2;
	return 0;
}

int TitleFont31(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont1 = 3;
	return 0;
}

int TitleFont41(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont1 = 4;
	return 0;
}

int TitleFont51(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont1 = 5;
	return 0;
}

int TitleFont61(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont1 = 6;
	return 0;
}

int TitleFont71(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	titlefont1 = 7;
	return 0;
}

int ItemFont0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 0;
	return 0;
}

int ItemFont1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 1;
	return 0;
}

int ItemFont2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 2;
	return 0;
}

int ItemFont3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 3;
	return 0;
}

int ItemFont4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 4;
	return 0;
}

int ItemFont5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 5;
	return 0;
}

int ItemFont6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 6;
	return 0;
}

int ItemFont7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	itemfont = 7;
	return 0;
}
int BypassTUTMP1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_bool(get_hash_key("MP1_NO_TUT_SPAWN"), true);
	set_stat_bool(get_hash_key("MP1_FRONT_END_JIP_UNLOCKED"), true);
	set_stat_bool(get_hash_key("MP1_FM_TRIGTUT_DONE"), true);
	set_stat_bool(get_hash_key("MP1_FM_HOLDTUT_DONE"), true);
	set_stat_bool(get_hash_key("MP1_FM_CMODTUT_DONE"), true);
	set_stat_bool(get_hash_key("MP1_FM_RACETUT_DONE"), true);
	set_stat_bool(get_hash_key("MP1_NO_MORE_TUTORIALS"), true);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Bypassed Tutorial!");
	return 0;
}



int MaxSnacks0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_NO_BOUGHT_YUM_SNACKS"), 99999999);
	set_stat_int(get_hash_key("MP0_NO_BOUGHT_HEALTH_SNACKS"), 99999999);
	set_stat_int(get_hash_key("MP0_NO_BOUGHT_EPIC_SNACKS"), 99999999);
	set_stat_int(get_hash_key("MP0_CIGARETTES_BOUGHT"), 99999999);
	set_stat_int(get_hash_key("MP0_NUMBER_OF_ORANGE_BOUGHT"), 99999999);
	set_stat_int(get_hash_key("MP0_NUMBER_OF_BOURGE_BOUGHT"), 99999999);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max Snacks Unlocked!");
	return 0;
}

int MaxSnacks1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_NO_BOUGHT_YUM_SNACKS"), 99999999);
	set_stat_int(get_hash_key("MP1_NO_BOUGHT_HEALTH_SNACKS"), 99999999);
	set_stat_int(get_hash_key("MP1_NO_BOUGHT_EPIC_SNACKS"), 99999999);
	set_stat_int(get_hash_key("MP1_CIGARETTES_BOUGHT"), 99999999);
	set_stat_int(get_hash_key("MP1_NUMBER_OF_ORANGE_BOUGHT"), 99999999);
	set_stat_int(get_hash_key("MP1_NUMBER_OF_BOURGE_BOUGHT"), 99999999);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max Snacks Unlocked!");
	return 0;
}


int MaxArmour0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_CHAR_ARMOUR_1_COUNT"), 9999);
	set_stat_int(get_hash_key("MP0_CHAR_ARMOUR_2_COUNT"), 9999);
	set_stat_int(get_hash_key("MP0_CHAR_ARMOUR_3_COUNT"), 9999);
	set_stat_int(get_hash_key("MP0_CHAR_ARMOUR_4_COUNT"), 9999);
	set_stat_int(get_hash_key("MP0_CHAR_ARMOUR_5_COUNT"), 9999);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max Amours Unlocked!");
	return 0;
}

int MaxArmour1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_CHAR_ARMOUR_1_COUNT"), 9999);
	set_stat_int(get_hash_key("MP1_CHAR_ARMOUR_2_COUNT"), 9999);
	set_stat_int(get_hash_key("MP1_CHAR_ARMOUR_3_COUNT"), 9999);
	set_stat_int(get_hash_key("MP1_CHAR_ARMOUR_4_COUNT"), 9999);
	set_stat_int(get_hash_key("MP1_CHAR_ARMOUR_5_COUNT"), 9999);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max Amours Unlocked!");
	return 0;
}



int HeistStuff0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE2"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE3"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE4"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE5"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE6"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE7"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE8"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE9"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE10"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE11"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE12"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_1_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_2_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_3_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_4_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_5_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_6_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_7_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_8_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_9_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_10_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_11_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_KIT_12_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_races_won"), 100);
	set_stat_int(get_hash_key("MP0_number_turbo_starts_in_race"), 100);
	set_stat_int(get_hash_key("MP0_usjs_found"), 50);
	set_stat_int(get_hash_key("MP0_usjs_completed"), 50);
	set_stat_int(get_hash_key("MP0_awd_fmwinairrace"), 50);
	set_stat_int(get_hash_key("MP0_awd_fmwinsearace"), 50);
	set_stat_int(get_hash_key("MP0_awd_fmrallywonnav"), 50);
	set_stat_int(get_hash_key("MP0_awd_fmrallywondrive "), 500);
	set_stat_int(get_hash_key("MP0_awd_fm_races_fastest_lap"), 500);
	set_stat_int(get_hash_key("MP0_char_fm_carmod_0_unlck"), -1);
	set_stat_int(get_hash_key("MP0_char_fm_carmod_1_unlck"), -1);
	set_stat_int(get_hash_key("MP0_char_fm_carmod_2_unlck"), -1);
	set_stat_int(get_hash_key("MP0_char_fm_carmod_3_unlck"), -1);
	set_stat_int(get_hash_key("MP0_char_fm_carmod_4_unlck"), -1);
	set_stat_int(get_hash_key("MP0_char_fm_carmod_5_unlck"), -1);
	set_stat_int(get_hash_key("MP0_char_fm_carmod_6_unlck"), -1);
	set_stat_int(get_hash_key("MP0_char_fm_carmod_7_unlck"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_VEHICLE_1_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_VEHICLE_2_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_ABILITY_1_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_ABILITY_2_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_ABILITY_3_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_PACKAGE_1_COLLECT"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_PACKAGE_2_COLLECT"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_PACKAGE_3_COLLECT"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_PACKAGE_4_COLLECT"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_PACKAGE_5_COLLECT"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_PACKAGE_6_COLLECT"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_PACKAGE_7_COLLECT"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_PACKAGE_8_COLLECT"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_PACKAGE_9_COLLECT"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_HEALTH_1_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_CHAR_FM_HEALTH_2_UNLCK"), -1);
	set_stat_int(get_hash_key("MP0_HOLDUPS_BITSET"), -1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Heist Stuff Unlocked!");
	return 0;
}

int Hair1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_7"), -1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~All HairStyles Unlocked!");
	return 0;
}

int ClothesCharacter1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_FEET_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_HAIR_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_JBIB"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_JBIB_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_JBIB_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_JBIB_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_JBIB_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_JBIB_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_JBIB_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_JBIB_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_LEGS"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_LEGS_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_LEGS_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_LEGS_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_LEGS_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_LEGS_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_LEGS_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_LEGS_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_FEET"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_FEET_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_FEET_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_FEET_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_FEET_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_FEET_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_FEET_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_FEET_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_BERD"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_BERD_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_BERD_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_BERD_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_BERD_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_BERD_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_BERD_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_BERD_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_8"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_9"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_PROPS_10"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_OUTFIT"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_HAIR"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_HAIR_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_HAIR_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_HAIR_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_HAIR_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_HAIR_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_HAIR_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_HAIR_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_JBIB"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_JBIB_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_JBIB_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_JBIB_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_JBIB_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_JBIB_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_JBIB_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_JBIB_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_LEGS"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_LEGS_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_LEGS_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_LEGS_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_LEGS_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_LEGS_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_LEGS_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_LEGS_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_FEET"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_FEET_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_FEET_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_FEET_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_FEET_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_FEET_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_FEET_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_FEET_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_BERD"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_BERD_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_BERD_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_BERD_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_BERD_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_BERD_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_BERD_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_BERD_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_8"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_9"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_PROPS_10"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_OUTFIT"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_TORSO"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_SPECIAL2_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_DECL"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_TEETH"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_TEETH_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_AVAILABLE_TEETH_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_TORSO"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL_2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL_3"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL_4"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL_5"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL_6"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL_7"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL2"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_SPECIAL2_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_DECL"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_TEETH"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_TEETH_1"), -1);
	set_stat_int(get_hash_key("MP0_CLTHS_ACQUIRED_TEETH_2"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_0"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_1"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_2"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_3"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_4"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_5"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_6"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_7"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_8"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_9"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_10"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_11"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_12"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_13"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_14"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_15"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_16"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_17"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_18"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_19"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_21"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_22"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_23"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_24"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_24"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_25"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_26"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_27"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_28"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_29"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_30"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_31"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_32"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_33"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_34"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_35"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_36"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_37"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_38"), -1);
	set_stat_int(get_hash_key("MP0_DLC`_APPAREL_ACQUIRED_39"), -1);
	set_stat_int(get_hash_key("MP0_DLC_APPAREL_ACQUIRED_40"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_1"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_2"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_3"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_4"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_5"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_6"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_7"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_8"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_9"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_10"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_11"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_12"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_13"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_1"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_10"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_11"), -1);
	set_stat_int(get_hash_key("MP0_ADMIN_CLOTHES_GV_BS_12"), -1);
	set_stat_int(get_hash_key("MP0_AWD_FMHORDWAVESSURVIVE"), 10);
	set_stat_int(get_hash_key("MP0_AWD_FMPICKUPDLCCRATE1ST"), 1);
	set_stat_int(get_hash_key("MP0_AWD_WIN_CAPTURE_DONT_DYING"), 25);
	set_stat_int(get_hash_key("MP0_AWD_DO_HEIST_AS_MEMBER"), 25);
	set_stat_int(get_hash_key("MP0_AWD_PICKUP_CAP_PACKAGES"), 100);
	STAT_SET_BOOL(get_hash_key("MP0_AWD_FINISH_HEIST_NO_DAMAGE"), 1, 1);
	set_stat_int(get_hash_key("MP0_AWD_WIN_GOLD_MEDAL_HEISTS"), 25);
	set_stat_int(get_hash_key("MP0_AWD_KILL_TEAM_YOURSELF_LTS"), 25);
	set_stat_int(get_hash_key("MP0_AWD_KILL_PSYCHOPATHS"), 100);
	set_stat_int(get_hash_key("MP0_AWD_DO_HEIST_AS_THE_LEADER"), 25);
	STAT_SET_BOOL(get_hash_key("MP0_AWD_STORE_20_CAR_IN_GARAGES"), 1, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~All Clothes Unlocked!");
	return 0;
}

int HeistStuff1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE2"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE3"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE4"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE5"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE6"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE7"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE8"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE9"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE10"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE11"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE12"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_1_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_2_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_3_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_4_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_5_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_6_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_7_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_8_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_9_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_10_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_11_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_KIT_12_FM_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_races_won"), 100);
	set_stat_int(get_hash_key("MP1_number_turbo_starts_in_race"), 100);
	set_stat_int(get_hash_key("MP1_usjs_found"), 50);
	set_stat_int(get_hash_key("MP1_usjs_completed"), 50);
	set_stat_int(get_hash_key("MP1_awd_fmwinairrace"), 50);
	set_stat_int(get_hash_key("MP1_awd_fmwinsearace"), 50);
	set_stat_int(get_hash_key("MP1_awd_fmrallywonnav"), 50);
	set_stat_int(get_hash_key("MP1_awd_fmrallywondrive "), 500);
	set_stat_int(get_hash_key("MP1_awd_fm_races_fastest_lap"), 500);
	set_stat_int(get_hash_key("MP1_char_fm_carmod_0_unlck"), -1);
	set_stat_int(get_hash_key("MP1_char_fm_carmod_1_unlck"), -1);
	set_stat_int(get_hash_key("MP1_char_fm_carmod_2_unlck"), -1);
	set_stat_int(get_hash_key("MP1_char_fm_carmod_3_unlck"), -1);
	set_stat_int(get_hash_key("MP1_char_fm_carmod_4_unlck"), -1);
	set_stat_int(get_hash_key("MP1_char_fm_carmod_5_unlck"), -1);
	set_stat_int(get_hash_key("MP1_char_fm_carmod_6_unlck"), -1);
	set_stat_int(get_hash_key("MP1_char_fm_carmod_7_unlck"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_VEHICLE_1_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_VEHICLE_2_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_ABILITY_1_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_ABILITY_2_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_ABILITY_3_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_PACKAGE_1_COLLECT"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_PACKAGE_2_COLLECT"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_PACKAGE_3_COLLECT"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_PACKAGE_4_COLLECT"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_PACKAGE_5_COLLECT"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_PACKAGE_6_COLLECT"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_PACKAGE_7_COLLECT"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_PACKAGE_8_COLLECT"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_PACKAGE_9_COLLECT"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_HEALTH_1_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_CHAR_FM_HEALTH_2_UNLCK"), -1);
	set_stat_int(get_hash_key("MP1_HOLDUPS_BITSET"), -1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Heist Stuff Unlocked!");
	return 0;
}


int MaxArmors(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_MP_CHAR_ARMOUR_1_COUNT"), 2147483647);
	set_stat_int(get_hash_key("MP0_MP_CHAR_ARMOUR_2_COUNT"), 2147483647);
	set_stat_int(get_hash_key("MP0_MP_CHAR_ARMOUR_3_COUNT"), 2147483647);
	set_stat_int(get_hash_key("MP0_MP_CHAR_ARMOUR_4_COUNT"), 2147483647);
	set_stat_int(get_hash_key("MP0_MP_CHAR_ARMOUR_5_COUNT"), 2147483647);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max Armours!");
	return 0;
}

int MaxWorks(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_1_WHITE"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_1_RED"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_1_BLUE"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_2_WHITE"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_2_RED"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_2_BLUE"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_3_WHITE"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_3_RED"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_3_BLUE"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_4_WHITE"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_4_RED"), 500000);
	set_stat_int(get_hash_key("MP0_FIREWORK_TYPE_4_BLUE"), 500000);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max FireWorks!");
	return 0;
}

int MaxWorks2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_1_WHITE"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_1_RED"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_1_BLUE"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_2_WHITE"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_2_RED"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_2_BLUE"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_3_WHITE"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_3_RED"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_3_BLUE"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_4_WHITE"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_4_RED"), 500000);
	set_stat_int(get_hash_key("MP1_FIREWORK_TYPE_4_BLUE"), 500000);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max FireWorks!");
	return 0;
}

int MaxArmorsCharacter2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_MP_CHAR_ARMOUR_1_COUNT"), 2147483647);
	set_stat_int(get_hash_key("MP1_MP_CHAR_ARMOUR_2_COUNT"), 2147483647);
	set_stat_int(get_hash_key("MP1_MP_CHAR_ARMOUR_3_COUNT"), 2147483647);
	set_stat_int(get_hash_key("MP1_MP_CHAR_ARMOUR_4_COUNT"), 2147483647);
	set_stat_int(get_hash_key("MP1_MP_CHAR_ARMOUR_5_COUNT"), 2147483647);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max Armours!");
	return 0;
}

int WeaponsChar2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	STAT_SET_INT(get_hash_key("MP1_ADMIN_WEAPON_GV_BS_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_WEAPON_GV_BS_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_WEAPON_GV_BS_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_BOTTLE_IN_POSSESSION"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_WEAP_UNLOCKED"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_WEAP_UNLOCKED2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CHAR_WEAP_FM_PURCHASE"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CHAR_WEAP_FM_PURCHASE2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_WEAP_ADDON_1_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_WEAP_ADDON_2_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_WEAP_ADDON_3_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_WEAP_ADDON_4_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_WEAP_ADDON_5_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_WEAP_FM_ADDON_PURCH"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_WEAP_FM_ADDON_PURCH2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_WEAP_FM_ADDON_PURCH3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_WEAP_FM_ADDON_PURCH4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_WEAP_FM_ADDON_PURCH5"), -1, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Unlocked All Weapons!");
	return 0;
}

int Redesign1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	STAT_SET_BOOL(get_hash_key("MP0_FM_CHANGECHAR_ASKED"), 0, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Redesign Character! Restart GTAV!");
	return 0;
}

int Redesign2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	STAT_SET_BOOL(get_hash_key("MP1_FM_CHANGECHAR_ASKED"), 0, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Redesign Character! Restart GTAV!");
	return 0;
}

int MaxSnacks(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP0_NO_BOUGHT_YUM_SNACKS"), 2147483647);
	set_stat_int(get_hash_key("MP0_NO_BOUGHT_HEALTH_SNACKS"), 2147483647);
	set_stat_int(get_hash_key("MP0_NO_BOUGHT_EPIC_SNACKS"), 2147483647);
	set_stat_int(get_hash_key("MP0_CIGARETTES_BOUGHT"), 2147483647);
	set_stat_int(get_hash_key("MP0_NUMBER_OF_BOURGE_BOUGHT"), 2147483647);
	set_stat_int(get_hash_key("MP0_NUMBER_OF_ORANGE_BOUGHT"), 2147483647);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max Snacks");
	return 0;
}

int WeaponsChar1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	STAT_SET_INT(get_hash_key("MP0_ADMIN_WEAPON_GV_BS_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_ADMIN_WEAPON_GV_BS_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_ADMIN_WEAPON_GV_BS_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_BOTTLE_IN_POSSESSION"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_WEAP_UNLOCKED"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_WEAP_UNLOCKED2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_CHAR_WEAP_FM_PURCHASE"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_CHAR_WEAP_FM_PURCHASE2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_WEAP_ADDON_1_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_WEAP_ADDON_2_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_WEAP_ADDON_3_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_WEAP_ADDON_4_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_WEAP_ADDON_5_UNLCK"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_WEAP_FM_ADDON_PURCH"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_WEAP_FM_ADDON_PURCH2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_WEAP_FM_ADDON_PURCH3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_WEAP_FM_ADDON_PURCH4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP0_WEAP_FM_ADDON_PURCH5"), -1, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~All Weapons Unlocked!");
	return 0;
}

int HeistsVehiclesCharacter1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE2"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE3"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE4"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE5"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE6"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE7"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE8"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE9"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE10"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE11"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_FM_PURCHASE12"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_1_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_2_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_3_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_4_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_5_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_6_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_7_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_8_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_9_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_10_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_11_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_KIT_12_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_races_won"), 100, 0);
	STAT_SET_INT(get_hash_key("MP0_number_turbo_starts_in_race"), 100, 0);
	STAT_SET_INT(get_hash_key("MP0_usjs_found"), 50, 0);
	STAT_SET_INT(get_hash_key("MP0_usjs_completed"), 50, 0);
	STAT_SET_INT(get_hash_key("MP0_awd_fmwinairrace"), 50, 0);
	STAT_SET_INT(get_hash_key("MP0_awd_fmwinsearace"), 50, 0);
	STAT_SET_INT(get_hash_key("MP0_awd_fmrallywonnav"), 50, 0);
	STAT_SET_INT(get_hash_key("MP0_awd_fmrallywondrive"), 500, 0);
	STAT_SET_INT(get_hash_key("MP0_awd_fm_races_fastest_lap"), 500, 0);
	STAT_SET_INT(get_hash_key("MP0_char_fm_carmod_0_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_char_fm_carmod_1_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_char_fm_carmod_2_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_char_fm_carmod_3_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_char_fm_carmod_4_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_char_fm_carmod_5_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_char_fm_carmod_6_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_char_fm_carmod_7_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_VEHICLE_1_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_VEHICLE_2_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_ABILITY_1_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_ABILITY_2_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_ABILITY_3_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_PACKAGE_1_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_PACKAGE_2_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_PACKAGE_3_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_PACKAGE_4_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_PACKAGE_5_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_PACKAGE_6_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_PACKAGE_7_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_PACKAGE_8_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_PACKAGE_9_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_HEALTH_1_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_CHAR_FM_HEALTH_2_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP0_HOLDUPS_BITSET"), -1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Heist Vehicles Unlocked!");
	return 0;
}

int UnlockAllMP0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//skills
	set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_STAM"), 100);
	set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_STRN"), 150);
	set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_LUNG"), 150);
	set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_DRIV"), 150);
	set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_FLY"), 150);
	set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_SHO"), 150);
	set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_STL"), 150);
	//Weapons
	set_stat_int(get_hash_key("MP0_RACES_WON"), 100);
	set_stat_int(get_hash_key("MP0_PISTOL_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_CMBTPISTOL_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_APPISTOL_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_MICROSMG_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_SMG_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTSMG_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTRIFLE_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_CRBNRIFLE_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ADVRIFLE_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_HVYSNIPER_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_SNIPERRFL_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTSHTGN_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_PUMP_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_GRNLAUNCH_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_RPG_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_MINIGUNS_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTSMG_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTRIFLE_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_CRBNRIFLE_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ADVRIFLE_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_HVYSNIPER_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_SNIPERRFL_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_MG_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_CMBTMG_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_PISTOL_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_CMBTPISTOL_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_APPISTOL_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_MICROSMG_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_SMG_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTSMG_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTRIFLE_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_CRBNRIFLE_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ADVRIFLE_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_HVYSNIPER_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_SNIPERRFL_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTSHTGN_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_PUMP_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_GRNLAUNCH_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_RPG_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_MINIGUNS_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTSMG_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ASLTRIFLE_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_CRBNRIFLE_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_ADVRIFLE_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_HVYSNIPER_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_SNIPERRFL_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_MG_ENEMY_KILLS"), 1337);
	set_stat_int(get_hash_key("MP0_CMBTMG_ENEMY_KILLS"), 1337);

	//Other Unlocks ( All Account)
	set_stat_bool(get_hash_key("MP0_AWD_FMRACEWORLDRECHOLDER"), 513);
	set_stat_int(get_hash_key("MP0_AWD_ENEMYDRIVEBYKILLS"), 600);
	set_stat_int(get_hash_key("USJS_COMPLETED"), 600);
	set_stat_int(get_hash_key("_usjs_found_mask"), 600);
	set_stat_bool(get_hash_key("MP0_AWD_FMWINALLRACEMODES"), 420);
	set_stat_bool(get_hash_key("MP0_AWD_FMWINEVERYGAMEMODE"), 420);
	set_stat_int(get_hash_key("DB_PLAYER_KILLS"), 1000);
	set_stat_int(get_hash_key("MP0_AWD_FMHORDWAVESSURVIVE"), 21);
	set_stat_int(get_hash_key("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25);
	set_stat_int(get_hash_key("MP0_AWD_FM_TDM_MVP"), 60);
	set_stat_int(get_hash_key("MP0_awd_hold_up_shops"), 20);
	set_stat_int(get_hash_key("MP0_awd_races_won"), 101);
	set_stat_int(get_hash_key("MP0_AWD_NO_ARMWRESTLING_WINS"), 21);
	set_stat_bool(get_hash_key("MP0_awd_fmattganghq"), 1);
	set_stat_int(get_hash_key("MP0_AWD_FMBBETWIN"), 50000);
	set_stat_int(get_hash_key("MP0_awd_fm_dm_wins"), 567);
	STAT_SET_INT(get_hash_key("MP0_awd_fm_dm_killstreak"), 22, 0);
	set_stat_bool(get_hash_key("MP0_AWD_FMFULLYMODDEDCAR"), 312);
	set_stat_int(get_hash_key("MP0_awd_fm_dm_totalkills"), 623);
	set_stat_int(get_hash_key("MPPLY_DM_TOTAL_DEATHS"), 112);
	set_stat_int(get_hash_key("MPPLY_TIMES_FINISH_DM_TOP_3"), 336);
	set_stat_int(get_hash_key("MP0_awd_100_headshots"), 666);
	set_stat_int(get_hash_key("MP0_PLAYER_SHOTS"), 44622);
	set_stat_int(get_hash_key("MP0_PLAYER_HITS"), 44513);
	set_stat_int(get_hash_key("MP0_AWD_FM_DM_WINS"), 463);
	set_stat_int(get_hash_key("MP0_AWD_FM_TDM_WINS"), 113);
	set_stat_int(get_hash_key("MP0_AWD_FM_GTA_RACES_WON"), 12);
	set_stat_int(get_hash_key("MP0_AWD_FM_GOLF_WON"), 1562);
	set_stat_int(get_hash_key("MP0_AWD_FM_SHOOTRANG_TG_WON"), 2311);
	set_stat_int(get_hash_key("MP0_AWD_FM_SHOOTRANG_RT_WON"), 3265);
	set_stat_int(get_hash_key("MP0_AWD_FM_SHOOTRANG_CT_WON"), 1145);
	set_stat_int(get_hash_key("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 2163);
	set_stat_int(get_hash_key("MP0_AWD_FM_TENNIS_WON"), 865);
	set_stat_int(get_hash_key("MPPLY_TENNIS_MATCHES_WON"), 231);
	set_stat_int(get_hash_key("MPPLY_TOTAL_TDEATHMATCH_WON"), 458);
	set_stat_int(get_hash_key("MPPLY_TOTAL_RACES_WON"), 101);
	set_stat_int(get_hash_key("MPPLY_TOTAL_DEATHMATCH_LOST"), 128);
	set_stat_int(get_hash_key("MPPLY_TOTAL_RACES_LOST"), 36);
	set_stat_int(get_hash_key("MP0_AWD_25_KILLS_STICKYBOMBS"), 50);
	set_stat_int(get_hash_key("MP0_AWD_50_KILLS_GRENADES"), 50);
	set_stat_int(get_hash_key("GRENADE_ENEMY_KILLS"), 50);
	set_stat_int(get_hash_key("MP0_AWD_20_KILLS_MELEE"), 204);
	set_stat_bool(get_hash_key("MP0_awd_fmmostkillssurvive"), 256);
	set_stat_int(get_hash_key("MP0_awd_fmrallywondrive"), 221);
	set_stat_int(get_hash_key("MP0_awd_fmwinsearace"), 212);
	set_stat_int(get_hash_key("MP0_awd_fmwinairrace"), 213);
	set_stat_int(get_hash_key("MPPLY_TIMES_RACE_BEST_LAP"), 453);
	set_stat_int(get_hash_key("NUMBER_TURBO_STARTS_IN_RACE"), 211);
	set_stat_int(get_hash_key("MP0_awd_fm_races_fastest_lap"), 106);
	set_stat_int(get_hash_key("NUMBER_SLIPSTREAMS_IN_RACE"), 184);
	set_stat_int(get_hash_key("MPPLY_RACE_CHEAT_START"), 0);
	set_stat_int(get_hash_key("MPPLY_RACE_CHEAT_END"), 0);
	set_stat_int(get_hash_key("MPPLY_RACE_CHEAT_QUIT"), 0);
	set_stat_int(get_hash_key("MPPLY_DM_CHEAT_START"), 0);
	set_stat_int(get_hash_key("MPPLY_DM_CHEAT_END"), 0);
	set_stat_int(get_hash_key("MPPLY_DM_CHEAT_QUIT"), 0);
	set_stat_int(get_hash_key("MPPLY_MC_CHEAT_START"), 0);
	set_stat_int(get_hash_key("MPPLY_MC_CHEAT_END"), 0);
	set_stat_int(get_hash_key("MPPLY_MC_CHEAT_QUIT"), 0);
	set_stat_int(get_hash_key("MPPLY_OVERALL_CHEAT"), 0);
	set_stat_int(get_hash_key("MP0_awd_lapdances"), 420);
	set_stat_int(get_hash_key("MP0_awd_fmkillbounty"), 745);
	set_stat_bool(get_hash_key("MP0_awd_fmkill3andwingtarace"), 666);
	set_stat_int(get_hash_key("MP0_awd_fmrevengekillsdm"), 666);
	set_stat_int(get_hash_key("MP0_awd_security_cars_robbed"), 666);
	set_stat_bool(get_hash_key("MP0_awd_fmpickupdlccrate1st"), 666);
	//Done
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Unlocked All!");
	return 0;
}
int alltatus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	STAT_SET_INT(get_hash_key("MP0_AWD_FM_DM_WINS"), 50, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_FM_TDM_MVP"), 50, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_FM_DM_TOTALKILLS"), 500, 1);
	STAT_SET_BOOL(get_hash_key("MP0_AWD_FMATTGANGHQ"), 1, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_FMBBETWIN"), 50000, 1);
	STAT_SET_BOOL(get_hash_key("MP0_AWD_FMWINEVERYGAMEMODE"), 1, 1);
	STAT_SET_BOOL(get_hash_key("MP0_AWD_FMRACEWORLDRECHOLDER"), 1, 1);
	STAT_SET_BOOL(get_hash_key("MP0_AWD_FMFULLYMODDEDCAR"), 1, 1);
	STAT_SET_BOOL(get_hash_key("MP0_AWD_FMMOSTKILLSSURVIVE"), 1, 1);
	STAT_SET_BOOL(get_hash_key("MP0_AWD_FMKILL3ANDWINGTARACE"), 1, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_FMKILLBOUNTY"), 25, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_FMREVENGEKILLSDM"), 50, 1);
	STAT_SET_BOOL(get_hash_key("MP0_AWD_FMKILLSTREAKSDM"), 1, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_HOLD_UP_SHOPS"), 20, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_LAPDANCES"), 25, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_SECURITY_CARS_ROBBED"), 25, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_RACES_WON"), 50, 1);
	STAT_SET_INT(get_hash_key("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 1);
	STAT_SET_INT(get_hash_key("MP0_PLAYER_HEADSHOTS"), 500, 1);
	STAT_SET_INT(get_hash_key("MP0_DB_PLAYER_KILLS"), 1000, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Unlocked All Tattoos!");
	return 0;
}

int alltatus1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	STAT_SET_INT(get_hash_key("MP1_AWD_FM_DM_WINS"), 50, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_FM_TDM_MVP"), 50, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_FM_DM_TOTALKILLS"), 500, 1);
	STAT_SET_BOOL(get_hash_key("MP1_AWD_FMATTGANGHQ"), 1, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_FMBBETWIN"), 50000, 1);
	STAT_SET_BOOL(get_hash_key("MP1_AWD_FMWINEVERYGAMEMODE"), 1, 1);
	STAT_SET_BOOL(get_hash_key("MP1_AWD_FMRACEWORLDRECHOLDER"), 1, 1);
	STAT_SET_BOOL(get_hash_key("MP1_AWD_FMFULLYMODDEDCAR"), 1, 1);
	STAT_SET_BOOL(get_hash_key("MP1_AWD_FMMOSTKILLSSURVIVE"), 1, 1);
	STAT_SET_BOOL(get_hash_key("MP1_AWD_FMKILL3ANDWINGTARACE"), 1, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_FMKILLBOUNTY"), 25, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_FMREVENGEKILLSDM"), 50, 1);
	STAT_SET_BOOL(get_hash_key("MP1_AWD_FMKILLSTREAKSDM"), 1, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_HOLD_UP_SHOPS"), 20, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_LAPDANCES"), 25, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_SECURITY_CARS_ROBBED"), 25, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_RACES_WON"), 50, 1);
	STAT_SET_INT(get_hash_key("MP1_AWD_CAR_BOMBS_ENEMY_KILLS"), 25, 1);
	STAT_SET_INT(get_hash_key("MP1_PLAYER_HEADSHOTS"), 500, 1);
	STAT_SET_INT(get_hash_key("MP1_DB_PLAYER_KILLS"), 1000, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Unlocked All Tattoos!");
	return 0;
}

int Rooseveltph(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	STAT_SET_INT(get_hash_key("MPPLY_VEHICLE_ID_ADMIN_WEB"), 117401876, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Roosevelt In Web");
	return 0;
}

int MaxSnacksCharacter2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_NO_BOUGHT_YUM_SNACKS"), 2147483647);
	set_stat_int(get_hash_key("MP1_NO_BOUGHT_HEALTH_SNACKS"), 2147483647);
	set_stat_int(get_hash_key("MP1_NO_BOUGHT_EPIC_SNACKS"), 2147483647);
	set_stat_int(get_hash_key("MP1_CIGARETTES_BOUGHT"), 2147483647);
	set_stat_int(get_hash_key("MP1_NUMBER_OF_BOURGE_BOUGHT"), 2147483647);
	set_stat_int(get_hash_key("MP1_NUMBER_OF_ORANGE_BOUGHT"), 2147483647);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Max Snacks!");
	return 0;
}

int UnlockAllClothesCharacter2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_FEET_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_JBIB"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_JBIB_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_JBIB_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_JBIB_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_JBIB_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_JBIB_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_JBIB_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_JBIB_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_LEGS"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_LEGS_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_LEGS_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_LEGS_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_LEGS_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_LEGS_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_LEGS_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_LEGS_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_FEET"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_FEET_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_FEET_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_FEET_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_FEET_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_FEET_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_FEET_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_FEET_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_BERD"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_BERD_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_BERD_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_BERD_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_BERD_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_BERD_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_BERD_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_BERD_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_8"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_9"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_PROPS_10"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_OUTFIT"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_HAIR"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_HAIR_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_HAIR_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_HAIR_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_HAIR_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_HAIR_5"), -1, 1);;
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_HAIR_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_HAIR_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_JBIB"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_JBIB_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_JBIB_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_JBIB_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_JBIB_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_JBIB_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_JBIB_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_JBIB_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_LEGS"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_LEGS_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_LEGS_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_LEGS_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_LEGS_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_LEGS_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_LEGS_6"), -1, 1);;
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_LEGS_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_FEET"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_FEET_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_FEET_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_FEET_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_FEET_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_FEET_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_FEET_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_FEET_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_BERD"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_BERD_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_BERD_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_BERD_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_BERD_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_BERD_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_BERD_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_BERD_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_8"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_9"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_PROPS_10"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_OUTFIT"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_TORSO"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_SPECIAL2_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_DECL"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_TEETH"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_TEETH_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_TEETH_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_TORSO"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_SPECIAL2_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_DECL"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_TEETH"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_TEETH_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_ACQUIRED_TEETH_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_0"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_8"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_9"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_10"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_11"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_12"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_13"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_14"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_15"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_16"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_17"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_18"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_19"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_21"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_22"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_23"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_24"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_24"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_25"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_26"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_27"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_28"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_29"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_30"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_31"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_32"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_33"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_34"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_35"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_36"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_37"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_38"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_39"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_DLC_APPAREL_ACQUIRED_40"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_7"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_8"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_9"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_13"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_10"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_11"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_ADMIN_CLOTHES_GV_BS_12"), -1, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Unlocked All Clothes!");
	return 0;
}

int Hair2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_1"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_2"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_3"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_4"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_5"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_6"), -1, 1);
	STAT_SET_INT(get_hash_key("MP1_CLTHS_AVAILABLE_HAIR_7"), -1, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Unlocked All Hairstyles!");
	return 0;
}

int HeistsVehiclesCharacter2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE2"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE3"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE4"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE5"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE6"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE7"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE8"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE9"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE10"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE11"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_FM_PURCHASE12"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_1_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_2_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_3_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_4_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_5_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_6_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_7_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_8_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_9_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_10_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_11_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_KIT_12_FM_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_races_won"), 100, 0);
	STAT_SET_INT(get_hash_key("MP1_number_turbo_starts_in_race"), 100, 0);
	STAT_SET_INT(get_hash_key("MP1_usjs_found"), 50, 0);
	STAT_SET_INT(get_hash_key("MP1_usjs_completed"), 50, 0);
	STAT_SET_INT(get_hash_key("MP1_awd_fmwinairrace"), 50, 0);
	STAT_SET_INT(get_hash_key("MP1_awd_fmwinsearace"), 50, 0);
	STAT_SET_INT(get_hash_key("MP1_awd_fmrallywonnav"), 50, 0);
	STAT_SET_INT(get_hash_key("MP1_awd_fmrallywondrive"), 500, 0);
	STAT_SET_INT(get_hash_key("MP1_awd_fm_races_fastest_lap"), 500, 0);
	STAT_SET_INT(get_hash_key("MP1_char_fm_carmod_0_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_char_fm_carmod_1_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_char_fm_carmod_2_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_char_fm_carmod_3_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_char_fm_carmod_4_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_char_fm_carmod_5_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_char_fm_carmod_6_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_char_fm_carmod_7_unlck"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_VEHICLE_1_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_VEHICLE_2_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_ABILITY_1_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_ABILITY_2_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_ABILITY_3_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_PACKAGE_1_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_PACKAGE_2_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_PACKAGE_3_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_PACKAGE_4_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_PACKAGE_5_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_PACKAGE_6_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_PACKAGE_7_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_PACKAGE_8_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_PACKAGE_9_COLLECT"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_HEALTH_1_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_CHAR_FM_HEALTH_2_UNLCK"), -1, 0);
	STAT_SET_INT(get_hash_key("MP1_HOLDUPS_BITSET"), -1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Unlocked All Hesit Vehicles!");
	return 0;
}

int UnlockAllMP1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_STAM"), 100);
	set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_STRN"), 100);
	set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_LUNG"), 100);
	set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_DRIV"), 100);
	set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_FLY"), 100);
	set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_SHO"), 100);
	set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_STL"), 100);
	// skills //
	set_stat_int(get_hash_key("MP1_RACES_WON"), 100);

	set_stat_int(get_hash_key("MP1_PISTOL_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_CMBTPISTOL_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_APPISTOL_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_MICROSMG_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_SMG_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTSMG_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTRIFLE_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_CRBNRIFLE_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ADVRIFLE_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_HVYSNIPER_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_SNIPERRFL_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTSHTGN_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_PUMP_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_GRNLAUNCH_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_RPG_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_MINIGUNS_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTSMG_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTRIFLE_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_CRBNRIFLE_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ADVRIFLE_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_HVYSNIPER_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_SNIPERRFL_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_MG_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_CMBTMG_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_PISTOL_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_CMBTPISTOL_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_APPISTOL_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_MICROSMG_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_SMG_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTSMG_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTRIFLE_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_CRBNRIFLE_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ADVRIFLE_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_HVYSNIPER_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_SNIPERRFL_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTSHTGN_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_PUMP_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_GRNLAUNCH_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_RPG_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_MINIGUNS_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTSMG_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ASLTRIFLE_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_CRBNRIFLE_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_ADVRIFLE_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_HVYSNIPER_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_SNIPERRFL_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_MG_ENEMY_KILLS"), 600);
	set_stat_int(get_hash_key("MP1_CMBTMG_ENEMY_KILLS"), 600);

	set_stat_bool(get_hash_key("MP1_AWD_FMRACEWORLDRECHOLDER"), 1);
	set_stat_int(get_hash_key("MP1_AWD_ENEMYDRIVEBYKILLS"), 600);

	set_stat_int(get_hash_key("MP1_USJS_COMPLETED"), 50);
	set_stat_int(get_hash_key("MP1_USJS_FOUND"), 50);

	set_stat_bool(get_hash_key("MP1_AWD_FMWINALLRACEMODES"), 1);
	set_stat_bool(get_hash_key("MP1_AWD_FMWINEVERYGAMEMODE"), 1);
	set_stat_int(get_hash_key("MP1_DB_PLAYER_KILLS"), 1000);
	set_stat_int(get_hash_key("MP1_KILLS_PLAYERS"), 1000);
	set_stat_int(get_hash_key("MP1_AWD_FMHORDWAVESSURVIVE"), 21);
	set_stat_int(get_hash_key("MP1_AWD_CAR_BOMBS_ENEMY_KILLS"), 25);
	set_stat_int(get_hash_key("MP1_AWD_FM_TDM_MVP"), 60);
	set_stat_int(get_hash_key("MP1_AWD_HOLD_UP_SHOPS"), 20);
	set_stat_int(get_hash_key("MP1_AWD_RACES_WON"), 101);
	set_stat_int(get_hash_key("MP1_AWD_NO_ARMWRESTLING_WINS"), 21);
	set_stat_bool(get_hash_key("MP1_AWD_FMATTGANGHQ"), 1);
	set_stat_int(get_hash_key("MP1_AWD_FMBBETWIN"), 50000);
	set_stat_int(get_hash_key("MP1_AWD_FM_DM_WINS"), 51);
	set_stat_int(get_hash_key("MP1_AWD_FM_DM_KILLSTREAK"), 51);
	set_stat_bool(get_hash_key("MP1_AWD_FMFULLYMODDEDCAR"), 1);
	set_stat_int(get_hash_key("MP1_AWD_FM_DM_TOTALKILLS"), 500);
	set_stat_int(get_hash_key("MP1_MPPLY_DM_TOTAL_DEATHS"), 412);
	set_stat_int(get_hash_key("MP1_MPPLY_TIMES_FINISH_DM_TOP_3"), 36);
	set_stat_int(get_hash_key("MP1_PLAYER_HEADSHOTS"), 623);
	set_stat_int(get_hash_key("MP1_AWD_FM_DM_WINS"), 63);
	set_stat_int(get_hash_key("MP1_AWD_FM_TDM_WINS"), 13);
	set_stat_int(get_hash_key("MP1_AWD_FM_GTA_RACES_WON"), 12);
	set_stat_int(get_hash_key("MP1_AWD_FM_GOLF_WON"), 2);
	set_stat_int(get_hash_key("MP1_AWD_FM_SHOOTRANG_TG_WON"), 2);
	set_stat_int(get_hash_key("MP1_AWD_FM_SHOOTRANG_RT_WON"), 2);
	set_stat_int(get_hash_key("MP1_AWD_FM_SHOOTRANG_CT_WON"), 2);
	set_stat_int(get_hash_key("MP1_AWD_FM_SHOOTRANG_GRAN_WON"), 2);
	set_stat_int(get_hash_key("MP1_AWD_FM_TENNIS_WON"), 2);
	set_stat_int(get_hash_key("MP1_MPPLY_TENNIS_MATCHES_WON"), 2);
	set_stat_int(get_hash_key("MP1_MPPLY_TOTAL_TDEATHMATCH_WON"), 63);
	set_stat_int(get_hash_key("MP1_MPPLY_TOTAL_RACES_WON"), 101);
	set_stat_int(get_hash_key("MP1_MPPLY_TOTAL_DEATHMATCH_LOST"), 23);
	set_stat_int(get_hash_key("MP1_MPPLY_TOTAL_RACES_LOST"), 36);
	set_stat_int(get_hash_key("MP1_AWD_25_KILLS_STICKYBOMBS"), 50);
	set_stat_int(get_hash_key("MP1_AWD_50_KILLS_GRENADES"), 50);
	set_stat_int(get_hash_key("MP1_GRENADE_ENEMY_KILLS"), 50);
	set_stat_int(get_hash_key("MP1_AWD_20_KILLS_MELEE"), 50);


	set_stat_bool(get_hash_key("MP1_AWD_FMMOSTKILLSSURVIVE"), 1);



	set_stat_int(get_hash_key("MP1_AWD_FMRALLYWONDRIVE"), 2);
	set_stat_int(get_hash_key("MP1_AWD_FMWINSEARACE"), 2);
	set_stat_int(get_hash_key("MP1_AWD_FMWINAIRRACE"), 2);
	set_stat_int(get_hash_key("MP1_MPPLY_TIMES_RACE_BEST_LAP"), 101);
	set_stat_int(get_hash_key("MP1_NUMBER_TURBO_STARTS_IN_RACE"), 100);
	set_stat_int(get_hash_key("MP1_AWD_FM_RACES_FASTEST_LAP"), 101);
	set_stat_int(get_hash_key("MP1_NUMBER_SLIPSTREAMS_IN_RACE"), 105);
	set_stat_int(get_hash_key("MP1_MPPLY_RACE_CHEAT_START"), 130);
	set_stat_int(get_hash_key("MP1_MPPLY_RACE_CHEAT_END"), 119);
	set_stat_int(get_hash_key("MP1_MPPLY_RACE_CHEAT_QUIT"), 11);
	set_stat_int(get_hash_key("MP1_MPPLY_DM_CHEAT_START"), 140);
	set_stat_int(get_hash_key("MP1_MPPLY_DM_CHEAT_END"), 115);
	set_stat_int(get_hash_key("MP1_MPPLY_DM_CHEAT_QUIT"), 25);
	set_stat_int(get_hash_key("MP1_MPPLY_MC_CHEAT_START"), 113);
	set_stat_int(get_hash_key("MP1_MPPLY_MC_CHEAT_END"), 97);
	set_stat_int(get_hash_key("MP1_MPPLY_MC_CHEAT_QUIT"), 16);
	set_stat_int(get_hash_key("MP1_MPPLY_OVERALL_CHEAT"), 0);

	set_stat_int(get_hash_key("MP1_LAP_DANCED_BOUGHT"), 50);

	set_stat_int(get_hash_key("MP1_AWD_FMKILLBOUNTY"), 50);
	set_stat_bool(get_hash_key("MP1_AWD_FMKILL3ANDWINGTARACE"), 1);
	set_stat_int(get_hash_key("MP1_AWD_FMREVENGEKILLSDM"), 60);
	set_stat_int(get_hash_key("MP1_AWD_SECURITY_CARS_ROBBED"), 40);
	set_stat_bool(get_hash_key("MP1_AWD_FMPICKUPDLCCRATE1ST"), 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Unlocked All!");
	return 0;
}


void cam_loop() {
	if (cam_check) {
		if (is_ped_on_foot(PlayerPedId())) {
			float lineThickness = 0.001f;
			float lineLength = 0.02f;
			draw_rect(0.5f, 0.5f, lineLength, lineThickness, 174, 219, 242, 255);
			draw_rect(0.5f, 0.5f, lineThickness, lineLength + 0.01f, 174, 219, 242, 255);
		}
		set_cam_active(cam, true);
		get_gameplay_cam_rot(2, rot);
		set_cam_rot(cam, rot);
	}
}

void Seccam_loop() {
	if (Seccam_check) {
		set_cam_active(Seccam1, true);
		get_gameplay_cam_rot(2, SecCam1rot);
		set_cam_rot(Seccam1, SecCam1rot);
	}
}

void Seccam2_loop() {
	if (Seccam2_check) {
		set_cam_active(Seccam2, true);
		get_gameplay_cam_rot(2, SecCam2rot);
		set_cam_rot(Seccam2, SecCam2rot);
	}
}

void Seccam3_loop() {
	if (Seccam3_check) {
		set_cam_active(Seccam3, true);
		get_gameplay_cam_rot(2, SecCam3rot);
		set_cam_rot(Seccam3, SecCam3rot);
	}
}

void Seccam4_loop() {
	if (Seccam4_check) {
		set_cam_active(Seccam4, true);
		get_gameplay_cam_rot(2, SecCam4rot);
		set_cam_rot(Seccam4, SecCam4rot);
	}
}

void Seccam5_loop() {
	if (Seccam5_check) {
		set_cam_active(Seccam5, true);
		get_gameplay_cam_rot(2, SecCam5rot);
		set_cam_rot(Seccam5, SecCam5rot);
	}
}

void Seccam6_loop() {
	if (Seccam6_check) {
		set_cam_active(Seccam6, true);
		get_gameplay_cam_rot(2, SecCam6rot);
		set_cam_rot(Seccam6, SecCam6rot);
	}
}


int FWLimit(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int pointer = *(int *)(Var_Pointer + 4);
	pointer += (5878 * 4);
	*(int *)pointer = 999999999;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Fireworks limit removed!");
	return 0;
}

bool nyloaded = false;
int LoadNY(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	nyloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~North Yankton Loaded (Only you can see this)!");
	return 0;
}

bool faceloaded = false;
int LoadInv(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	faceloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Life Invader Loaded(Only you can see this)!");
	return 0;
}

bool jewloaded = false;
int LoadJew(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	jewloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Jewerly Store Loaded (Only you can see this)!");
	return 0;
}

bool carloaded = false;
int LoadCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	carloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cargo Ship Loaded (Only you can see this)!");
	return 0;
}

bool stilloaded = false;
int LoadHouse(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	stilloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Stilt House Loaded (Only you can see this)!");
	return 0;
}

bool ufoloaded = false;
int LoadHouse11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ufoloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~UFO 1 Loaded (Only you can see this)!");
	return 0;
}

bool ufoloaded1 = false;
int LoadHouse12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ufoloaded1 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~UFO 2 Loaded (Only you can see this)!");
	return 0;
}

bool stilloaded2 = false;
int LoadHouse2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	stilloaded2 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Farm House Loaded (Only you can see this)!");
	return 0;
}
bool stilloaded3 = false;
int LoadHouse3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	stilloaded3 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Post Heist Loaded (Only you can see this)!");
	return 0;
}
bool stilloaded4 = false;
int LoadHouse4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	stilloaded4 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Lesters Factory Loaded (Only you can see this)!");
	return 0;
}
bool stilloaded5 = false;
int LoadHouse5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	stilloaded5 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Farm Loaded (Only you can see this)!");
	return 0;
}
bool stilloaded8 = false;
int LoadHouse8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	stilloaded8 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Hospital Loaded (Only you can see this)!");
	return 0;
}

bool stilloaded6 = false;
int LoadHouse6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	stilloaded6 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Chill House Loaded!");
	return 0;
}


int LoadHouse7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float x, y, z;
	x = -14.402822, y = -1436.941162, z = 31.118534;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Loaded Chill House 2!");
	return 0;
}

int water1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	float x, y, z;
	x = -3161.078, y = 3001.998, z = -37.974;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Sunken Body!");
	return 0;
}

int water2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 4201.633, y = 3643.821, z = -39.016;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Sunken Tank!");
	return 0;
}

int water3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -3373.726, y = 504.714, z = -24.656;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Dead Sea Monster!");
	return 0;
}

int water4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 762.426, y = 7380.371, z = -111.377;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Sunken UFO!");
	return 0;
}

int water5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 4273.950, y = 2975.714, z = -170.746;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to UnderWater Hatch!");
	return 0;
}

int water6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = -942.350, y = 6608.752, z = -20.912;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Sunken Plane!");
	return 0;
}

int water7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	float x, y, z;
	x = 3199.748, y = -379.018, z = -22.500;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Sunken Plane!");
	return 0;
}



bool yatloaded1 = false;
int Loadyat1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	yatloaded1 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Tunnel Loaded (Only you can see this)!");
	return 0;
}



bool yatloaded = false;
int Loadyat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	yatloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Yacht Loaded (Only you can see this)!");
	return 0;
}
bool airloaded = false;
int Airyat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	airloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Carrier Loaded (Works Sometimes)!");
	return 0;
}

bool morloaded = false;
int motgue(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	morloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Morgue Loaded (Works Sometimes)!");
	return 0;
}
bool cluckloaded = false;
int cluckn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	cluckloaded = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ClucknBell Loaded (Works Sometimes)!");
	return 0;
}

int SpawnBodyParts(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -1268580434;

	return 0;
}

int SpawnEgg(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 1803116220;

	return 0;
}

int SpawnShit(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -2071359746;

	return 0;
}

int SpawnAsteroid(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -543669801;

	return 0;
}

int SpawnUfo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 0xB467C540;

	return 0;
}

int SpawnFerris(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -1003748966;

	return 0;
}

int SpawnGuardBuilding(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -105439435;

	return 0;
}

int SpawnGuardBuilding2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 260517631;

	return 0;
}


int SpawnBankVaultGateDoor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -1508355822;
	model = -1157901789;

	return 0;
}

int SpawnWindmill(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 1952396163;

	return 0;
}

int BarrierS(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 868148414;

	return 0;
}

int BarrierL(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 1603241576;

	return 0;
}

int SpawnElectrical(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 1870961552;

	return 0;
}

int WBarrier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 24969275;

	return 0;
}
int s33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "PROP_HUMAN_SEAT_CHAIR_DRINK_BEER", 0, true);
	return 0;
}
int ss33(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "PROP_HUMAN_SEAT_CHAIR_DRINK_BEER", 0, true);
	return 0;
}
int s322(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_STAND_FIRE", 0, true);
	return 0;
}
int ss322(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_STAND_FIRE", 0, true);
	return 0;
}
int s31(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "PROP_HUMAN_SEAT_COMPUTER", 0, true);
	return 0;
}
int ss31(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "PROP_HUMAN_SEAT_COMPUTER", 0, true);
	return 0;
}
int s30(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_PAPARAZZI", 0, true);
	return 0;
}

int ss30(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_PAPARAZZI", 0, true);
	return 0;
}
int s29(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_YOGA", 0, true);
	return 0;
}

int ss29(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_YOGA", 0, true);
	return 0;
}
int s28(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_WELDING", 0, true);
	return 0;
}

int ss28(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_WELDING", 0, true);
	return 0;
}
int s27(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_TENNIS_PLAYER", 0, true);
	return 0;
}

int ss27(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_TENNIS_PLAYER", 0, true);
	return 0;
}
int s26(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_SWIMMING", 0, true);
	return 0;
}

int ss26(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_SWIMMING", 0, true);
	return 0;
}

int s25(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_SUPERHERO", 0, true);
	return 0;
}

int ss25(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_SUPERHERO", 0, true);
	return 0;
}
int s24(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_SUNBATHE_BACK", 0, true);
	return 0;
}

int ss24(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_SUNBATHE_BACK", 0, true);
	return 0;
}

int s23(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_SUNBATHE", 0, true);
	return 0;
}

int ss23(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_SUNBATHE", 0, true);
	return 0;
}
int s22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_STAND_FISHING", 0, true);
	return 0;
}

int ss22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_STAND_FISHING", 0, true);
	return 0;
}
int s21(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_PROSTITUTE_HIGH_CLASS", 0, true);
	return 0;
}

int ss21(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_PROSTITUTE_HIGH_CLASS", 0, true);
	return 0;
}

int s20(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_PROSTITUTE_LOW_CLASS", 0, true);
	return 0;
}

int ss20(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_PROSTITUTE_LOW_CLASS", 0, true);
	return 0;
}

int s19(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_PICNIC", 0, true);
	return 0;
}

int ss19(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_PICNIC", 0, true);
	return 0;
}

int s18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_PARTYING", 0, true);
	return 0;
}

int ss18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_PARTYING", 0, true);
	return 0;
}

int s17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_MUSICIAN", 0, true);
	return 0;
}

int ss17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_MUSICIAN", 0, true);
	return 0;
}

int s166(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_MAID_CLEAN", 0, true);
	return 0;
}

int ss166(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_MAID_CLEAN", 0, true);
	return 0;
}

int s15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_LEANING", 0, true);
	return 0;
}

int ss15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_LEANING", 0, true);
	return 0;
}

int s14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_HUMAN_STATUE", 0, true);
	return 0;
}

int ss14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_HUMAN_STATUE", 0, true);
	return 0;
}

int s13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_HANG_OUT_STREET", 0, true);
	return 0;
}

int ss13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_HANG_OUT_STREET", 0, true);
	return 0;
}

int s12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_HAMMERING", 0, true);
	return 0;
}

int ss12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_HAMMERING", 0, true);
	return 0;
}


int s11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_GUARD_PATROL", 0, true);
	return 0;
}

int ss11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_GUARD_PATROL", 0, true);
	return 0;
}

int s10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_GARDENER_PLANT", 0, true);
	return 0;
}

int ss10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_GARDENER_PLANT", 0, true);
	return 0;
}

int s9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_GARDENER_LEAF_BLOWER", 0, true);
	return 0;
}

int ss9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_GARDENER_LEAF_BLOWER", 0, true);
	return 0;
}

int s88(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_DRUG_DEALER_HARD", 0, true);
	return 0;
}

int ss88(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_DRUG_DEALER_HARD", 0, true);
	return 0;
}

int s7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_DRUG_DEALER", 0, true);
	return 0;
}

int ss7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_DRUG_DEALER", 0, true);
	return 0;
}

int s6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_DRINKING", 0, true);
	return 0;
}

int ss6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_DRINKING", 0, true);
	return 0;
}

int s5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_CHEERING", 0, true);
	return 0;
}

int ss5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_CHEERING", 0, true);
	return 0;
}

int s4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_BINOCULARS", 0, true);
	return 0;
}

int ss4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_BINOCULARS", 0, true);
	return 0;
}

int s3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_AA_COFFEE", 0, true);
	return 0;
}

int ss3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_AA_COFFEE", 0, true);
	return 0;
}

int s2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_SMOKING_POT", 0, true);
	return 0;
}

int ss2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle))
		network_request_control_of_entity(objecthandle);
	clear_ped_tasks_immediately(objecthandle);
	TASK_START_SCENARIO_IN_PLACE(objecthandle, "WORLD_HUMAN_SMOKING_POT", 0, true);
	return 0;
}

int s1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	clear_ped_tasks_immediately(PlayerPedId());
	TASK_START_SCENARIO_IN_PLACE(PlayerPedId(), "WORLD_HUMAN_AA_SMOKE", 0, true);
	return 0;
}

int g1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_GRAVITY_LEVEL(0);
	return 0;
}

int g2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_GRAVITY_LEVEL(1);
	return 0;
}

int g3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_GRAVITY_LEVEL(2);
	return 0;
}

int g4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_GRAVITY_LEVEL(3);
	return 0;
}

int AWBarrier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 1867879106;

	return 0;
}

int MBarrier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 54588191;

	return 0;
}

int MBarrier2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 1692612370;

	return 0;
}

int mister1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -1669978330;

	return 0;
}

int mister9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	objectspawn = true;
	normalspawn1 = true;
	model = -1669978330;
	return 0;
}

int mister99(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	objectspawn = true;
	normalspawn2 = true;
	model = -1669978330;
	return 0;
}

int mister2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -1963621339;

	return 0;
}

int mister3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 774425122;

	return 0;
}

int mister4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 1354899844;

	return 0;
}
int mister5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -1033361631;

	return 0;
}
int mister6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 900603705;

	return 0;
}
int mister7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = 323971301;

	return 0;
}

int mister8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -160475089;

	return 0;
}

int RoadCone(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -534360227;

	return 0;
}

int SpawnContainer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	objectspawn = true;
	normalspawn = true;
	model = -629735826;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Container Spawned!");
	return 0;
}
bool ObjMoveUp = false;
int MoveUp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!ObjMoveUp) {
		ObjMoveUp = true;
	} else if (ObjMoveUp) {
		ObjMoveUp = false;
	}
	return 0;
}

int MoveUp2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordz = Pos[2];
		if (objecthandle) objectcoordz += 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], Pos[1], objectcoordz, 1, 0, 0, 1);
	}
	return 0;
}

int MoveDown2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordz = Pos[2];
		if (objecthandle) objectcoordz -= 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], Pos[1], objectcoordz, 1, 0, 0, 1);
	}
	return 0;
}
int MoveLeft2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordx = Pos[0];
		if (objecthandle) objectcoordx -= 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, objectcoordx, Pos[1], Pos[2], 1, 0, 0, 1);
	}
	return 0;
}

int MoveRight2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordx = Pos[0];
		if (objecthandle) objectcoordx += 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, objectcoordx, Pos[1], Pos[2], 1, 0, 0, 1);
	}
	return 0;
}

int MoveForward2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordy = Pos[1];
		if (objecthandle) objectcoordy += 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], objectcoordy, Pos[2], 1, 0, 0, 1);
	}
	return 0;
}

int MoveBackward2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordy = Pos[1];
		if (objecthandle) objectcoordy -= 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], objectcoordy, Pos[2], 1, 0, 0, 1);
	}
	return 0;
}


void MoveUpLoop() {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordz = Pos[2];
		if (ObjMoveUp) objectcoordz += 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], Pos[1], objectcoordz, 1, 0, 0, 1);
	}
}

int MoveBlockadeUp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordz = Pos[2];
		objectcoordz += 1.0;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], Pos[1], objectcoordz, 1, 0, 0, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Moved Blockade Up");
		return 0;
	}
}

bool ObjMoveDown = false;
int MoveDown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!ObjMoveDown) {
		ObjMoveDown = true;
	} else if (ObjMoveDown) {
		ObjMoveDown = false;
	}
	return 0;
}

void MoveDownLoop() {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordz = Pos[2];
		if (ObjMoveDown) objectcoordz -= 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], Pos[1], objectcoordz, 1, 0, 0, 1);
	}
}

int MoveBlockadeDown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordz = Pos[2];
		objectcoordz -= 1.0;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], Pos[1], objectcoordz, 1, 0, 0, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Moved Blockade Down");
		return 0;
	}
}
bool ObjMoveForward = false;
int MoveForward(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!ObjMoveForward) {
		ObjMoveForward = true;
	} else if (ObjMoveForward) {
		ObjMoveForward = false;
	}
	return 0;
}

void MoveForwardLoop() {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordy = Pos[1];
		if (ObjMoveForward) objectcoordy += 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], objectcoordy, Pos[2], 1, 0, 0, 1);
	}
}

bool snap = false;
int SnapGround(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {


		float Position[3], dim_min[3], dim_max[3];
		get_model_dimensions(get_entity_model(PlayerPedId()), dim_min, dim_max);
		get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0], dim_min[1] + 4.0f, 0.0f, Position);
		get_ground_z_for_3d_coord(Position[0], Position[1], Position[2], &Position[2]);
		set_entity_coords(objecthandle, Position[0], Position[1], Position[2], 1, 0, 0, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Snapped Object To Ground Height");
		return 0;
	}
}

int TeleportInFront(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	float Position[3], dim_min[3], dim_max[3];
	get_model_dimensions(get_entity_model(PlayerPedId()), dim_min, dim_max);
	get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0], dim_min[1] + 5.0f, 0.0f, Position);
	get_ground_z_for_3d_coord(Position[0], Position[1], Position[2], &Position[2]);
	int myvehicle;
	int myhandle = GetPlayerHandle(PlayerId());
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, Position[0], Position[1], Position[2], 0, 0, 0, 1);
		} else {
			set_entity_coords(PlayerPedId(), Position[0], Position[1], Position[2], 1, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported 10 In Front!");
	return 0;
}

bool MoveObjBackwards = false;
int MoveBackward(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!MoveObjBackwards) {
		MoveObjBackwards = true;
	} else if (MoveObjBackwards) {
		MoveObjBackwards = false;
	}
	return 0;
}

void MoveBackwardsLoop() {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordy = Pos[1];
		if (MoveObjBackwards) objectcoordy -= 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, Pos[0], objectcoordy, Pos[2], 1, 0, 0, 1);
	}
}
bool ObjMoveLeft = false;
int MoveLeft(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!ObjMoveLeft) {
		ObjMoveLeft = true;
	} else if (ObjMoveLeft) {
		ObjMoveLeft = false;
	}
	return 0;
}

void MoveLeftLoop() {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordx = Pos[0];
		if (ObjMoveLeft) objectcoordx -= 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, objectcoordx, Pos[1], Pos[2], 1, 0, 0, 1);
	}
}
bool MoveObjRight = false;
int MoveRight(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!MoveObjRight) {
		MoveObjRight = true;
	} else if (MoveObjRight) {
		MoveObjRight = false;
	}
	return 0;
}

void MoveRightLoop() {
	if (DoesEntityExist(objecthandle)) {
		float Pos[3];
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, Pos);
		objectcoordx = Pos[0];
		if (MoveObjRight) objectcoordx += 0.1;
		network_request_control_of_entity(objecthandle);
		set_entity_coords(objecthandle, objectcoordx, Pos[1], Pos[2], 1, 0, 0, 1);
	}
}

int HeadingLeft(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectyaw = get_entity_heading(objecthandle);
		objectyaw += 2.0;
		network_request_control_of_entity(objecthandle);
		set_entity_rotation(objecthandle, objectpitch, objectroll, objectyaw, 2, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ + Yaw");
		return 0;
	}
}

int HeadingRight(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectyaw = get_entity_heading(objecthandle);
		objectyaw -= 2.0;
		network_request_control_of_entity(objecthandle);
		set_entity_rotation(objecthandle, objectpitch, objectroll, objectyaw, 2, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ - Yaw");
		return 0;
	}
}

int ObjectFlat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectheading = get_entity_heading(objecthandle);
		objectroll = 0;
		objectpitch = 0;
		network_request_control_of_entity(objecthandle);
		set_entity_heading(objecthandle, objectheading + 0.1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Object Set Straight");
		return 0;
	}
}

int FreezeObject(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		freeze_entity_position(objecthandle, true);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Froze Entity");
		return 0;
	}
}

int UnfreezeObject(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		freeze_entity_position(objecthandle, false);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Unfrozen Object");
		return 0;
	}
}

int PlusPitch(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectyaw = get_entity_heading(objecthandle);
		objectpitch = get_entity_pitch(objecthandle);
		objectpitch += 1.0;
		network_request_control_of_entity(objecthandle);
		set_entity_rotation(objecthandle, objectpitch, objectroll, objectyaw, 2, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ + Pitch");
		return 0;
	}
}

int MinusPitch(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectyaw = get_entity_heading(objecthandle);
		objectpitch = get_entity_pitch(objecthandle);
		objectpitch -= 1.0;
		network_request_control_of_entity(objecthandle);
		set_entity_rotation(objecthandle, objectpitch, objectroll, objectyaw, 2, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ - Pitch");
		return 0;
	}
}

int PlusRoll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectyaw = get_entity_heading(objecthandle);
		objectpitch = get_entity_pitch(objecthandle);
		objectroll += 1.0;
		network_request_control_of_entity(objecthandle);
		set_entity_rotation(objecthandle, objectpitch, objectroll, objectyaw, 2, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ + Roll");
		return 0;
	}
}

int MinusRoll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectyaw = get_entity_heading(objecthandle);
		objectpitch = get_entity_pitch(objecthandle);
		objectroll -= 1.0;
		network_request_control_of_entity(objecthandle);
		set_entity_rotation(objecthandle, objectpitch, objectroll, objectyaw, 2, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ - Roll");
		return 0;
	}
}


int BoarModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xCE5FF074;
	return 0;
}

int FootModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 1641334641;
	return 0;
}

int JesusModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 3459037009;
	return 0;
}

int RangerModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 1011059922;
	return 0;
}

int MexicanModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 3367706194;
	return 0;
}

int ChopModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x14EC17EA;
	return 0;
}

int ChopModel1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x14EC17EA;
	return 0;
}

int CoyoteModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x644AC75E;
	return 0;
}

int HuskyModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x4E8F95A2;
	return 0;
}

int MtLion(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x1250D7BA;
	return 0;
}

int ShepModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x431FC24C;
	return 0;
}

int ChimpModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = -1469565163;
	return 0;
}

int RetModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x349F33E1;
	return 0;
}

int PigModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xB11BAB56;
	return 0;
}

int RotModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x9563221D;
	return 0;
}

int MercModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = -1275859404;
	return 0;
}

int GunmanModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xB881AEE;
	return 0;
}

int PrisonnModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xB1BB9B59;
	return 0;
}

int SwatModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x8D8F1B10;
	return 0;
}

int ClownModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x4498DDE;
	return 0;
}

int Bugstars(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x48114518;
	return 0;
}

int Diper(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x5442C66B;
	return 0;
}

int Fatso(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xB5CF80E4;
	return 0;
}

int NakedMan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x55446010;
	return 0;
}

int SpaceMan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xE7B31432;
	return 0;
}

int FireModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = -1229853272;
	return 0;
}

int Johhny(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x87CA80AE;
	return 0;
}

int FBI(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x3AE4A33B;
	return 0;
}

bool norandomcomps = false;
int Micheal(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xD7114C9;
	norandomcomps = true;
	return 0;
}

int Mime(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x3CDCA742;
	norandomcomps = true;
	return 0;
}

int Hippy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = -2126242959;

	return 0;
}

int Gangster(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = -1031795266;
	return 0;
}

int Trevor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x9B810FA2;
	norandomcomps = true;
	return 0;
}

int Tranny(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xE0E69974;
	norandomcomps = true;
	return 0;
}

int Bride(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x6162EC47;
	norandomcomps = true;
	return 0;
}

int Gay(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xD1CCE036;
	norandomcomps = true;
	return 0;
}

int Girl1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x695FE666;
	norandomcomps = true;
	return 0;
}

int Girl2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFDB134533;
	norandomcomps = true;
	return 0;
}


int Scientist(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x4117D39B;
	norandomcomps = true;
	return 0;
}

int Auto(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xB2273D4E;
	norandomcomps = true;
	return 0;
}

int Chef(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xF977CEB;
	norandomcomps = true;
	return 0;
}

int Waiter(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xAD4C724C;
	norandomcomps = true;
	return 0;
}

int Hoe(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x414FA27B;
	norandomcomps = true;
	return 0;
}

int Tennos(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x550C79C6;
	norandomcomps = true;
	return 0;
}

int Hoee(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x48F96F5B;
	norandomcomps = true;
	return 0;
}

int Hoe2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x563B8570;
	norandomcomps = true;
	return 0;
}


int Hoe5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x5B81D86C;
	norandomcomps = true;
	return 0;
}

int Hoe3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x795AC7A8;
	norandomcomps = true;
	return 0;
}

int Hoe4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFE7A963D9;
	norandomcomps = true;
	return 0;
}

int Skinny(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x20208E4D;
	norandomcomps = true;
	return 0;
}

int FatBoy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	scriptsetModel = 0x13AEF042;
	norandomcomps = true;
	return 0;
}

int DJ(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	scriptsetModel = 0x2307A353;
	norandomcomps = true;
	return 0;
}

int Bartender(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	scriptsetModel = 0x780C01BD;
	norandomcomps = true;
	return 0;
}

int Zombie(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xAC4B4506;
	norandomcomps = true;
	return 0;
}

int Paparazzi(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x5048B328;
	norandomcomps = true;
	return 0;
}

int Priest(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x6437E77D;
	norandomcomps = true;
	return 0;
}

int Burger(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x8B7D3766;
	norandomcomps = true;
	return 0;
}

int DeadHoe(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x9C70109D;
	norandomcomps = true;
	return 0;
}

int DeadHoe2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x73DEA88B;
	norandomcomps = true;
	return 0;
}

int Hippie(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xF041880B;
	norandomcomps = true;
	return 0;
}

int HillBilly(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x6C9B2849;
	norandomcomps = true;
	return 0;
}

int BreakDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x379F9596;
	norandomcomps = true;
	return 0;
}

int Jetskier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x2DB7EEF3;
	norandomcomps = true;
	return 0;
}

int Ktown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x1AF6542C;
	norandomcomps = true;
	return 0;
}

int Lester(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x4DA6E849;
	norandomcomps = true;
	return 0;
}

int Tracy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFDE352A35;
	norandomcomps = true;
	return 0;
}

int Ltown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xB4A6862;
	norandomcomps = true;
	return 0;
}


int Hao(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFEC9E8F1C;
	norandomcomps = true;
	return 0;
}

int Hugh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x6F139B54;
	norandomcomps = true;
	return 0;
}

int Imran(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x570462B9;
	norandomcomps = true;
	return 0;
}

int Jimmy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x570462B9;
	norandomcomps = true;
	return 0;
}

int Amanda(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x6D1E15F7;
	norandomcomps = true;
	return 0;
}

int Lamar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x65B93076;
	norandomcomps = true;
	return 0;
}

int maude(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFBCC475CB;
	norandomcomps = true;
	return 0;
}

int maid(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFE093C5C6;
	norandomcomps = true;
	return 0;
}

int Ortega(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFC0DB04CF;
	norandomcomps = true;
	return 0;
}

int Oscar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFF41F399B;
	norandomcomps = true;
	return 0;
}

int Porn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x2F4AFE35;
	norandomcomps = true;
	return 0;
}

int Port(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x2E420A24;
	norandomcomps = true;
	return 0;
}

int Korean(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFF8FEDD989;
	norandomcomps = true;
	return 0;
}

int Rush(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x3D0A5EB1;
	norandomcomps = true;
	return 0;
}

int Tome(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFCD777AAA;
	norandomcomps = true;
	return 0;
}

int Busk(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFAD9EF1BB;
	norandomcomps = true;
	return 0;
}

int Com(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFB6AA85CE;
	norandomcomps = true;
	return 0;
}

int Willy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFF90769A8F;
	norandomcomps = true;
	return 0;
}

int Motox(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x64FDEA7D;
	norandomcomps = true;
	return 0;
}

int Salton(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFF8EE47AFC;
	norandomcomps = true;
	return 0;
}


int BlackDreads(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFCF92ADE9;
	norandomcomps = true;
	return 0;
}


int Surfer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFEAC2C7EE;
	norandomcomps = true;
	return 0;
}

int Abigal(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFF89768941;
	norandomcomps = true;
	return 0;
}

int Anita(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x703F106;
	norandomcomps = true;
	return 0;
}

int Baller(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFABEF0004;
	norandomcomps = true;
	return 0;
}

int babe(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x303638A7;
	norandomcomps = true;
	return 0;
}

int babe2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFC79F6928;
	norandomcomps = true;
	return 0;
}

int Goon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFA8C22996;
	norandomcomps = true;
	return 0;
}

int Cletus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFCAE9E5D5;
	norandomcomps = true;
	return 0;
}


int Franklin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x9B22DBAF;
	norandomcomps = true;
	return 0;
}

int PilotModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = -163714847;
	norandomcomps = true;
	return 0;
}

int CIA(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x625D6958;
	norandomcomps = true;
	return 0;
}

int COPM(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x5E3DA4A4;
	norandomcomps = true;
	return 0;
}

int COPF(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x15F8700D;
	norandomcomps = true;
	return 0;
}

int COPHW(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x739B1EF5;
	norandomcomps = true;
	return 0;
}

int COPSH(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xB144F9B9;
	norandomcomps = true;
	return 0;
}

int COPSW(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x1AE8BB58;
	norandomcomps = true;
	return 0;
}

int MERC(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xB3F3EE34;
	norandomcomps = true;
	return 0;
}

int SEC(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xF161D212;
	norandomcomps = true;
	return 0;
}

int SEC2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x2930C1AB;
	norandomcomps = true;
	return 0;
}

int MBO(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x7A05FA59;
	norandomcomps = true;
	return 0;
}

int MMM(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x65793043;
	norandomcomps = true;
	return 0;
}

int KickFromVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animid = subMenuIndex;
	kickfromveh = true;
	return 0;
}

int LMAO(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	CarPed = selectedMenuIndexes->operator[](1);
	int player = selectedMenuIndexes->operator[](1);
	animid = selectedMenuIndexes->operator[](1);
	int ped = GetPlayerHandle(player);
	int Vehicle = GetCarCharIsIn(ped, 0);
	float Pos[3];
	GetEntityCoords(ped, Pos);
	if (is_ped_on_foot(ped)) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player isn't in any vehicle");
		return 0;
	}
	if (!KickinggPlayer) {
		KickinggPlayer = true;
		KickingPlayerIndex = selectedMenuIndexes->operator[](1);
	}
	kidnap = true;
	return 0;
}


int FreezeOnlinePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animid = subMenuIndex;

	if (!freeze) {
		freeze = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Lag Hoe:~b~ON!");
	}

	else if (freeze) {
		freeze = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Lag Hoe:~r~OFF!");
	}
	return 0;
}

bool vm_anim2 = false;
int StunLoop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "ragdoll@human";
	anim = "electrocute";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}


int FireLoop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "ragdoll@human";
	anim = "on_fire";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int PoleDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@strip_club@pole_dance@pole_dance1";
	anim = "pd_dance_01";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int PoleDance2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@strip_club@pole_dance@pole_dance2";
	anim = "pd_dance_02";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int PoleDance3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@strip_club@pole_dance@pole_dance3";
	anim = "pd_dance_03";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int PrivateDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@strip_club@private_dance@part1";
	anim = "priv_dance_p1";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int LapDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mp_am_stripper";
	anim = "lap_dance_player";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}


int FuckAir(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "rcmpaparazzo_2";
	anim = "shag_loop_a";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int FuckAir2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "rcmpaparazzo_2";
	anim = "shag_loop_poppy";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Tazer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "stungun@sitting";
	anim = "damage_vehicle";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Tazer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "stungun@standing";
	anim = "damage";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ProsMale(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "sex_loop_male";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ProsFemale(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "sex_loop_prostitute";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int BJMale(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "bj_loop_male";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int BJFemale(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "bj_loop_prostitute";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int DrunkSexM(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "random@drunk_driver_2";
	anim = "cardrunksex_loop_m";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int DrunkSexF(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "random@drunk_driver_2";
	anim = "cardrunksex_loop_f";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Ret1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@retriever@amb@world_dog_barking@base";
	anim = "base_facial";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Ret2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@retriever@amb@world_dog_sitting@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Ret3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@retriever@melee@streamed_core@";
	anim = "ground_attack_0_facial";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Ret4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@amb@sleep_in_kennel@";
	anim = "sleep_in_kennel";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Ret5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@retriever@move";
	anim = "canter";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Mime1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@mime@monologue_3@monologue_3a";
	anim = "03_ig_1_open_wind_0";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Mime2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@mime@monologue_8@monologue_8a";
	anim = "08_ig_1_wall_ba_0";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Mime3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@mime@monologue_4@monologue_4a";
	anim = "09_ig_1_balo_0";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Mime4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@mime@monologue_1@monologue_1a";
	anim = "02_ig_1_r_0";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Mime5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@mime@monologue_7@monologue_7a";
	anim = "11_ig_1_run_aw_0";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Stat1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_statue@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Stat2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_statue@enter";
	anim = "enter";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Stat3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_statue@idle_a";
	anim = "idle_b";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Stat4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_statue@idle_b";
	anim = "idle_f";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Zombie1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@zombie@monologue_8@monologue_8g";
	anim = "whosayscosplayisa_6";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Zombie2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@zombie@monologue_7@monologue_7j";
	anim = "rrritsbrains_9";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Zombie3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@zombie@monologue_6@monologue_6g";
	anim = "iamthevinewoodzombie_6";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Zombie4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@zombie@monologue_4@monologue_4n";
	anim = "iamtheundead_13";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Zombie5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@zombie@monologue_2@monologue_2e";
	anim = "doyouwantaphotowithme_4";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Zombie6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@zombie@monologue_3@monologue_3g";
	anim = "careful_6";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Cougar1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@cougar@amb@world_cougar_rest@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Cougar2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@cougar@amb@world_cougar_rest@enter";
	anim = "enter";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Cougar3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@cougar@amb@world_cougar_rest@exit";
	anim = "exit";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Cougar4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@cougar@melee@streamed_core@";
	anim = "ground_attack_0_facial";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Cougar5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@cougar@melee@";
	anim = "growling";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Cougar6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@cougar@getup";
	anim = "getup_r";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Coyote1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@coyote@amb@world_coyote_howl@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Coyote2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@coyote@amb@world_coyote_rest@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Coyote3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@coyote@amb@world_coyote_wander@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Coyote4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@coyote@move";
	anim = "gallop_turn_r";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Coyote5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@coyote@melee@streamed_core@";
	anim = "attack";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Situps(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_sit_ups@male@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int TapDancingHeaven(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@mountain_dancer@monologue_2@monologue_2a";
	anim = "mnt_dnc_angel";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ButtwagDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@mountain_dancer@monologue_3@monologue_3a";
	anim = "mnt_dnc_buttwag";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int VerseDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@mountain_dancer@monologue_4@monologue_4a";
	anim = "mnt_dnc_verse";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int HeavenDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@mountain_dancer@monologue_1@monologue_1a";
	anim = "mtn_dnc_if_you_want_to_get_to_heaven";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int JerkingOffLoop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "switch@trevor@jerking_off";
	anim = "trev_jerking_off_loop";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int PullUpsSports(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "SWITCH@FRANKLIN@GYM";
	anim = "001942_02_GC_FRAS_IG_5_BASE";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int TrevorDrunkHowling(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "switch@trevor@drunk_howling";
	anim = "loop";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int TrevorDrunk2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "SWITCH@TREVOR@MOCKS_LAPDANCE";
	anim = "001443_01_TRVS_28_IDLE_TRV";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Pleadloop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "misstrevor2ig_5c";
	anim = "plead_loop";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Golfshit(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@golfai";
	anim = "putt_approach_no_ball";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Jogloop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "rcmfanatic1";
	anim = "jogging_on_spot";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Celebrate(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "rcmfanatic1celebrate";
	anim = "celebrate";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Preacher(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "missfam3";
	anim = "shout_out_window_coach";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_hammering@male@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "move_characters@trevor@gay";
	anim = "gaycouple_walk_player2";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "move_crawl";
	anim = "onback_fwd";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "missheistdocks2a@swimtocontainer";
	anim = "michael_swim_to_container";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@swim@";
	anim = "swim";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "timetable@mime@ig_1";
	anim = "cowboy_riding_horse";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@prop_human_seat_bar@female@elbows_on_bar@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "veh@drivebylow_rps";
	anim = "smash_window";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int SitDown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "timetable@michael@on_sofabase";
	anim = "sit_sofa_base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@code_human_police_investigate@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@zombie@trevor_1@trevor_1s";
	anim = "convo_trevor_mybrother_18";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@jessie@monologue_14@monologue_14d";
	anim = "if_you_want_to_get_baked_3";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}


int Hammer14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "special_ped@tonya@monologue_2@monologue_2c";
	anim = "come_over_here_2";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Hammer15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "missprologuewait_impatient";
	anim = "trevor_waiting_impatient_c";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}
int Hammer16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "switch@trevor@chase_strippers";
	anim = "loop_stripper_01";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}
int Hammer17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "safe@michael@ig_3";
	anim = "cigar_interrupt_cam_tv";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}


int Hammer10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_cheering@male_e";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Saxman(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "misstrevor3ig_7";
	anim = "shove_trev";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int RollingBarrel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "misschinese2_barrelroll";
	anim = "barrel_roll_loop_A";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Peeloop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "misscarsteal2peeing";
	anim = "peeing_loop";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Meditating(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "rcmcollect_paperleadinout@";
	anim = "meditiate_idle";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Pushups(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_push_ups@male@base";
	anim = "base";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ArmsWave(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "random@car_thief@victimpoints_ig_3";
	anim = "arms_waving";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Chop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@amb@";
	anim = "hump_loop_chop";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopF(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@amb@";
	anim = "hump_loop_ladydog";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int CopKneel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "random@arrests";
	anim = "kneeling_arrest_idle";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int CopHands(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "dump_enter";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

void enablevehmods() {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod_kit(vehicle, 0);
}
bool wheelsmodded = false;
int StockTyres(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock tyres applied, If your wheels changed with the tyres just change your wheels in the menu!");
	return 0;
}

int CustomTyres(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 23, wheel, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Custom tyres applied, If your wheels changed with the tyres just change your wheels in the menu!");
	return 0;
}

int BpTyres(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyres_can_burst(vehicle, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Your tyres are now bulletproof!");
	return 0;
}

int NoArmour(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 16);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Armour removed");
	return 0;
}

int StockWheels(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 23);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock wheels applied");
	return 0;
}
int Smoke0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(vehicle, 255, 0, 0));
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Red tire smoke applied");
	return 0;
}
int Smoke1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(vehicle, 15, 238, 49));
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Green tire smoke applied");
	return 0;
}
int Smoke2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 0, 0, 255);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Blue tire smoke applied");
	return 0;
}
int Smoke3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 127, 0, 255);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Purple tire smoke applied");
	return 0;
}
int Smoke4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 255, 51, 255);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Pink tire smoke applied");
	return 0;
}
int Smoke5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 102, 178, 255);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Sky blue tire smoke applied");
	return 0;
}
int Smoke6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 255, 128, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Orange tire smoke applied");
	return 0;
}
int Smoke7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 255, 255, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Yellow tire smoke applied");
	return 0;
}
int Smoke8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 0, 255, 255);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Cyan tire smoke applied");
	return 0;
}

int Smoke9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 0, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Patriot smoke applied");
	return 0;
}
int Smoke12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 111, 225, 214);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Custom smoke applied");
	return 0;
}
int Smoke15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 35, 248, 168);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Custom smoke applied");
	return 0;
}
int Smoke13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 47, 223, 219);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Custom smoke applied");
	return 0;
}
int Smoke14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 219, 103, 242);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Custom smoke applied");
	return 0;
}
int StockFb(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock front bumper installed");
	return 0;
}
bool turbo_check = false;
int TurboToggle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	if (!turbo_check) {
		int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		toggle_vehicle_mod(vehicle, 18, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Turbo:~b~ON");
		turbo_check = true;
	} else if (turbo_check) {
		int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		toggle_vehicle_mod(vehicle, 18, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Turbo:~r~OFF");
		turbo_check = false;
	}
	return 0;
}


int Tint0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_window_tint(vehicle, 4);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Tint removed!");
	return 0;
}
int Tint1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_window_tint(vehicle, 3);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Light tint installed!");
	return 0;
}
int Tint2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_window_tint(vehicle, 2);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Dark tint installed!");
	return 0;
}
int Tint3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_window_tint(vehicle, 1);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Limo tint installed!");
	return 0;
}
int Tint4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_window_tint(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Black tint installed!");
	return 0;
}
int Tint5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_window_tint(vehicle, 7);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Green tint installed!");
	return 0;
}

bool door0 = false;
int OpenDoor0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door0) {
		set_vehicle_door_open(vehicle, 0);
		ShowMessageOnScreen("~g~ Drivers front door opened");
		door0 = true;
	}
	else if (door0) {
		set_vehicle_door_shut(vehicle, 0);
		ShowMessageOnScreen("~g~ Drivers front door closed");
		door0 = false;
	}
	return 0;
}
int RemoveDFDoor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_door_broken(vehicle, 0, 1);
	ShowMessageOnScreen("~g~ Drivers front door removed!");
	return 0;
}

bool door1 = false;
int OpenDoor1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door1) {
		set_vehicle_door_open(vehicle, 1);
		ShowMessageOnScreen("~g~ Passenger front door opened");
		door1 = true;
	}
	else if (door1) {
		set_vehicle_door_shut(vehicle, 1);
		ShowMessageOnScreen("~g~ Passenger front door closed");
		door1 = false;
	}
	return 0;
}
int RemovePFDoor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_door_broken(vehicle, 1, 1);
	ShowMessageOnScreen("~g~ Passenger front door removed!");
	return 0;
}

bool door2 = false;
int OpenDoor2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door2) {
		set_vehicle_door_open(vehicle, 2);
		ShowMessageOnScreen("~g~ Drivers rear door opened");
		door2 = true;
	}
	else if (door2) {
		set_vehicle_door_shut(vehicle, 2);
		ShowMessageOnScreen("~g~ Drivers rear door closed");
		door2 = false;
	}
	return 0;
}
int RemoveDRDoor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_door_broken(vehicle, 2, 1);
	ShowMessageOnScreen("~g~ Drivers rear door removed!");
	return 0;
}

bool door3 = false;
int OpenDoor3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door3) {
		set_vehicle_door_open(vehicle, 3);
		ShowMessageOnScreen("~g~ Passenger rear door opened");
		door3 = true;
	}
	else if (door3) {
		set_vehicle_door_shut(vehicle, 3);
		ShowMessageOnScreen("~g~ Passenger rear door closed");
		door3 = false;
	}
	return 0;
}
int RemovePRDoor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_door_broken(vehicle, 3, 1);
	ShowMessageOnScreen("~g~ Passenger rear door removed!");
	return 0;
}

bool door4 = false;
int OpenDoor4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door4) {
		set_vehicle_door_open(vehicle, 4);
		ShowMessageOnScreen("~g~ Hood opened");
		door4 = true;
	}
	else if (door4) {
		set_vehicle_door_shut(vehicle, 4);
		ShowMessageOnScreen("~g~ Hood closed");
		door4 = false;
	}
	return 0;
}
int RemoveHood(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_door_broken(vehicle, 4, 1);
	ShowMessageOnScreen("~g~ Hood removed!");
	return 0;
}

bool door5 = false;
int OpenDoor5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door5) {
		set_vehicle_door_open(vehicle, 5);
		ShowMessageOnScreen("~g~ Boot opened");
		door5 = true;
	}
	else if (door5) {
		set_vehicle_door_shut(vehicle, 5);
		ShowMessageOnScreen("~g~ Boot closed");
		door5 = false;
	}
	return 0;
}
int RemoveBoot(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_door_broken(vehicle, 5, 1);
	ShowMessageOnScreen("~g~ Boot Removed");
	return 0;
}

int RemoveEverything(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_door_broken(vehicle, 1, 1);
	set_vehicle_door_broken(vehicle, 0, 1);
	set_vehicle_door_broken(vehicle, 1, 1);
	set_vehicle_door_broken(vehicle, 2, 1);
	set_vehicle_door_broken(vehicle, 3, 1);
	set_vehicle_door_broken(vehicle, 4, 1);
	set_vehicle_door_broken(vehicle, 5, 1);
	ShowMessageOnScreen("~g~ Removed Doors, Hood, & Boot from current Vehicle");
	return 0;
}

int Armour0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ 20 percent Armour installed");
	return 0;
}

int Armour1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ 40 percent Armour installed");
	return 0;
}

int Armour2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ 60 percent Armour installed");
	return 0;
}

int Armour3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ 80 percent Armour installed");
	return 0;
}

int Armour4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 4, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ 100 percent Armour installed");
	return 0;
}

int StockHorn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 14);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock horn installed");
	return 0;
}
int Horn0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 4, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 5, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 6, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 7, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 8, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 9, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 10, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 11, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 12, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 13, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 14, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 15, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 16, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 17, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 18, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn19(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 19, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn20(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 20, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn21(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 21, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 22, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn23(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 23, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn24(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 24, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn25(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 25, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn26(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 26, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn27(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 27, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn28(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 28, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn29(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 29, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}
int Horn30(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 14, 30, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Horn installed");
	return 0;
}

int Fb0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 1, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Front bumper 1 installed");
	return 0;
}
int Fb1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 1, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Front bumper 2 installed");
	return 0;
}
int Fb2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 1, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Front bumper 3 installed");
	return 0;
}
int Fb3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 1, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Front bumper 3 installed");
	return 0;
}
int Fb4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 1, 4, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Front bumper 3 installed");
	return 0;
}
int Fb5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 1, 5, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Front bumper 3 installed");
	return 0;
}

int StockSk(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 3);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock side skirts installed");
	return 0;
}

int Sk0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 3, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Side skirts 1 installed");
	return 0;
}
int Sk1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 3, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Side skirts 2 installed");
	return 0;
}
int Sk2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 3, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Side skirts 3 installed");
	return 0;
}
int Sk3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 3, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Side skirts 4 installed");
	return 0;
}

int StockHood(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 7);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock hood installed");
	return 0;
}

int Hood0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Hood 1 installed");
	return 0;
}
int Hood1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Hood 2 installed");
	return 0;
}
int Hood2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Hood 3 installed");
	return 0;
}
int Hood3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Hood 4 installed");
	return 0;
}
int Hood4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 4, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Hood 5 installed");
	return 0;
}

int StockLFender(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 8);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock left fender installed");
	return 0;
}

int LFender0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 8, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Left fender 1 installed");
	return 0;
}
int LFender1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 8, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Left fender 2 installed");
	return 0;
}
int LFender2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 8, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Left fender 3 installed");
	return 0;
}

int StockRFender(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 8);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock right fender installed");
	return 0;
}

int RFender0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 9, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Right fender 1 installed");
	return 0;
}
int RFender1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 9, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Right fender 2 installed");
	return 0;
}
int RFender2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 9, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Right fender 3 installed");
	return 0;
}

int StockRoof(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 10);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock roof installed");
	return 0;
}

int Roof0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 10, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Roof 1 installed");
	return 0;
}
int Roof1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 10, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Roof 2 installed");
	return 0;
}
int Roof2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 10, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Roof 3 installed");
	return 0;
}
int Roof3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 10, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Roof 4 installed");
	return 0;
}

int StockInterior(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock interior/chassis installed");
	return 0;
}

int Interior0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 5, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Interior/Chassis installed");
	return 0;
}

int MaxLSCUpgrades(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod_kit(vehicle, 0);
	PaintCarExtra(vehicle, 0, 112);
	void(VEHICLE::SET_VEHICLE_ENGINE_ON(vehicle, true, 1));
	void(VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehicle));
	void(VEHICLE::TOGGLE_VEHICLE_MOD(vehicle, 20, 1));
	void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR1(vehicle, 255, 0, 0));
	if (ENTITY::DOES_ENTITY_EXIST(vehicle))
		unk_0xD3850671(vehicle, 1);
	set_vehicle_mod_kit(vehicle, 0);
	PaintCar(vehicle, 0, 0);
	PaintCarExtra(vehicle, 0, 0);	PaintCarExtra(vehicle, 0, 112);
	set_number_plate(vehicle, "HASTER");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	set_vehicle_tyres_can_burst(vehicle, 0);
	toggle_vehicle_mod(vehicle, 18, 1);
	toggle_vehicle_mod(vehicle, 22, 1);
	set_vehicle_mod(vehicle, 16, 5, 0);
	set_vehicle_mod(vehicle, 16, 4, 0);
	set_vehicle_mod(vehicle, 12, 2, 0);
	set_vehicle_mod(vehicle, 11, 3, 0);
	set_vehicle_mod(vehicle, 14, 15, 0);
	set_vehicle_mod(vehicle, 15, 3, 0);
	set_vehicle_mod(vehicle, 13, 2, 0);
	set_vehicle_wheel_type(vehicle, 6);
	set_vehicle_window_tint(vehicle, 5);
	set_vehicle_mod(vehicle, 23, 4, 1);
	set_vehicle_mod(vehicle, 24, 10, 1);
	set_vehicle_mod(vehicle, 0, 1, 0);
	set_vehicle_mod(vehicle, 1, 1, 0);
	set_vehicle_mod(vehicle, 2, 1, 0);
	set_vehicle_mod(vehicle, 3, 1, 0);
	set_vehicle_mod(vehicle, 4, 1, 0);
	set_vehicle_mod(vehicle, 5, 1, 0);
	set_vehicle_mod(vehicle, 6, 1, 0);
	set_vehicle_mod(vehicle, 7, 1, 0);
	set_vehicle_mod(vehicle, 8, 1, 0);
	set_vehicle_mod(vehicle, 9, 1, 0);
	set_vehicle_mod(vehicle, 10, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Your vehicle has been maxed out fam!");
	return 0;
}

int License1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "THEMAKER");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "EXTFORUM");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "SERENITY");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "RevoTeam");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "  COI  ");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "INSANITY");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, " ALONE ");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "LONEWOLF");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "HOMOSEXUAL");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "FUKMYASS");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "SUKMYASS");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "ILOVEYOU");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "INSANE");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "PSYCHOTIC");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}
int License15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_number_plate(vehicle, "NIGGER");
	SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ License Plate Changed!");
	return 0;
}


int Interior1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 5, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Interior/Chassis installed");
	return 0;
}
int Interior2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 5, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Interior/Chassis installed");
	return 0;
}
int Interior3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 5, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Interior/Chassis installed");
	return 0;
}

int StockGrill(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 6);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock grill installed");
	return 0;
}

int Grill0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 6, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Grill 1 installed");
	return 0;
}
int Grill1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 6, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Grill 2 installed");
	return 0;
}
int Grill2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 6, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Grill 3 installed");
	return 0;
}
int Grill3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 6, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Grill 4 installed");
	return 0;
}

int StockRb(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 2);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock rear bumper installed");
	return 0;
}

int Rb0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 2, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Rear bumper 1 installed");
	return 0;
}
int Rb1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 2, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Rear bumper 2 installed");
	return 0;
}
int Rb2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 2, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Rear bumper 3 installed");
	return 0;
}
int Rb3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 2, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Rear bumper 4 installed");
	return 0;
}

int StockSpoiler(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock spoiler installed");
	return 0;
}

int Spoiler0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Spoiler 1 installed");
	return 0;
}
int Spoiler1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Spoiler 2 installed");
	return 0;
}
int Spoiler2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Spoiler 3 installed");
	return 0;
}
int Spoiler3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Spoiler 4 installed");
	return 0;
}
int Spoiler4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 4, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Spoiler 5 installed");
	return 0;
}
int Spoiler5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 5, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Spoiler 6 installed");
	return 0;
}
int Spoiler6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 6, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Spoiler 7 installed");
	return 0;
}

int ExStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 4);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock exhaust installed");
	return 0;
}

int Ex0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 4, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Exhaust 1 installed");
	return 0;
}
int Ex1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 4, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Exhaust 2 installed");
	return 0;
}
int Ex2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 4, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Exhaust 3 installed");
	return 0;
}
int Ex3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 4, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Exhaust 4 installed");
	return 0;
}


int SuspStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 15);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock suspension installed");
	return 0;
}

int Susp0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 15, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Lowered suspension installed");
	return 0;
}

int Susp1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 15, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Street suspension installed");
	return 0;
}

int Susp2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 15, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Sports suspension installed");
	return 0;
}
int Susp3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 15, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Competition suspension installed");
	return 0;
}

int BrakeStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 12);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock brakes installed");
	return 0;
}

int Brake0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 12, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Street brakes installed");
	return 0;
}

int Brake1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 12, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Sports brakes installed");
	return 0;
}

int Brake2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 12, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Race brakes installed");
	return 0;
}

int TranStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 13);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock transmission installed");
	return 0;
}
int Tran0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 13, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Street transmission installed");
	return 0;
}
int Tran1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 13, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Sports transmission installed");
	return 0;
}
int Tran2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 13, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Race transmission installed");
	return 0;
}
int EngineStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 11);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Stock engine installed");
	return 0;
}
int Engine0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 11, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New engine has been installed!");
	return 0;
}
int Engine1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 11, 1, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New engine has been installed!");
	return 0;
}
int Engine2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 11, 2, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New engine has been installed!");
	return 0;
}
int Engine3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 11, 3, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New engine has been installed!");
	return 0;
}

int HighEnd0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int HighEnd1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int HighEnd2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int HighEnd3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int HighEnd4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int LSTeleport(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myvehicle;
	int myhandle = GetPlayerHandle(PlayerId());
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, -387.945007, -128.110916, 40.922359, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, -387.945007, -128.110916, 40.922359, 0, 0, 0, 1);
		}
	}
	return 0;
}

int Pumpl1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int object = create_object(-2084538847, -384.720184, -119.001358, 37.689453);
	freeze_entity_position(object, true);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Pumpkin Spawned!");
	return 0;
}

int Pumpl2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int object = create_object(-2084538847, -380.578644, -121.612473, 37.687027);
	freeze_entity_position(object, true);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Pumpkin Spawned!");
	return 0;
}

int Pumpl3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int object = create_object(-2084538847, -379.320770, -125.531517, 37.606079);
	freeze_entity_position(object, true);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Pumpkin Spawned!");
	return 0;
}

bool mountmessage = false;
int Mount(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!mountmessage) {
		mountmessage = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mountain Money Test Active");

	} else if (mountmessage) {
		mountmessage = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mountain Money Test Disabled");
	}
	return 0;
}

bool mountmessage2 = false;
int Mount2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!mountmessage2) {
		mountmessage2 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mountain Money Test Active");

	} else if (mountmessage2) {
		mountmessage2 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mountain Money Test Disabled");
	}
	return 0;
}

bool mountmessage3 = false;
int Mount3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!mountmessage3) {
		mountmessage3 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mountain Money Test Active");

	} else if (mountmessage3) {
		mountmessage3 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mountain Money Test Disabled");
	}
	return 0;
}

int MoneyTreeSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int object = create_object(452618762, 497.411865, 5596.209961, 794.412598);
	freeze_entity_position(object, true);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Money Mountain Tree Spawned!");
	return 0;
}

int MoneyTreeSpawn2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int object = create_object(452618762, 500.365845, 5595.204102, 794.668701);
	freeze_entity_position(object, true);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Money Mountain Tree Spawned!");
	return 0;
}

int MoneyTreeSpawn3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int object = create_object(452618762, 503.523010, 5595.892578, 794.891968);
	freeze_entity_position(object, true);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Money Mountain Tree Spawned!");
	return 0;
}

bool lsmessage1 = false;
int LS1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!lsmessage1) {
		lsmessage1 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ LS Money Test Active");

	} else if (lsmessage1) {
		lsmessage1 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ LS Money Test Disabled");
	}
	return 0;
}

bool lsmessage2 = false;
int LS2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!lsmessage2) {
		lsmessage2 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ LS Money Test Active");

	} else if (lsmessage2) {
		lsmessage2 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ LS Money Test Disabled");
	}
	return 0;
}

int Hanger2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myvehicle;
	int myhandle = GetPlayerHandle(PlayerId());
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, -939.680237, -3014.107666, 19.510429, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, -939.680237, -3014.107666, 19.510429, 0, 0, 0, 1);
		}
	}
	return 0;
}


bool mazebankswagger = false;
int MazeBankDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!mazebankswagger) {
		mazebankswagger = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Maze Bank Money Test Active");

	} else if (mazebankswagger) {
		mazebankswagger = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Maze Bank Money Test Disabled");
	}
	return 0;
}

int TeleMazeBank(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myvehicle;
	int myhandle = GetPlayerHandle(PlayerId());
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, -75.278778, -819.667053, 328.543488, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, -75.278778, -819.667053, 328.543488, 0, 0, 0, 1);
		}
	}
	return 0;
}

bool vaultswagger = false;
int Vault1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!vaultswagger) {
		vaultswagger = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Bank Vault Drop Active");

	} else if (vaultswagger) {
		vaultswagger = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Bank Vault Drop Disabled");
	}
	return 0;
}


int TeleVault(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myvehicle;
	int myhandle = GetPlayerHandle(PlayerId());
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, 262.252441, 214.976608, 100.952217, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, 262.252441, 214.976608, 100.952217, 0, 0, 0, 1);
		}
	}
	return 0;
}

bool hangerswag = false;
int Hanger1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!hangerswag) {
		hangerswag = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Hanger Airport Money Test Active");

	} else if (hangerswag) {
		hangerswag = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Hanger Airport Money Test Disabled");
	}
	return 0;
}

bool teepeeswag = false;
int TeePee(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!teepeeswag) {
		teepeeswag = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teepee Drop Active");

	} else if (teepeeswag) {
		teepeeswag = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teepee Drop Disabled");
	}
	return 0;
}

int Teepeetele(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myvehicle;
	int myhandle = GetPlayerHandle(PlayerId());
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, 288.363281, -1601.534912, 39.333374, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, 288.363281, -1601.534912, 39.333374, 0, 0, 0, 1);
		}
	}
	return 0;
}

bool helipadswag = false;
int HeliPadDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!helipadswag) {
		helipadswag = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Bank Vault Drop Active");

	} else if (helipadswag) {
		helipadswag = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Bank Vault Drop Disabled");
	}
	return 0;
}

int HeliPadTele(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myvehicle;
	int myhandle = GetPlayerHandle(PlayerId());
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, -1391.880371, -477.378723, 90.524811, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, -1391.880371, -477.378723, 90.524811, 0, 0, 0, 1);
		}
	}
	return 0;
}

bool lsmessage4 = false;
int LS4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!lsmessage4) {
		lsmessage4 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ LS Money Test Active");

	} else if (lsmessage4) {
		lsmessage4 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ LS Money Test Disabled");
	}
	return 0;
}

bool groundmoney = false;
int MoneyGround(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!groundmoney) {
		groundmoney = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Ground Money Test Active");

	} else if (groundmoney) {
		groundmoney = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Ground Money Test Disabled");
	}
	return 0;
}

bool mountmessage4 = false;
int Mount4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!mountmessage4) {
		mountmessage4 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mountain Money Test Active");

	} else if (mountmessage4) {
		mountmessage4 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mountain Money Test Disabled");
	}
	return 0;
}

int MountTele(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int myvehicle;
	int myhandle = GetPlayerHandle(PlayerId());
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, 497.411865, 5596.209961, 794.412598, 0, 0, 0, 1);
		} else {
			set_entity_coords(myhandle, 497.411865, 5596.209961, 794.412598, 0, 0, 0, 1);
		}
	}
	return 0;
}

bool lsmessage3 = false;
int LS3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!lsmessage3) {
		lsmessage3 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ LS Money Test Active");

	} else if (lsmessage3) {
		lsmessage3 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ LS Money Test Disabled");
	}
	return 0;
}

int HighEnd8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 18;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int HighEnd19(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 19;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Lowrider0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Lowrider1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int	Lowrider2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Lowrider3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Lowrider4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Lowrider14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Muscle0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Muscle1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Muscle2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Muscle3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Muscle4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Muscle17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Offroad0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Offroad1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Offroad2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Offroad3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Offroad4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Offroad5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Offroad6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Offroad7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Offroad8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Offroad9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 18;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Sport19(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 19;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport20(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 20;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport21(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 21;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 22;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport23(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 23;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Sport24(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 24;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int SUV0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int SUV1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int SUV2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int SUV3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int SUV4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int SUV18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 18;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Tuner0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Tuner1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Tuner2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Tuner3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Tuner4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 18;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}
int Tuner19(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 19;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Tuner20(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 20;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Tuner21(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 21;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Tuner22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 22;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Tuner23(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 23;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);	set_vehicle_mod(vehicle, 24, wheel, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ New wheels have been applied!");
	return 0;
}

int Weather15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	_CREATE_LIGHTNING_THUNDER;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Random Thunder!");
	return 0;
}


int Weather0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("BLIZZARD");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("CLEAR");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("CLEARING");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("CLOUDS");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("EXTRASUNNY");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("FOGGY");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("NEUTRAL");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("OVERCAST");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("RAIN");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("SMOG");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("SNOW");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("SNOWLIGHT");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_override_weather("THUNDER");
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Weather change been applied!");
	return 0;
}
int Weather13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int time = get_clock_hours() + 1;
	if (time > 23)
		time = 0;
	network_override_clock_time(time, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Set to hour + 1", time);
	return 0;
}

int Weather14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int time = get_clock_hours() - 1;
	if (time < 0)
		time = 23;
	network_override_clock_time(time, 0, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Set to hour - 1", time);
	return 0;
}


bool Create = false;
int ToggleCreator(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Create ^= true;
	snap ^= true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Creator Mode: ~b~ON!", Create ? "~b~ON,~HUD_COLOUR_YELLOWLIGHT~Aim at an object!" : "~r~OFF!");
	return 0;
}

void create_loop() {
	if (unk_0x8866D9D0(PlayerId(), &objecthandle)) {
		if (IsEntityVehicle(objecthandle)) {
		}
		if (IsEntityObject(objecthandle)) {
		}
	}
}

int SaveObjHandle1;
int SaveObjectHandle1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SaveObjHandle1 = objecthandle;
	return 0;
}

int SaveVehHandle1;
int SaveVehicleHandle1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SaveVehHandle1 = objecthandle;
	return 0;
}



void pitchToggle() {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectpitch1 = get_entity_pitch(objecthandle);
		PrintToScreen("Object Pitch:", 0.30000000, 0.91000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		PrintToScreenNum(objectpitch1, 0.39000000, 0.91000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}

	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectroll1 = get_entity_roll(objecthandle);
		PrintToScreen("Object Roll:", 0.440000000, 0.91000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		PrintToScreenNum(objectroll1, 0.53000000, 0.91000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}

	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		objectyaw1 = get_entity_heading(objecthandle);
		PrintToScreen("Object Yaw:", 0.570000000, 0.91000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		PrintToScreenNum(objectyaw1, 0.6600000, 0.91000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
}

void playerCoordsToggle() {
	float Pos[3];
	GetEntityCoords(PlayerPedId(), Pos);

	PrintToScreen("X:", 0.30000000, 0.91000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(Pos[0], 0.33000000, 0.91000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);

	PrintToScreen("Y:", 0.440000000, 0.91000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(Pos[1], 0.47000000, 0.91000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);

	PrintToScreen("Z:", 0.570000000, 0.91000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(Pos[2], 0.6000000, 0.91000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
}

void moneyTrollToggle() {
	float xCoord, yCoord, zCoord;
	xCoord = 501.905334;
	yCoord = 5595.983398;
	zCoord = 798.832886;

	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, xCoord, yCoord, zCoord, 0, 40000, 0x113FD533, 0, 1);
	}

}

void coordsToggle() {

	float Pos[3];
	GetEntityCoords(objecthandle, Pos);

	if (DoesEntityExist(objecthandle)) {
		PrintToScreen("X:", 0.30000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		PrintToScreenFloat(Pos[0], 0.33000000, 0.86000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}

	if (DoesEntityExist(objecthandle)) {
		PrintToScreen("Y:", 0.440000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		PrintToScreenFloat(Pos[1], 0.47000000, 0.86000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}

	if (DoesEntityExist(objecthandle)) {
		PrintToScreen("Z:", 0.570000000, 0.86000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		PrintToScreenFloat(Pos[2], 0.6000000, 0.86000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
}

void hashToggle() {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		int hash = get_entity_model(objecthandle);
		PrintToScreen("Object Hash:", 0.20000000, 0.80000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		PrintToScreenNum(hash, 0.29000000, 0.80000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
		if (IsEntityVehicle(objecthandle)) {
			PrintToScreen("Entity Type:~r~Vehicle", 0.39000000, 0.80000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		}
		if (IsEntityObject(objecthandle)) {
			PrintToScreen("Entity Type:~r~Object", 0.39000000, 0.80000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		}
	}
}

void speed() {
	int ispeed;
	int speedgunSpeed;
	if (!is_ped_on_foot(PlayerPedId())) {
		int car = GetCarCharIsIn(PlayerPedId(), 0);
		float speed = get_entity_speed(car);
		speed = speed * speedmul; // MaxSpeed (Default: 3.61)! (5.86)
		ispeed = (int)speed;

		float speedGun = get_entity_speed(objecthandle);
		speedGun = speedGun * speedmuls;
		speedgunSpeed = (int)speedGun;

		PrintToScreen("Speedometer MPH:", 0.45000000, 0.84000000, 240, 15, 20, 255, 0.80000000, 0.80000000, 0, 6);
		PrintToScreenNum(ispeed, 0.60000000, 0.84000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
		if (ispeed > 120) {
			PrintToScreenNum(ispeed, 0.64000000, 0.84000000, 255, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
		}
		if (ispeed > 180) {
			PrintToScreenNum(ispeed, 0.64000000, 0.84000000, 255, 165, 0, 255, 0.80000000, 0.80000000, 0, 6);
		}
		if (ispeed > 240) {
			PrintToScreenNum(ispeed, 0.64000000, 0.84000000, 255, 0, 0, 255, 0.80000000, 0.80000000, 0, 6);
		}
	}
}

void speedGunLoop() {
	int speedgunSpeed;
	float speedGun = get_entity_speed(objecthandle);
	speedGun = speedGun * speedmuls;
	speedgunSpeed = (int)speedGun;
	PrintToScreen("Speed Gun MPH:", 0.39000000, 0.84000000, 0, 240, 15, 20, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenNum(speedgunSpeed, 0.53000000, 0.84000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);

	if (speedgunSpeed < 120) {
		PrintToScreenNum(speedgunSpeed, 0.53000000, 0.74000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
	if (speedgunSpeed > 120) {
		PrintToScreenNum(speedgunSpeed, 0.53000000, 0.74000000, 255, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
	if (speedgunSpeed > 180) {
		PrintToScreenNum(speedgunSpeed, 0.53000000, 0.74000000, 255, 165, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
	if (speedgunSpeed > 240) {
		PrintToScreenNum(speedgunSpeed, 0.53000000, 0.74000000, 255, 0, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
}

#ifdef PRIVATE

bool allplayerdrop = false;
bool allplayer2k = false;
bool insane = false;
bool insane1 = false;
bool insane2 = false;
bool dildo = false;
bool paper = false;
bool gunmoney = false;
float cash[3];

int InsaneCash(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!insane) {
		insane = true;
		GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
		pexp = "scr_paleto_banknotes";
		pwvcheck12 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Insane Drop:~b~ON");

	} else if (insane) {
		insane = false;
		pwvcheck12 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Insane Drop:~r~OFF");
	}
	return 0;
}
int InsaneCash1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!insane1) {
		insane1 = true;
		GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
		pexp = "scr_paleto_banknotes";
		pwvcheck12 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Insane Drop:~b~ON");

	} else if (insane1) {
		insane1 = false;
		pwvcheck12 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Insane Drop:~r~OFF");
	}
	return 0;
}

int InsaneCash2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!insane2) {
		insane2 = true;
		GetEntityCoords(GetPlayerHandle(subMenuIndex), pcoords);
		pexp = "scr_paleto_banknotes";
		pwvcheck12 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Insane Drop:~b~ON");

	} else if (insane2) {
		insane2 = false;
		pwvcheck12 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Insane Drop:~r~OFF");
	}
	return 0;
}

int swagbags(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0x113FD533;
	return 0;
}

int Dildo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0xE6CB661E;
	return 0;
}

int Snowmanbg(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0xFFFFFFFF9F984011;
	return 0;
}

int XMAS1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0xE3BA450;
	return 0;
}

int WeedDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0x1AFA6A0A;
	return 0;
}

int PoolTable(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0x13351F02;
	return 0;
}

int Pumpkin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0x9BE9742E;
	return 0;
}

int SwordDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0xE2BA016F;
	return 0;
}

int CoffinDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0x1B6ED610;
	return 0;
}

int EggDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0x6B795EBC;
	return 0;
}

int MachineDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0xFFFFFFFF9F984011;
	return 0;
}

bool objectDrop = false;
int ObjectCashDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!objectDrop) {
		objectDrop = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Object Cash Drop:~b~Active~HUD_COLOUR_YELLOWLIGHT~Cone Object Works Best!");
	} else if (objectDrop) {
		objectDrop = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Object Cash Drop:~r~Disabled");
	}
	return 0;
}


bool onedrop = false;
float onecashPos[3];
int OneDollarCashDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0xBB427A69;
	return 0;
}

int MoneyTableDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Cashtype = 0x376C99F9;
	return 0;
}


float objectMoney[3];
void cashCreatorLoop() {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		GetEntityCoords(objecthandle, objectMoney);

		RequestModel(0x113FD533);
		if (HasModelLoaded(0x113FD533)) {
			create_ambient_pickup2(0xCE6FDD6B, objectMoney[0], objectMoney[1], objectMoney[2], 0, 40000, 0x113FD533, 0, 1);
		}
	}
}



void onecashloop() {
	GetEntityCoords(GetPlayerHandle(onecashclient), onecashPos);

	RequestModel(0xBB427A69);
	if (HasModelLoaded(0xBB427A69)) {
		create_ambient_pickup2(0xCE6FDD6B, onecashPos[0], onecashPos[1], onecashPos[2] + 1, 0, 1, 0xBB427A69, 0, 1);
	}
}

VOID commands2() {
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, -387.945007, -128.110916, 40.922359, 0, 40000, 0x113FD533, 0, 1);
	}
}

void MountainMoneyLoop1() {
	FLOAT Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, 497.411865, 5596.209961, 794.412598, 0, 40000, 0x113FD533, 0, 1);
	}
}

void MountainMoneyLoop2() {
	FLOAT Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, 500.365845, 5595.204102, 794.668701, 0, 40000, 0x113FD533, 0, 1);
	}
}

void MountainMoneyLoop3() {
	FLOAT Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, 503.523010, 5595.892578, 794.891968, 0, 40000, 0x113FD533, 0, 1);
	}
}

void LSMoneyLoop1() {
	FLOAT Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, -384.720184, -119.001358, 37.689453, 0, 40000, 0x113FD533, 0, 1);
	}
}

void SeatbeltLoop() {
	SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(PlayerPedId(), 1);
}

void SlotsLoop22() {
	if (GET_NUMBER_OF_PLAYERS() == 1) {
		PrintToScreen("Free Slots 15", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 2) {
		PrintToScreen("Free Slots 14", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 3) {
		PrintToScreen("Free Slots 13", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 4) {
		PrintToScreen("Free Slots 12", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 5) {
		PrintToScreen("Free Slots 11", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 6) {
		PrintToScreen("Free Slots 10", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 7) {
		PrintToScreen("Free Slots 9", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 8) {
		PrintToScreen("Free Slots 8", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 9) {
		PrintToScreen("Free Slots 7", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 10) {
		PrintToScreen("Free Slots 6", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 11) {
		PrintToScreen("Free Slots 5", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 12) {
		PrintToScreen("Free Slots 4", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 13) {
		PrintToScreen("Free Slots 3", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 14) {
		PrintToScreen("Free Slots 2", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 15) {
		PrintToScreen("Free Slots 1", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	}
	if (GET_NUMBER_OF_PLAYERS() == 16) {
		PrintToScreen("Free Slots 0", 0.15, 0.03, 255, 255, 255, 255, 0.75, 0.75, 1, 0);
	} else {

	}
}

void MazeBankLoop() {
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, -75.278778, -819.667053, 328.543488, 0, 40000, 0x113FD533, 0, 1);
	}
}

void VaultLoop() {
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, 265.559235, 213.957458, 103.952171, 0, 40000, 0x113FD533, 0, 1);
	}
}

void AirportLoop() {
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, -939.733337, -3013.409424, 22.610441, 0, 40000, 0x113FD533, 0, 1);
	}
}

void TeepeeSwagLoop() {
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, 288.363281, -1601.534912, 39.333374, 0, 40000, 0x113FD533, 0, 1);
	}
}

void HeliPadDropLoop() {
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, -1391.695313, -477.666351, 93.524757, 0, 40000, 0x113FD533, 0, 1);
	}
}

void LSMoneyLoop2() {
	FLOAT Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, -380.578644, -121.612473, 37.687027, 0, 40000, 0x113FD533, 0, 1);
	}
}

void LSDropLoop() {
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, -379.320770, -125.531517, 37.623383, 0, 40000, 0x113FD533, 0, 1);
	}
}

void GroundMoneyLoop() {
	FLOAT Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, Position[0], Position[1], Position[2], 0, 40000, 0x113FD533, 0, 1);
	}
}

void MountainMoneyLoop4() {
	FLOAT Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533)) {
		create_ambient_pickup2(0xCE6FDD6B, 501.453033, 5601.532715, 798.358887, 0, 40000, 0x113FD533, 0, 1);
	}
}


VOID SuperBreakLoop() {
	if (menuInputHandler->RightBumperDown()) {
		SET_VEHICLE_FORWARD_SPEED(GetCarCharIsIn(PlayerPedId(), 0), 0.0f);
	}
}

void allcashloop() {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		GetEntityCoords(Handle, allcash);
		RequestModel(0x113FD533);
		if (HasModelLoaded(0x113FD533)) {
			create_ambient_pickup(0xCE6FDD6B, allcash, 0, 40000, 0x113FD533, 0, 1);
		}
	}
}
#endif

void StopPlayerTasks(int playerID) {
	clear_ped_tasks_immediately(PlayerPedId());
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Stopped Tasks");
}

void StopPlayerTasks2(int objecthandle) {
	clear_ped_tasks_immediately(objecthandle);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Stopped Tasks");
}

void SuperJumpLoop() {
	set_super_jump_this_frame(PlayerId());
}
void SuperPunchLoop() {
	set_explosive_melee_this_frame(PlayerId());
}

void ExplosiveAmmoLoop() {
	set_explosive_ammo_this_frame(PlayerId());
}

void proppyloop0() {
	if (menuInputHandler->DpadRightDown() && !DpadRightDownPressed) {
		prop += 1;
		SET_PED_PROP_INDEX(PlayerPedId(), 0, prop, 0, 2);
		DpadRightDownPressed = true;
	} else if (!menuInputHandler->DpadRightDown()) {
		DpadRightDownPressed = false;
	}

	if (menuInputHandler->DPadLeftDown() && !DpadLeftDownPressed) {
		prop -= 1;
		SET_PED_PROP_INDEX(PlayerPedId(), 0, prop, 0, 2);
		DpadLeftDownPressed = true;
	} else if (!menuInputHandler->DPadLeftDown()) {
		DpadLeftDownPressed = false;
	}
}


void proppyloop() {
	if (menuInputHandler->DpadRightDown() && !DpadRightDownPressed) {
		prop += 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, prop, 0, 0);
		DpadRightDownPressed = true;
	} else if (!menuInputHandler->DpadRightDown()) {
		DpadRightDownPressed = false;
	}

	if (menuInputHandler->DPadLeftDown() && !DpadLeftDownPressed) {
		prop -= 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 1, prop, 0, 0);
		DpadLeftDownPressed = true;
	} else if (!menuInputHandler->DPadLeftDown()) {
		DpadLeftDownPressed = false;
	}
}

void proppyloop1() {
	if (menuInputHandler->DpadRightDown() && !DpadRightDownPressed) {
		prop += 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, prop, 0, 0);
		DpadRightDownPressed = true;
	} else if (!menuInputHandler->DpadRightDown()) {
		DpadRightDownPressed = false;
	}

	if (menuInputHandler->DPadLeftDown() && !DpadLeftDownPressed) {
		prop -= 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 4, prop, 0, 0);
		DpadLeftDownPressed = true;
	} else if (!menuInputHandler->DPadLeftDown()) {
		DpadLeftDownPressed = false;
	}
}
void proppyloop2() {
	if (menuInputHandler->DpadRightDown() && !DpadRightDownPressed) {
		prop += 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, prop, 0, 0);
		DpadRightDownPressed = true;
	} else if (!menuInputHandler->DpadRightDown()) {
		DpadRightDownPressed = false;
	}

	if (menuInputHandler->DPadLeftDown() && !DpadLeftDownPressed) {
		prop -= 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 11, prop, 0, 0);
		DpadLeftDownPressed = true;
	} else if (!menuInputHandler->DPadLeftDown()) {
		DpadLeftDownPressed = false;
	}
}
void proppyloop3() {
	if (menuInputHandler->DpadRightDown() && !DpadRightDownPressed) {
		prop += 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, prop, 0, 0);
		DpadRightDownPressed = true;
	} else if (!menuInputHandler->DpadRightDown()) {
		DpadRightDownPressed = false;
	}

	if (menuInputHandler->DPadLeftDown() && !DpadLeftDownPressed) {
		prop -= 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 6, prop, 0, 0);
		DpadLeftDownPressed = true;
	} else if (!menuInputHandler->DPadLeftDown()) {
		DpadLeftDownPressed = false;
	}
}
void proppyloop4() {
	if (menuInputHandler->DpadRightDown() && !DpadRightDownPressed) {
		prop += 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 3, prop, 0, 0);
		DpadRightDownPressed = true;
	} else if (!menuInputHandler->DpadRightDown()) {
		DpadRightDownPressed = false;
	}

	if (menuInputHandler->DPadLeftDown() && !DpadLeftDownPressed) {
		prop -= 1;
		PED::SET_PED_COMPONENT_VARIATION(PlayerPedId(), 3, prop, 0, 0);
		DpadLeftDownPressed = true;
	} else if (!menuInputHandler->DPadLeftDown()) {
		DpadLeftDownPressed = false;
	}
}
void cheat_1shotloop() {
	PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(PlayerId(), 25);
}
void FireAmmoLoop() {
	set_fire_ammo_this_frame(PlayerId());
}

void Passloop() {
	float pos[3];
	GetEntityCoords(GetPlayerHandle(cashclient), &pos[0], &pos[1], &pos[2]);
	ADD_OWNED_EXPLOSION(cashclient, pos[0], pos[1], pos[2], 32, 5, 0, 1, 5);
}

void Molotovloop() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), &Position[0], &Position[1], &Position[2]);
	AddExplosion1(Position[0], Position[1], Position[2] - 0.8f, MOLOTOV, 500.0f, true, false, 1);
	AddExplosion1(Position[0], Position[1] + 1, Position[2] - 0.8f, MOLOTOV, 500.0f, true, false, 2);
	AddExplosion1(Position[0], Position[1] - 1, Position[2] - 0.8f, MOLOTOV, 500.0f, true, false, 3);
	AddExplosion1(Position[0] + 1, Position[1], Position[2] - 0.8f, MOLOTOV, 500.0f, true, false, 4);
	AddExplosion1(Position[0] - 1, Position[1], Position[2] - 0.8f, MOLOTOV, 500.0f, true, false, 5);
}

void Molotovloop1() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), Position);
	AddExplosion(Position[0], Position[1], Position[2], BLIMP, FLT_MAX, true, false, 5);
	AddExplosion(Position[0], Position[1], Position[2], TRAIN, FLT_MAX, true, false, 5);
}


float ClonedPlayerPos[3];
void ClonePlayerProcess1() {
	int subMenuIndex = ClonePlayerIndex1;

	int Player = GetPlayerHandle(subMenuIndex);
	GetEntityCoords(Player, ClonedPlayerPos);
	CLONE_PED(Player, ClonedPlayerPos[0], ClonedPlayerPos[1], ClonedPlayerPos[2]);
	ClonePlayer1 = false;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Cloned Online Player!");
}



void Molotovloop2() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), Position);
	AddExplosion(Position[0], Position[1], Position[2] - 0.8f, PLANE_ROCKET, 8.0f, true, true, 0.0f);
	GetEntityCoords(GetPlayerHandle(cashclient), pcoords);
	pexp = "scr_alien_disintegrate";
	pwvcheck1 = true;
}

void Molotovloop3() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), Position);
	AddExplosion(Position[0], Position[1], Position[2] - 0.8f, DIR_FLAME, 8.0f, true, false, 0.0f);
}

void Molotovloop4() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), Position);
	AddExplosion(Position[0], Position[1], Position[2] - 0.8f, BZGAS, 8.0f, true, false, 0.0f);
}

void Molotovloop5() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), Position);
	AddExplosion(Position[0], Position[1], Position[2] - 0.8f, EXTINGUISHER, 8.0f, true, false, 0.0f);
}

void Molotovloop6() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), Position);
	AddExplosion(Position[0], Position[1], Position[2] - 0.8f, SMOKEGRENADELAUNCHER, 8.0f, true, false, 0.0f);
}

void Molotovloop7() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), Position);
	AddExplosion(Position[0], Position[1], Position[2] - 0.8f, FIREWORK, 8.0f, true, false, 0.0f);
}

void Molotovloop8() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), Position);
	AddExplosion(Position[0] + 2, Position[1] + 2, Position[2] + 2, GRENADE, 8.0f, true, false, 0.0f);
	AddExplosion(Position[0] + 3, Position[1] + 3, Position[2] + 3, GRENADE, 8.0f, true, false, 0.0f);
	AddExplosion(Position[0] + 1, Position[1] + 1, Position[2] + 1, GRENADE, 8.0f, true, false, 0.0f);
	AddExplosion(Position[0] - 1, Position[1], Position[2], GRENADE, 8.0f, true, false, 0.0f);
	AddExplosion(Position[0] - 2, Position[1], Position[2], GRENADE, 8.0f, true, false, 0.0f);
	AddExplosion(Position[0] - 3, Position[1], Position[2], GRENADE, 8.0f, true, false, 0.0f);
}

void Molotovloop9() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), Position);
	AddExplosion(Position[0], Position[1], Position[2] - 0.8f, DIR_WATER_HYDRANT, 8.0f, true, false, 0.0f);
}


void snowy343() {
	GAMEPLAY::SET_OVERRIDE_WEATHER("XMAS");
	if (!unk_0x9ACC6446("core_snow")) {
		unk_0xCFEA19A9("core_snow");
	} else {
		float f1;
		f1 = 1.0;
	}

}

void esplooop() {

	float pos[3];
	GetEntityCoords(GetPlayerHandle(cashclient), &pos[0], &pos[1], &pos[2]);

	float c1[3] = { (pos[0] - 0.5), (pos[1] - 0.5), (pos[2] + 1.0) };
	float c2[3] = { (pos[0] - 0.5), (pos[1] - 0.5), (pos[2] - 1.0) };
	float c3[3] = { (pos[0] - 0.5), (pos[1] + 0.5), (pos[2] - 1.0) };
	float c4[3] = { (pos[0] - 0.5), (pos[1] + 0.5), (pos[2] + 1.0) };
	float c5[3] = { (pos[0] + 0.5), (pos[1] - 0.5), (pos[2] + 1.0) };
	float c6[3] = { (pos[0] + 0.5), (pos[1] - 0.5), (pos[2] - 1.0) };
	float c7[3] = { (pos[0] + 0.5), (pos[1] + 0.5), (pos[2] - 1.0) };
	float c8[3] = { (pos[0] + 0.5), (pos[1] + 0.5), (pos[2] + 1.0) };

	DRAW_LINE(c1[0], c1[1], c1[2], c2[0], c2[1], c2[2], 72, 255, 0, 255);
	DRAW_LINE(c2[0], c2[1], c2[2], c3[0], c3[1], c3[2], 72, 255, 0, 255);
	DRAW_LINE(c3[0], c3[1], c3[2], c4[0], c4[1], c4[2], 72, 255, 0, 255);
	DRAW_LINE(c4[0], c4[1], c4[2], c1[0], c1[1], c1[2], 72, 255, 0, 255);
	DRAW_LINE(c5[0], c5[1], c5[2], c6[0], c6[1], c6[2], 72, 255, 0, 255);
	DRAW_LINE(c6[0], c6[1], c6[2], c7[0], c7[1], c7[2], 72, 255, 0, 255);
	DRAW_LINE(c7[0], c7[1], c7[2], c8[0], c8[1], c8[2], 72, 255, 0, 255);
	DRAW_LINE(c8[0], c8[1], c8[2], c5[0], c5[1], c5[2], 72, 255, 0, 255);
	DRAW_LINE(c1[0], c1[1], c1[2], c5[0], c5[1], c5[2], 72, 255, 0, 255);
	DRAW_LINE(c2[0], c2[1], c2[2], c6[0], c6[1], c6[2], 72, 255, 0, 255);
	DRAW_LINE(c3[0], c3[1], c3[2], c7[0], c7[1], c7[2], 72, 255, 0, 255);
	DRAW_LINE(c4[0], c4[1], c4[2], c8[0], c8[1], c8[2], 72, 255, 0, 255);


}

void lazerl() {

	float c1[3] = { (-0.5), (-0.5), (+1.0) };
	float c2[3] = { (-0.5), (-0.5), (-1.0) };
	float c3[3] = { (-0.5), (+0.5), (-1.0) };
	float c4[3] = { (-0.5), (+0.5), (+1.0) };
	float c5[3] = { (+0.5), (-0.5), (+1.0) };
	float c6[3] = { (+0.5), (-0.5), (-1.0) };
	float c7[3] = { (+0.5), (+0.5), (-1.0) };
	float c8[3] = { (+0.5), (+0.5), (+1.0) };

	DRAW_LINE(c1[0], c1[1], c1[2], c5[0], c5[1], c5[2], 72, 255, 0, 255);
	DRAW_LINE(c2[0], c2[1], c2[2], c6[0], c6[1], c6[2], 72, 255, 0, 255);

}





bool cower;
int Cower(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = PlayerId();
	animid = subMenuIndex;
	cower = true;
	return 0;
}

int StopLoop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	StopPlayerTasks(subMenuIndex);
	return 0;
}

int BuffDude(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xDA116E7E;
	return 0;
}

int BuffDude2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFC923247C;
	return 0;
}

int indianf(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0xFFFFFFFFBAD7BB80;
	return 0;
}

int BuffGirl(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 0x3BD99114;
	return 0;
}
bool comps = false;
int Random(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	comps = true;
	return 0;
}

int Random3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	SET_PED_RANDOM_PROPS(PlayerPedId());
	return 0;
}

bool comps2 = false;
int Random2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	comps2 = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Changed Ped(Aim At Ped With Creator Mode)");
	return 0;
}

int ClearCheating1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	give_achievement_to_player(1);
	give_achievement_to_player(2);
	give_achievement_to_player(3);
	give_achievement_to_player(4);
	give_achievement_to_player(5);
	give_achievement_to_player(6);
	give_achievement_to_player(7);
	give_achievement_to_player(8);
	give_achievement_to_player(9);
	give_achievement_to_player(10);
	give_achievement_to_player(11);
	give_achievement_to_player(12);
	give_achievement_to_player(13);
	give_achievement_to_player(14);
	give_achievement_to_player(15);
	give_achievement_to_player(16);
	give_achievement_to_player(17);
	give_achievement_to_player(18);
	give_achievement_to_player(19);
	give_achievement_to_player(20);
	give_achievement_to_player(21);
	give_achievement_to_player(22);
	give_achievement_to_player(23);
	give_achievement_to_player(24);
	give_achievement_to_player(25);
	give_achievement_to_player(26);
	give_achievement_to_player(27);
	give_achievement_to_player(28);
	give_achievement_to_player(29);
	give_achievement_to_player(30);
	give_achievement_to_player(31);
	give_achievement_to_player(32);
	give_achievement_to_player(33);
	give_achievement_to_player(34);
	give_achievement_to_player(35);
	give_achievement_to_player(36);
	give_achievement_to_player(37);
	give_achievement_to_player(38);
	give_achievement_to_player(39);
	give_achievement_to_player(40);
	give_achievement_to_player(41);
	give_achievement_to_player(42);
	give_achievement_to_player(43);
	give_achievement_to_player(44);
	give_achievement_to_player(45);
	give_achievement_to_player(46);
	give_achievement_to_player(47);
	give_achievement_to_player(48);
	give_achievement_to_player(49);
	give_achievement_to_player(50);
	give_achievement_to_player(51);
	give_achievement_to_player(52);
	give_achievement_to_player(53);
	give_achievement_to_player(54);
	give_achievement_to_player(55);
	give_achievement_to_player(56);
	give_achievement_to_player(57);
	give_achievement_to_player(58);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gave Achievements!");
	return 0;
}

int ClearCheating(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MPPLY_REPORT_STRENGTH"), 0);
	set_stat_int(get_hash_key("MPPLY_COMMEND_STRENGTH"), 100);
	set_stat_int(get_hash_key("MPPLY_FRIENDLY"), 100);
	set_stat_int(get_hash_key("MPPLY_HELPFUL"), 100);
	set_stat_int(get_hash_key("MPPLY_GRIEFING"), 0);
	set_stat_int(get_hash_key("MPPLY_VC_ANNOYINGME"), 0);
	set_stat_int(get_hash_key("MPPLY_VC_HATE"), 0);
	set_stat_int(get_hash_key("MPPLY_OFFENSIVE_LANGUAGE"), 0);
	set_stat_int(get_hash_key("MPPLY_OFFENSIVE_TAGPLATE"), 0);
	set_stat_int(get_hash_key("MPPLY_OFFENSIVE_UGC"), 0);
	set_stat_int(get_hash_key("MPPLY_BAD_CREW_NAME"), 0);
	set_stat_int(get_hash_key("MPPLY_BAD_CREW_MOTTO"), 0);
	set_stat_int(get_hash_key("MPPLY_BAD_CREW_STATUS"), 0);
	set_stat_int(get_hash_key("MPPLY_BAD_CREW_EMBLEM"), 0);
	set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);
	set_stat_int(get_hash_key("MPPLY_ISPUNISHED"), 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Cleared Of All Reports!");
	return 0;
}



int RageModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 880829941;
	return 0;
}

int MalePants(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 2109968527;
	return 0;
}
bool slender = false;
int Slendy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	slender = true;
	scriptsetModel = 0x92991b72;
	return 0;
}
int FemalePants(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	scriptsetModel = 602513566;
	return 0;
}
bool activenos = false;
int ToggleNos(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	activenos = !activenos;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Nitrous: ON.", activenos ? "~b~ON, Press LS To Use Nitrous!" : "~r~OFF!");
	return 0;
}
bool drift = false;
int Slidey(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!drift) {
		unk_0x90D3A0D9(vehicle, 1);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drift:~b~ON");
		drift = true;
	} else if (drift) {
		unk_0x90D3A0D9(vehicle, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drift:~r~OFF");
		drift = false;
	}
	return 0;
}

bool handdrift = false;
int SlideyHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!handdrift) {

		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drift Car:~b~ON! (Press A)");
		handdrift = true;
	} else if (handdrift) {

		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drift Car Turned:~r~Off");
		handdrift = false;
	}
	return 0;
}

void slideyloop() {
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_A)) {
		int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		unk_0x90D3A0D9(vehicle, 1);
	}
	if (CONTROLS::IS_CONTROL_RELEASED(2, Button_A)) {
		int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
		unk_0x90D3A0D9(vehicle, 0);
	}
}

int Lock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Player = GetPlayerHandle(PlayerPedId());
	int Vehicle = GetCarCharIsIn(Player, 0);
	set_vehicle_doors_locked(Vehicle, 4);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle has been locked!");
	return 0;
}

int Unlock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Player = GetPlayerHandle(PlayerPedId());
	int Vehicle = GetCarCharIsIn(Player, 0);
	set_vehicle_doors_locked(Vehicle, 0);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle has been Unlocked!");
	return 0;
}

int SwapSeats(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	task_shuffle_to_next_vehicle_seat(PlayerPedId(), vehicle);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Swapped Vehicle Seats!");
	return 0;
}


bool creatorRocket, creatorRequested;
int ToggleCreatorRocket(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorRocket) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Rockets:~b~ON,~HUD_COLOUR_YELLOWLIGHT~Press RT!");
		creatorRocket = true;
		creatorRequested = false;
		custom = false;
	} else if (creatorRocket) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Rockets:~r~OFF");
		creatorRocket = false;
		custom = false;
	}
	return 0;
}

bool creatorFlares5, creatorERequested;
int ToggleCreatorFlares5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorFlares5) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Grenade:~b~ON,~b~Press RT!");
		creatorFlares5 = true;
		creatorERequested = false;
		custom = false;
	} else if (creatorFlares5) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Grenade:~r~OFF");
		creatorFlares5 = false;
		custom = false;
	}
	return 0;
}

bool creatorgun, createGRequested;
int Togglegravegun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorgun) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gravity Gun:~b~ON!(A to Position, RT to Launch)");
		creatorgun = true;
		createGRequested = false;
		custom = false;
	} else if (creatorgun) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gravity Gun:~r~OFF");
		creatorgun = false;
		custom = false;
	}
	return 0;
}

bool swaglazers, createlazesz;
int Togglelazesrs1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!swaglazers) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle Lazers:~b~ON!");
		swaglazers = true;
		createlazesz = false;
	} else if (swaglazers) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle Lazers:~r~OFF");
		swaglazers = false;
	}
	return 0;
}

bool swaglazers1, createlazesz1;
int Togglelazesrs3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!swaglazers1) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Blue Neon:~b~ON!");
		swaglazers1 = true;
		createlazesz1 = false;
	} else if (swaglazers1) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Blue Neon:~r~OFF");
		swaglazers1 = false;
	}
	return 0;
}



bool creatorRocket2, creatorCRequested;
int ToggleCreatorRocket2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorRocket2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Tank:~b~ON,~HUD_COLOUR_YELLOWLIGHT~Press RT!");
		creatorRocket2 = true;
		creatorCRequested = false;
	} else if (creatorRocket2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Tank:~r~OFF");
		creatorRocket2 = false;
	}
	return 0;
}

bool creatorRocket3, creatorTRequested;
int ToggleCreatorRocket3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorRocket3) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Tank:~b~ON,~HUD_COLOUR_YELLOWLIGHT~Press RT!");
		creatorRocket3 = true;
		creatorTRequested = false;
		custom = false;
	} else if (creatorRocket3) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Tank:~r~OFF");
		creatorRocket3 = false;
		custom = false;
	}
	return 0;
}


bool creatorFlares, creatorFRequested;
int ToggleCreatorFlares(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorFlares) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Rockets:~b~ON,~HUD_COLOUR_YELLOWLIGHT~Press RT!~r~Note: If they aren't working try it later.");
		creatorFlares = true;
		creatorFRequested = false;
		custom = false;
	} else if (creatorFlares) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Rockets:~r~OFF");
		creatorFlares = false;
		custom = false;
	}
	return 0;
}

bool creatorFlares2, creatorPRequested;
int ToggleCreatorFlares2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!creatorFlares2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Guns:~b~ON,~HUD_COLOUR_YELLOWLIGHT~Press RT!~r~Note: If they aren't working try it later.");
		creatorFlares2 = true;
		creatorPRequested = false;
		custom = false;
	} else if (creatorFlares2) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Guns:~r~OFF");
		creatorFlares2 = false;
		custom = false;
	}
	return 0;
}


bool rocket, requested;
int ToggleRocket(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!rocket) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Rockets On, Press LS To Shoot them!");
		rocket = true;
		requested = false;
		custom = false;
	} else if (rocket) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Rockets Off");
		rocket = false;
		custom = false;
	}

	return 0;
}

bool fwrocket;
int ToggleFWVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!fwrocket) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Fireworks On, Press LS To Shoot them!");
		fwrocket = true;
		custom = false;
	} else if (fwrocket) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Fireworks Off");
		fwrocket = false;
		custom = false;
	}

	return 0;
}

bool vehicleFlare;
int ToggleVehicleFlare(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!vehicleFlare) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Flares On, Press LS To Shoot them!");
		vehicleFlare = true;
		custom = false;
	} else if (vehicleFlare) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Flares Off");
		vehicleFlare = false;
		custom = false;
	}

	return 0;
}

bool vehicleSavage;
int ToggleVehicleSavage(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!vehicleSavage) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Savage Bullets On, Press X To Shoot them!");
		vehicleSavage = true;
		custom = false;
	} else if (vehicleSavage) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Savage Bullets Off");
		vehicleSavage = false;
		custom = false;
	}
	return 0;
}

void vehicleSavageLoop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId())) {

		if (menuInputHandler->XButtonDown() && !is_ped_on_foot(PedID)) {
			printf("Pressed LS\n");
			int vehicle = GetCarCharIsIn(PedID, 0),
				Model = get_entity_model(vehicle);
			printf("Got vehicle %i \n", vehicle);
			get_model_dimensions(Model, dim_min, dim_max);
			printf("Got dimensions\n");

			if (is_control_pressed(2, 198)) {
				printf("Pressed RS\n");
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
				printf("Got offset\n");
			} else {
				printf("Got vehicle %i \n", vehicle);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);
				printf("Got offset 2\n");
				if (Model == get_hash_key("surfer") || Model == get_hash_key("blazer")) {
					printf("Checked entity model\n");
					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				} else {
					printf("Checked entity model 2\n");
					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed(vehicle);
			if ((vSpeed * vSpeed) > 1500) {
				rocket_speed = (vSpeed * vSpeed) + 100;
				printf("Got and multiplied rocket / car speed\n");
			} else {
				rocket_speed = 1500;
			}
			if (custom) {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("VEHICLE_WEAPON_PLAYER_LAZER"), rocketid, 1, 1, rocket_speed);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("VEHICLE_WEAPON_PLAYER_LAZER"), rocketid, 1, 1, rocket_speed);
			} else {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("VEHICLE_WEAPON_PLAYER_LAZER"), PedID, 1, 1, rocket_speed);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("VEHICLE_WEAPON_PLAYER_LAZER"), PedID, 1, 1, rocket_speed);
			}
			printf("Fired Vehicle Savage Bullets \n");
		}
	}
}

void fwrocketloop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId())) {

		if (is_control_just_pressed(2, 200) && !is_ped_on_foot(PedID)) {
			printf("Pressed LS\n");
			int vehicle = GetCarCharIsIn(PedID, 0),
				Model = get_entity_model(vehicle);
			printf("Got vehicle %i \n", vehicle);
			get_model_dimensions(Model, dim_min, dim_max);
			printf("Got dimensions\n");

			if (is_control_pressed(2, 198)) {
				printf("Pressed RS\n");
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
				printf("Got offset\n");
			} else {
				printf("Got vehicle %i \n", vehicle);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);
				printf("Got offset 2\n");
				if (Model == get_hash_key("surfer") || Model == get_hash_key("blazer")) {
					printf("Checked entity model\n");
					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				} else {
					printf("Checked entity model 2\n");
					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed(vehicle);
			if ((vSpeed * vSpeed) > 1500) {
				rocket_speed = (vSpeed * vSpeed) + 100;
				printf("Got and multiplied rocket / car speed\n");
			} else {
				rocket_speed = 1500;
			}
			if (custom) {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_FIREWORK"), rocketid, 1, 1, rocket_speed);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_FIREWORK"), rocketid, 1, 1, rocket_speed);
			} else {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_FIREWORK"), PedID, 1, 1, rocket_speed);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_FIREWORK"), PedID, 1, 1, rocket_speed);
			}
			printf("Fired vehicle rockets \n");
		}
	}
}

void vehicleFlareLoop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId())) {

		if (is_control_just_pressed(2, 200) && !is_ped_on_foot(PedID)) {
			printf("Pressed LS\n");
			int vehicle = GetCarCharIsIn(PedID, 0),
				Model = get_entity_model(vehicle);
			printf("Got vehicle %i \n", vehicle);
			get_model_dimensions(Model, dim_min, dim_max);
			printf("Got dimensions\n");

			if (is_control_pressed(2, 198)) {
				printf("Pressed RS\n");
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
				printf("Got offset\n");
			} else {
				printf("Got vehicle %i \n", vehicle);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);
				printf("Got offset 2\n");
				if (Model == get_hash_key("surfer") || Model == get_hash_key("blazer")) {
					printf("Checked entity model\n");
					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				} else {
					printf("Checked entity model 2\n");
					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed(vehicle);
			if ((vSpeed * vSpeed) > 1500) {
				rocket_speed = (vSpeed * vSpeed) + 100;
				printf("Got and multiplied rocket / car speed\n");
			} else {
				rocket_speed = 1500;
			}
			if (custom) {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_FLAREGUN"), rocketid, 1, 1, rocket_speed);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_FLAREGUN"), rocketid, 1, 1, rocket_speed);
			} else {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_FLAREGUN"), PedID, 1, 1, rocket_speed);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_FLAREGUN"), PedID, 1, 1, rocket_speed);
			}
			printf("Fired Vehicle Flares \n");
		}
	}
}


void creatorRocketLoop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();


	if (is_control_just_pressed(0, 24) && !is_ped_on_foot(PedID)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);

			targetpos1[2]--;
			targetpos2[2]--;
		}
		rocket_speed = 1500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), PedID, 1, 1, rocket_speed);
		shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), PedID, 1, 1, rocket_speed);
	}
}

void drawlines1() {
	int ufo;
	int Position[3];
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		objectspawn = true;
		model = 0xFFFFFFFF8D41C8BD;
		x10 = 0.3, y10 = 0, z10 = 2, x20 = 0, y20 = 0, z20 = 0;
		float h;
		h = get_entity_heading(PlayerPedId());
		ufo = create_object(model, Position[0], Position[1], Position[2]);
		set_entity_heading(ufo, h);
		attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
	}

}




void drawlines() {
	int ModelVeh;
	int VehHandle = GetCarCharIsIn(PlayerPedId(), 0);
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3];
	if (is_ped_in_any_vehicle(PlayerPedId())) {
		ModelVeh = get_entity_model(VehHandle);
		get_model_dimensions(ModelVeh, dim_min, dim_max);
		get_offset_from_entity_in_world_coords(VehHandle, dim_min[0] - 0.0f, dim_min[1] - 0.5f, 0.0f, launchpos1);
		get_offset_from_entity_in_world_coords(VehHandle, dim_max[0] + 0.0f, dim_min[1] - 0.5f, 0.0f, launchpos2);
		get_offset_from_entity_in_world_coords(VehHandle, dim_min[0] - 0.0f, dim_min[1] + 300.5f, 0.5f, targetpos1);
		get_offset_from_entity_in_world_coords(VehHandle, dim_max[0] + 0.0f, dim_min[1] + 300.5f, 0.5f, targetpos2);
		float StartCoords1[] = { launchpos1[0], launchpos1[1], launchpos1[2] };
		float StartCoords2[] = { launchpos2[0], launchpos2[1], launchpos2[2] };
		float EndCoords1[] = { targetpos1[0], targetpos1[1], targetpos1[2] };
		float EndCoords2[] = { targetpos2[0], targetpos2[1], targetpos2[2] };
		DRAW_LINE(StartCoords1[0], StartCoords1[1], StartCoords1[2], EndCoords1[0], EndCoords1[1], EndCoords1[2], 0, 255, 0, 255);
		DRAW_LINE(StartCoords2[0], StartCoords2[1], StartCoords2[2], EndCoords2[0], EndCoords2[1], EndCoords2[2], 0, 255, 0, 255);
	}

}

void lazeraimloop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3];
	get_model_dimensions(PlayerPedId(), dim_min, dim_max);
	get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0] - 0.0f, dim_min[1] - 0.0f, 0.0f, launchpos1);
	get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0] - 0.0f, dim_min[1] + 0.0f, 0.0f, targetpos1);
	float StartCoords1[] = { launchpos1[0], launchpos1[1], launchpos1[2] };
	float EndCoords1[] = { targetpos1[0], targetpos1[1], targetpos1[2] };
	DRAW_LINE(StartCoords1[0], StartCoords1[1], StartCoords1[2], EndCoords1[0], EndCoords1[1], EndCoords1[2], 0, 255, 0, 255);

}

void creatorRocketLoop2() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();

	if (is_control_just_pressed(0, 24) && !is_ped_on_foot(PedID)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);

			targetpos1[2]--;
			targetpos2[2]--;
		}
		rocket_speed = 1500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("VEHICLE_WEAPON_TANK"), PedID, 1, 1, rocket_speed);
		shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("VEHICLE_WEAPON_TANK"), PedID, 1, 1, rocket_speed);
	}
}

void creatorFlaresLoop5() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();

	if (is_control_just_pressed(0, 24) && !is_ped_on_foot(PedID)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);

			targetpos1[2]--;
			targetpos2[2]--;
		}
		rocket_speed = 1500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_GRENADELAUNCHER"), PedID, 1, 1, rocket_speed);
		shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_GRENADELAUNCHER"), PedID, 1, 1, rocket_speed);
	}
}

void creatorRocketLoop3() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();

	if (is_control_just_pressed(0, 24) && !is_ped_on_foot(PedID)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);

			targetpos1[2]--;
			targetpos2[2]--;
		}
		rocket_speed = 1500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("VEHICLE_WEAPON_ROTORS"), PedID, 1, 1, rocket_speed);
		shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("VEHICLE_WEAPON_ROTORS"), PedID, 1, 1, rocket_speed);
	}
}

void creatorFlaresLoop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();

	if (is_control_just_pressed(0, 24) && !is_ped_on_foot(PedID)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);

			targetpos1[2]--;
			targetpos2[2]--;
		}
		rocket_speed = 1500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_FLAREGUN"), PedID, 1, 1, rocket_speed);
		shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_FLAREGUN"), PedID, 1, 1, rocket_speed);
	}
}

void creatorFlaresLoop2() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	PedID = PlayerPedId();

	if (is_control_just_pressed(0, 24) && !is_ped_on_foot(PedID)) {
		int vehicle = PedID,
			Model = get_entity_model(vehicle);
		get_model_dimensions(Model, dim_min, dim_max);

		if (is_control_pressed(2, 198)) {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
		} else {
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
			get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
			get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);

			targetpos1[2]--;
			targetpos2[2]--;
		}
		rocket_speed = 1500;

		shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_STUNGUN"), PedID, 1, 1, rocket_speed);
		shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_STUNGUN"), PedID, 1, 1, rocket_speed);
	}
}

void rocketloop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId())) {

		if (is_control_just_pressed(2, 200) && !is_ped_on_foot(PedID)) {
			printf("Pressed LS\n");
			int vehicle = GetCarCharIsIn(PedID, 0),
				Model = get_entity_model(vehicle);
			printf("Got vehicle %i \n", vehicle);
			get_model_dimensions(Model, dim_min, dim_max);
			printf("Got dimensions\n");

			if (is_control_pressed(2, 198)) {
				printf("Pressed RS\n");
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);
				printf("Got offset\n");
			} else {
				printf("Got vehicle %i \n", vehicle);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);
				printf("Got offset 2\n");
				if (Model == get_hash_key("surfer") || Model == get_hash_key("blazer")) {
					printf("Checked entity model\n");
					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				} else {
					printf("Checked entity model 2\n");
					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed(vehicle);
			if ((vSpeed * vSpeed) > 1500) {
				rocket_speed = (vSpeed * vSpeed) + 100;
				printf("Got and multiplied rocket / car speed\n");
			} else {
				rocket_speed = 1500;
			}
			if (custom) {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), rocketid, 1, 1, rocket_speed);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), rocketid, 1, 1, rocket_speed);
			} else {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), PedID, 1, 1, rocket_speed);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), PedID, 1, 1, rocket_speed);
			}
			printf("Fired vehicle rockets \n");
		}
	}
}

bool superMG;
int ToggleSuperMG(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!superMG) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Super Machineguns On, Press X To Shoot them!");
		superMG = true;
		requested = false;
		custom = false;
	} else if (superMG) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Super Machineguns Off");
		superMG = false;
		custom = false;
	}
	return 0;
}

void superMGloop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId())) {

		if (menuInputHandler->XButtonDown() && !is_ped_on_foot(PedID)) {

			int vehicle = GetCarCharIsIn(PedID, 0),
				Model = get_entity_model(vehicle);

			get_model_dimensions(Model, dim_min, dim_max);


			if (is_control_pressed(2, 198)) {

				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);

			} else {

				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);

				if (Model == get_hash_key("surfer") || Model == get_hash_key("blazer")) {

					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				} else {

					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed(vehicle);
			if ((vSpeed * vSpeed) > 1500) {
				rocket_speed = (vSpeed * vSpeed) + 100;

			} else {
				rocket_speed = 1500;
			}
			if (custom) {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 10, 1, get_hash_key("WEAPON_REMOTESNIPER"), rocketid, 0, 1, -1082130432);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 10, 1, get_hash_key("WEAPON_REMOTESNIPER"), rocketid, 0, 1, -1082130432);
			} else {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 10, 1, get_hash_key("WEAPON_REMOTESNIPER"), PedID, 0, 1, -1082130432);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 10, 1, get_hash_key("WEAPON_REMOTESNIPER"), PedID, 0, 1, -1082130432);
			}

		}
	}
}

bool Mini;
int ToggleMini(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!Mini) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Machineguns On, Press X To Shoot them!");
		Mini = true;
		requested = false;
		custom = false;
	} else if (Mini) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Machineguns Off");
		Mini = false;
		custom = false;
	}
	return 0;
}

void miniloop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId())) {

		if (menuInputHandler->XButtonDown() && !is_ped_on_foot(PedID)) {

			int vehicle = GetCarCharIsIn(PedID, 0),
				Model = get_entity_model(vehicle);

			get_model_dimensions(Model, dim_min, dim_max);


			if (is_control_pressed(2, 198)) {

				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2);

			} else {

				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2);
				get_offset_from_entity_in_world_coords(vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1);
				get_offset_from_entity_in_world_coords(vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2);

				if (Model == get_hash_key("surfer") || Model == get_hash_key("blazer")) {

					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				} else {

					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed(vehicle);
			if ((vSpeed * vSpeed) > 1500) {
				rocket_speed = (vSpeed * vSpeed) + 100;

			} else {
				rocket_speed = 1500;
			}
			if (custom) {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 10, 0, get_hash_key("WEAPON_ASSAULTRIFLE"), rocketid, 1, 1, -1082130432);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 10, 0, get_hash_key("WEAPON_ASSAULTRIFLE"), rocketid, 1, 1, -1082130432);
			} else {
				shoot_single_bullet_between_coords(launchpos1, targetpos1, 10, 0, get_hash_key("WEAPON_ASSAULTRIFLE"), PedID, 1, 1, -1082130432);
				shoot_single_bullet_between_coords(launchpos2, targetpos2, 10, 0, get_hash_key("WEAPON_ASSAULTRIFLE"), PedID, 1, 1, -1082130432);
			}

		}
	}
}

void nosloop() {
	if (menuInputHandler->BButtonLSDown()) {
		int Handle = GetCarCharIsIn(PlayerPedId(), 0);
		if (Handle != 0) {
			//if (is_vehicle_on_all_wheels(Handle)){
			set_vehicle_boost_active(Handle, 1);
			unk_0x1D980479("RaceTurbo", 0, 0);
			apply_force_to_entity(Handle, true, 0, 3.0f, 0, 0, 0, 0, true, true, true, true, false, true);
			set_vehicle_boost_active(Handle, 0);
		}
	}
}

void TimeSlowLoop() {
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_LT)) {
		SET_TIME_SCALE(.20);
		unk_0x1D980479("HeistLocate", 0, false);

	}

	else if (CONTROLS::IS_CONTROL_RELEASED(2, Button_LT)) {
		SET_TIME_SCALE(1.00);
		unk_0x06BB5CDA("HeistLocate");

	}
}

void TimeSlowLoop0() {
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_LT)) {
		SET_TIME_SCALE(.20);
		unk_0x1D980479("DrugsMichaelAliensFightIn", 0, false);
		unk_0x1D980479("DrugsMichaelAliensFight", 0, false);
	}

	else if (CONTROLS::IS_CONTROL_RELEASED(2, Button_LT)) {
		SET_TIME_SCALE(1.00);
		unk_0x06BB5CDA("DrugsMichaelAliensFightIn");
		unk_0x06BB5CDA("DrugsMichaelAliensFight");
		unk_0x06BB5CDA("DrugsMichaelAliensFightOut");
	}
}
/////////////////////////////////////
void TimeFastLoop() {
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_LB)) {
		SET_TIME_SCALE(.20);
		unk_0x1D980479("HeistLocate", 0, false);

	}

	else if (CONTROLS::IS_CONTROL_RELEASED(2, Button_LB)) {
		SET_TIME_SCALE(1.00);
		unk_0x06BB5CDA("HeistLocate");

	}
}

void TimeFastLoop0() {
	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_LT)) {
		SET_TIME_SCALE(.20);
		unk_0x1D980479("DrugsMichaelAliensFightIn", 0, false);
		unk_0x1D980479("DrugsMichaelAliensFight", 0, false);
	}

	else if (CONTROLS::IS_CONTROL_RELEASED(2, Button_LT)) {
		SET_TIME_SCALE(1.00);
		unk_0x06BB5CDA("DrugsMichaelAliensFightIn");
		unk_0x06BB5CDA("DrugsMichaelAliensFight");
		unk_0x06BB5CDA("DrugsMichaelAliensFightOut");
	}
}

void gravityGunloop2() {
	float Position[3], dim_min[3], dim_max[3], Pos[3];
	float objPitch = get_entity_pitch(objecthandle);

	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_A)) {
		get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0], dim_min[1] + 4, 2.5f, Position);
		get_ground_z_for_3d_coord(Position[0], Position[1], Position[2], &Position[2]);
		GetEntityCoords(PlayerPedId(), Pos);
		if (network_request_control_of_entity(objecthandle)) {
			freeze_entity_position(objecthandle, true);
			set_entity_collision(objecthandle, true);
			set_entity_heading(objecthandle, get_entity_heading(PlayerPedId()));
			set_entity_coords(objecthandle, Position[0], Position[1], Position[2], objPitch, 0, 0, 1);
		}
	}

	if (CONTROLS::IS_CONTROL_PRESSED(2, Button_RT)) {
		if (DoesEntityExist(objecthandle)) {
			network_request_control_of_entity(objecthandle);
			freeze_entity_position(objecthandle, false);
			set_entity_collision(objecthandle, true);
			{
				apply_force_to_entity(objecthandle, true, 0, 80, 0, 0, 0, 0, true, true, true, true, false, true);
			}
		}
	}

}


DWORD WINAPI KeyboardThread(LPVOID Value) {
	int Index = (int)Value;
	switch (Index) {
	case 0:
		if (custom_per) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom Performance", L"Please enter your desired performance 0 - 999", Username2, 4, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			printf("Entered Float = %f \n", result);
			set_vehicle_rpm(GetCarCharIsIn(PlayerPedId(), 0), result);
			custom_per = false;
		}
		break;
	case 1:
		if (custom_plate) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_DEFAULT, L"", L"Custom Plate Shop", L"Please enter your desired plate", Username2, 9, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			char str[9];
			wcstombs(str, Username2, 9);
			set_number_plate(GetCarCharIsIn(PlayerPedId(), 0), str);
			custom_plate = false;
		}
		break;
	case 2:
		ZeroMemory(&Overlapped2, sizeof(Overlapped2));
		XShowKeyboardUI(0, VKBD_DEFAULT, L"", L"Custom Model Changer", L"Please Enter Your Desired Model Name.", Username2, 50, &Overlapped2);
		while (!XHasOverlappedIoCompleted(&Overlapped2))
			Sleep(100);
		char str2[20];
		wcstombs(str2, Username2, 20);
		scriptsetModel = get_hash_key(str2);
		break;
	case 3:
		ZeroMemory(&Overlapped2, sizeof(Overlapped2));
		XShowKeyboardUI(0, VKBD_DEFAULT, L"", L"Custom Vehicles", L"Please Enter Your Desired Vehicle Name.", Username2, 50, &Overlapped2);
		while (!XHasOverlappedIoCompleted(&Overlapped2))
			Sleep(100);
		char str1[20];
		wcstombs(str1, Username2, 20);
		car = true;
		scriptsetModel = get_hash_key(str1);
		break;
	case 4:
		ZeroMemory(&Overlapped2, sizeof(Overlapped2));
		XShowKeyboardUI(0, VKBD_DEFAULT, L"", L"Custom Object", L"Please enter your desired object name (Example p_spinning_anus_s) \nNOTE: You may need to enter model more then once for it to register!", Username2, 50, &Overlapped2);
		while (!XHasOverlappedIoCompleted(&Overlapped2))
			Sleep(100);
		char str3[20];
		wcstombs(str3, Username2, 20);
		objectspawn = true;
		normalspawn = true;
		model = get_hash_key(str3);
		break;
	case 5:
		if (custom_rankMP0) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom Rank (Character 1)", L"Please enter desired XP \nExample: Rank 120 = 2,165,850 \nMax Level 8000 = 1,787,576,850", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			printf("Entered Float = %f \n", result);
			set_stat_int(get_hash_key("MP0_CHAR_XP_FM"), result);
			custom_rankMP0 = false;
		}
		break;
	case 6:
		if (custom_rankMP1) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom Rank (Character 2)", L"Please enter desired XP \nExample: Rank 120 = 2165850 \nMax Level 8000 = 1,787,576,850", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			printf("Entered Float = %f \n", result);
			set_stat_int(get_hash_key("MP1_CHAR_XP_FM"), result);
			custom_rankMP1 = false;
		}
		break;
	case 7:
		if (custom_rankMP2) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom Rank (Character 3)", L"Please enter desired XP \nExample: Rank 120 = 2165850 \nMax Level 8000 = 1,787,576,850", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			printf("Entered Float = %f \n", result);
			set_stat_int(get_hash_key("MP2_CHAR_XP_FM"), result);
			custom_rankMP2 = false;
		}
		break;
	case 8:
		if (custom_money) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom Money", L"Please enter desired Money \nRange: 1 - 999,999,999", Username2, 10, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			printf("Entered Float = %f \n", result);
			((void(*)(int, int, int))0x82C616D8)(result, 0, 1);
			ShowMessageOnScreen("~b~ You received: ", result, " $");
			custom_money = false;
		}
		break;
	case 9:
		if (custom_teleport) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_IP_ADDRESS, L"", L"Custom Teleporter", L"Enter the X Coordinates", Username2, 12, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result1 = _wtof(Username2);
			printf("Entered Float = %f \n", result1);
			XShowKeyboardUI(0, VKBD_LATIN_IP_ADDRESS, L"", L"Custom Teleporter", L"Enter the Y Coordinates", Username3, 12, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result2 = _wtof(Username3);
			printf("Entered Float = %f \n", result2);
			XShowKeyboardUI(0, VKBD_LATIN_IP_ADDRESS, L"", L"Custom Teleporter", L"Enter the Z Coordinates", Username4, 12, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result3 = _wtof(Username4);
			printf("Entered Float = %f \n", result3);
			float x, y, z;
			x = result1, y = result2, z = result3;
			int myhandle = GetPlayerHandle(PlayerId());
			int myvehicle;
			if (is_ped_in_any_vehicle(myhandle)) {
				myvehicle = GetCarCharIsIn(myhandle, 0);
				if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
					set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
				} else {
					set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
				}
			}
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to Custom Position");
			return 0;
			custom_teleport = false;
		}
		break;
	case 10:
		if (custom_rgb124) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom RGB Shop", L"Please Enter Custom R", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(GetCarCharIsIn(PlayerPedId(), 0), result, 0, 0);
			custom_rgb124 = false;
		}
		break;
	case 11:
		if (custom_rgb125) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom RGB Shop", L"Please Enter Custom G", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(GetCarCharIsIn(PlayerPedId(), 0), 0, result, 0);
			custom_rgb125 = false;
		}
		break;
	case 12:
		if (custom_rgb126) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom RGB Shop", L"Please Enter Custom B", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(GetCarCharIsIn(PlayerPedId(), 0), 0, 0, result);
			custom_rgb126 = false;
		}
		break;
	case 13:
		if (custom_kills) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom Kills", L"Please enter desired deaths.", Username2, 10, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			set_stat_int(get_hash_key("MPPLY_KILLS_PLAYERS"), result);
			ShowMessageOnScreen("~b~Set Player Kills!");
			custom_kills = false;
		}
		break;
	case 14:
		if (custom_deaths) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom Deaths", L"Please enter desired kills.", Username2, 10, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			set_stat_int(get_hash_key("MPPLY_DEATHS_PLAYER"), result);
			ShowMessageOnScreen("~b~Set Player Deaths!");
			custom_deaths = false;
		}
		break;
	case 15:
		if (custom_rgb127) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom RGB Shop", L"Please Enter Custom R", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(GetCarCharIsIn(PlayerPedId(), 0), result, 0, 0);
			custom_rgb127 = false;
		}
		break;
	case 16:
		if (custom_rgb128) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom RGB Shop", L"Please Enter Custom G", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(GetCarCharIsIn(PlayerPedId(), 0), 0, result, 0);
			custom_rgb128 = false;
		}
		break;
	case 17:
		if (custom_rgb129) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom RGB Shop", L"Please Enter Custom B", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(GetCarCharIsIn(PlayerPedId(), 0), 0, 0, result);
			custom_rgb129 = false;
		}
		break;
	case 18:
		if (custom_rgb130) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom RGB Shop", L"Please Enter Custom B", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(GetCarCharIsIn(PlayerPedId(), 0), result, 0, 0);
			custom_rgb130 = false;
		}
		break;
	case 19:
		if (custom_rgb131) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom RGB Shop", L"Please Enter Custom B", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(GetCarCharIsIn(PlayerPedId(), 0), 0, result, 0);
			custom_rgb131 = false;
		}
		break;
	case 20:
		if (custom_rgb132) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Custom RGB Shop", L"Please Enter Custom B", Username2, 11, &Overlapped2);
			while (!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(GetCarCharIsIn(PlayerPedId(), 0), 0, 0, result);
			custom_rgb132 = false;
		}
	}
	return 0;
}

int TogglePerf(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_per = true;
	CreateThread(0, 0, KeyboardThread, 0, 0, 0);
	return 0;
}

int CustomModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {


	wtf = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)2, 0, 0);
	return 0;
}

int CustomVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	CreateThread(0, 0, KeyboardThread, (LPVOID)3, 0, 0);
	return 0;
}

int CustomObject(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	CreateThread(0, 0, KeyboardThread, (LPVOID)4, 0, 0);
	return 0;
}

int CustomRankMP0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rankMP0 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)5, 0, 0);
	return 0;
}

int CustomRGB420(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rgb124 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)10, 0, 0);
	return 0;
}

int CustomRGB421(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rgb125 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)11, 0, 0);
	return 0;
}

int CustomRGB422(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rgb126 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)12, 0, 0);
	return 0;
}

int CustomRGB423(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rgb127 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)15, 0, 0);
	return 0;
}

int CustomRGB424(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rgb128 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)16, 0, 0);
	return 0;
}

int CustomRGB425(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rgb129 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)17, 0, 0);
	return 0;
}

int CustomRGB426(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rgb130 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)18, 0, 0);
	return 0;
}

int CustomRGB427(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rgb131 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)19, 0, 0);
	return 0;
}

int CustomRGB428(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rgb132 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)20, 0, 0);
	return 0;
}

int CustomKills(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_kills = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)13, 0, 0);
	return 0;
}
int CustomDeaths(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_deaths = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)14, 0, 0);
	return 0;
}

int SendText(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	custome_text = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)22, 0, 0);
	return 0;
}

int CustomRankMP1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_rankMP1 = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)6, 0, 0);
	return 0;
}

int GiveCustomMoney(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_money = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)8, 0, 0);
	return 0;
}
int TeleCustom(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemTest, void *functionParameters) {
	custom_teleport = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)9, 0, 0);
	return 0;
}

bool speedon = false;
int Speed2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!speedon) {
		*(float*)0x82003A48 = 0.50f;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Grip:~b~ON!");
		speedon = true;
	} else {
		*(float*)0x82003A48 = 0.16666667f;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Grip:~r~OFF!");
		speedon = false;
	}
	return 0;
}


int AttachPedHandle;
int PlayersHandle[2];
bool AttachTo = false;
int AttachBouy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle = selectedMenuIndexes->operator[](1);
	PlayersHandle[0] = GetPlayerHandle(AttachPedHandle);
	PlayersHandle[1] = PlayerPedId();
	if (PlayersHandle[1] == PlayersHandle[0]) {

		return 0;
	}
	if (!AttachTo) {
		attach_entity_to_entity(PlayersHandle[1], PlayersHandle[0], -0.5, 0, -0.3, 0, 0, 0, 0);
		AttachTo = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Attached To Player!");
	} else if (AttachTo) {
		detach_entity(PlayerPedId());
		AttachTo = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Detached From Player");
	}
	return 0;
}

int AttachPedHandle1;
bool AttachTo3 = false;
int AttachPedHead(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle1 = selectedMenuIndexes->operator[](1);
	PlayersHandle[0] = GetPlayerHandle(AttachPedHandle);
	PlayersHandle[1] = PlayerPedId();
	if (PlayersHandle[1] == PlayersHandle[0]) {

		return 0;
	}
	if (!AttachTo) {
		attach_entity_to_entity(PlayersHandle[1], PlayersHandle[0], 0, 0, 0, 1.0, 0, 0, 0);
		AttachTo = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Attached To Players Head!");
	} else if (AttachTo) {
		detach_entity(PlayerPedId());
		AttachTo = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Detached From Player");
	}
	return 0;
}

int AttachPedHandle2;
bool AttachTo2 = false;
int AttachPedLeft(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle2 = selectedMenuIndexes->operator[](1);
	PlayersHandle[0] = GetPlayerHandle(AttachPedHandle);
	PlayersHandle[1] = PlayerPedId();
	if (PlayersHandle[1] == PlayersHandle[0]) {

		return 0;
	}
	if (!AttachTo) {
		attach_entity_to_entity(PlayersHandle[1], PlayersHandle[0], 0, -0.5, 0, 0, 0, 0, 0);
		AttachTo = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Attached To Players Left!");
	} else if (AttachTo) {
		detach_entity(PlayerPedId());
		AttachTo = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Detached From Player");
	}
	return 0;
}

int AttachPedHandle3;
bool AttachTo6 = false;
int AttachPedRight(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle3 = selectedMenuIndexes->operator[](1);
	PlayersHandle[0] = GetPlayerHandle(AttachPedHandle);
	PlayersHandle[1] = PlayerPedId();
	if (PlayersHandle[1] == PlayersHandle[0]) {

		return 0;
	}
	if (!AttachTo) {
		attach_entity_to_entity(PlayersHandle[1], PlayersHandle[0], 0, 0.5, 0, 0, 0, 0, 0);
		AttachTo = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Attached To Players Right!");
	} else if (AttachTo) {
		detach_entity(PlayerPedId());
		AttachTo = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Detached From Player");
	}
	return 0;
}

int AttachPedHandle4;
bool AttachTo7 = false;
int AttachPedFront(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle4 = selectedMenuIndexes->operator[](1);
	PlayersHandle[0] = GetPlayerHandle(AttachPedHandle);
	PlayersHandle[1] = PlayerPedId();
	if (PlayersHandle[1] == PlayersHandle[0]) {

		return 0;
	}
	if (!AttachTo) {
		attach_entity_to_entity(PlayersHandle[1], PlayersHandle[0], 0, 0, 0.5, 0, 0, 0, 0);
		AttachTo = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Attached Infront of Player!");
	} else if (AttachTo) {
		detach_entity(PlayerPedId());
		AttachTo = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Detached From Player");
	}
	return 0;
}

bool pedobject;
bool spawn_cage;
int spawnedobject;
bool spawn_egg = false;
int AttachBouy2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1803116220);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 0x796e);
	if (HasModelLoaded(1803116220)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(1803116220, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Egg To Player!");
	return 0;
}

int GiveFishingPoles(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-1910604593);
		int head = get_ped_bone_index(GetPlayerHandle(i), 6286);
		if (HasModelLoaded(-1910604593)) {
			x10 = 0.2, y10 = 0, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(-1910604593, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
	}
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-1910604593);
		int head = get_ped_bone_index(GetPlayerHandle(i), 36029);
		if (HasModelLoaded(-1910604593)) {
			x10 = 0.2, y10 = 0, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(-1910604593, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fishing Pole To All Players!");
		}
	}
	return 0;
}


int GiveCampFire(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-1065766299);
		int head = get_ped_bone_index(GetPlayerHandle(i), 28422);
		if (HasModelLoaded(-1065766299)) {
			x10 = 0.2, y10 = 0, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fire To All Players!");
		}
	}
	return 0;
}

int GiveFerrisWheel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-1003748966);
		int head = get_ped_bone_index(GetPlayerHandle(i), 24818);
		if (HasModelLoaded(-1003748966)) {
			x10 = 0.2, y10 = 0, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(-1003748966, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Ferris Wheel To All Players!");
		}
	}
	return 0;
}

int GiveFoodVan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-272361894);
		int head = get_ped_bone_index(GetPlayerHandle(i), 24818);
		if (HasModelLoaded(-272361894)) {
			x10 = 0.2, y10 = 0, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(-272361894, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Food Van To All Players!");
		}
	}
	return 0;
}

int GiveOrangeShit(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(148511758);
		int head = get_ped_bone_index(GetPlayerHandle(i), 24818);
		if (HasModelLoaded(148511758)) {
			x10 = 0.2, y10 = 0, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(148511758, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Orange Ball To All Players!");
		}
	}
	return 0;
}

int AttachDickToAll25(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-1729226035);
		RequestModel(-2054442544);
		int head = get_ped_bone_index(GetPlayerHandle(i), 11816);
		if (HasModelLoaded(-2054442544)) {
			x10 = 0.19, y10 = 0.18, z10 = 0.05, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(-2054442544, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-2054442544)) {
			x10 = 0.19, y10 = 0.18, z10 = -0.05, x20 = 0, y20 = -180, z20 = 0;
			attachobj = create_object(-2054442544, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-1729226035)) {
			x10 = 0.14, y10 = 0.25, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
			attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-1729226035)) {
			x10 = 0.14, y10 = 0.55, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
			attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-1729226035)) {
			x10 = 0.14, y10 = 0.40, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
			attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Hotdog To All Players!");
	}
	return 0;
}

int DickToAll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-491126417);
		int head = get_ped_bone_index(GetPlayerHandle(i), 31086);
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 90, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 100, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 110, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 130, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 150, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 160, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 170, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 180, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 70, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 50, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 30, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 20, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 10, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		if (HasModelLoaded(-491126417)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 0, z20 = 0;
			attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
		}
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Sword Head To All Players!");
	}

	return 0;
}



int SmallChristAll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(238789712);
		if (HasModelLoaded(238789712)) {
			x10 = 0, y10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(238789712, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), -1, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Small Christmas To All Players!");
		}
	}
	return 0;
}

int AllWaterShit(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(350476011);
		if (HasModelLoaded(350476011)) {
			z10 = -1.0, y10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(350476011, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), -1, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Water Cone To All Players!");
		}
	}
	return 0;
}

int Allcage(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(959275690);
		if (HasModelLoaded(959275690)) {
			z10 = 0, y10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(959275690, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), 0, x10, y10, z10, x20, y20, z20);
			detach_entity(attachobj);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Caged All Players!");
		}
	}
	return 0;
}

int Allcage1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(959275690);
		if (HasModelLoaded(959275690)) {
			z10 = 0, y10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(959275690, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), 0, x10, y10, z10, x20, y20, z20);
			detach_entity(attachobj);
			AddExplosion(Position[0], Position[1] + 1, Position[2] - 0.8f, BZGAS, 8.0f, true, false, 0.0f);
			AddExplosion(Position[0] - 1, Position[1], Position[2] - 0.8f, BZGAS, 8.0f, true, false, 0.0f);
			AddExplosion(Position[0] + 1, Position[1], Position[2] - 0.8f, BZGAS, 8.0f, true, false, 0.0f);
			AddExplosion(Position[0], Position[1] - 1, Position[2] - 0.8f, BZGAS, 8.0f, true, false, 0.0f);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Kill The Jews!");
		}
	}
	return 0;
}

int AllWaterShit2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-1750759319);
		if (HasModelLoaded(-1750759319)) {
			z10 = -1.0, y10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(-1750759319, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), -1, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Cola Floaty To All Players!");
		}
	}
	return 0;
}

int AllWaterShit3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-1720704599);
		if (HasModelLoaded(-1720704599)) {
			z10 = -1.0, y10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(-1720704599, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), -1, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Chandelier To All Players!");
		}
	}
	return 0;
}

int BigFootAll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-915071241);
		int head65 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
		if (HasModelLoaded(-915071241)) {
			x10 = 0.02, y10 = 0, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
			attachobj = create_object(-915071241, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head65, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Big Foot To All Players!");
		}
	}
	return 0;
}

int HardHatAll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-537490919);
		int head32 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
		if (HasModelLoaded(-537490919)) {
			x10 = 0.15, y10 = 0, z10 = 0, x20 = 0, y20 = 90, z20 = 0.0;
			attachobj = create_object(-537490919, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head32, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Hat To All Players!");
		}
	}
	return 0;
}

int HatAll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-1929385697);
		int head32 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
		if (HasModelLoaded(-1929385697)) {
			x10 = 0.15, y10 = 0, z10 = 0, x20 = 0, y20 = 90, z20 = 0.0;
			attachobj = create_object(-1929385697, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head32, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Straw Hat To All Players!");
		}
	}
	return 0;
}

int Allguns(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		model = spawnedobject;
		RequestModel(-929681224);
		int back = get_ped_bone_index(GetPlayerHandle(PlayerId()), 24817);
		if (HasModelLoaded(-929681224)) {
			x10 = 0.4, y10 = 0.115, z10 = 0.2, x20 = -90.0, y20 = -90.0, z20 = 0.0;
			x30 = 0.4, y30 = 0.115, z30 = -0.2, x40 = -90.0, y40 = -90.0, z40 = 0.0;
			int attachobj1 = create_object(-929681224, Position[0], Position[1], Position[2]);
			int attachobj2 = create_object(-929681224, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj1, GetPlayerHandle(i), back, x10, y10, z10, x20, y20, z20);
			attach_entity_to_entity(attachobj2, GetPlayerHandle(i), back, x30, y30, z30, x40, y40, z40);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Machine Guns To All Players!");
		}
	}
	return 0;
}

int Allufohead(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-956377380);
		int head32 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
		if (HasModelLoaded(-956377380)) {
			x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
			attachobj = create_object(-956377380, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head32, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Ufo Head To All Players!");
		}
	}
	return 0;
}

void InsaneLoop1() {
	GetEntityCoords(GetPlayerHandle(cashclient), cash);
	RequestModel(0x6B795EBC);
	if (HasModelLoaded(0x6B795EBC));
	RequestModel(0xFFFFFFFF9F984011);
	if (HasModelLoaded(0xFFFFFFFF9F984011));
	RequestModel(0x1B6ED610);
	if (HasModelLoaded(0x1B6ED610));
	RequestModel(0xE2BA016F);
	if (HasModelLoaded(0xE2BA016F));
	RequestModel(0x9BE9742E);
	if (HasModelLoaded(0x9BE9742E))
		RequestModel(0x13351F02);
	if (HasModelLoaded(0x13351F02))
		RequestModel(0x1AFA6A0A);
	if (HasModelLoaded(0x1AFA6A0A))
		RequestModel(0xE3BA450);
	if (HasModelLoaded(0xE3BA450))
		RequestModel(0xE6CB661E);
	if (HasModelLoaded(0xE6CB661E))
		RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533))
		RequestModel(0xBB427A69);
	if (HasModelLoaded(0xBB427A69))
		RequestModel(0x376C99F9);
	if (HasModelLoaded(0x376C99F9)) {
		set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
		set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);
		create_ambient_pickup2(0x5DE0AD3E, cash[0], cash[1] + 5.00, cash[2], 0, 20000, Cashtype, 0, 1);
		create_ambient_pickup2(0x5DE0AD3E, cash[0], cash[1] + 5.00, cash[2], 0, 20000, Cashtype, 0, 1);
		set_stat_int(get_hash_key("MP0_MPPLY_WAS_I_BAD_SPORT"), 0);
		set_stat_int(get_hash_key("MP1_MPPLY_WAS_I_BAD_SPORT"), 0);
		set_stat_int(get_hash_key("MP3_MPPLY_WAS_I_BAD_SPORT"), 0);
	}
}

void InsaneLoop2() {
	GetEntityCoords(GetPlayerHandle(cashclient), cash);
	RequestModel(0x6B795EBC);
	if (HasModelLoaded(0x6B795EBC));
	RequestModel(0xFFFFFFFF9F984011);
	if (HasModelLoaded(0xFFFFFFFF9F984011));
	RequestModel(0x1B6ED610);
	if (HasModelLoaded(0x1B6ED610));
	RequestModel(0xE2BA016F);
	if (HasModelLoaded(0xE2BA016F));
	RequestModel(0x9BE9742E);
	if (HasModelLoaded(0x9BE9742E))
		RequestModel(0x13351F02);
	if (HasModelLoaded(0x13351F02))
		RequestModel(0x1AFA6A0A);
	if (HasModelLoaded(0x1AFA6A0A))
		RequestModel(0xE3BA450);
	if (HasModelLoaded(0xE3BA450))
		RequestModel(0xE6CB661E);
	if (HasModelLoaded(0xE6CB661E))
		RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533))
		RequestModel(0xBB427A69);
	if (HasModelLoaded(0xBB427A69))
		RequestModel(0x376C99F9);
	if (HasModelLoaded(0x376C99F9)) {
		set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
		set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);
		create_ambient_pickup2(0xCE6FDD6B, cash[0], cash[1], cash[2] + 2.00, 0, 40000, Cashtype, 0, 1);
		create_ambient_pickup2(0xCE6FDD6B, cash[0] + 0.2, cash[1], cash[2] + 5.00, 0, 40000, Cashtype, 0, 1);
		create_ambient_pickup2(0xCE6FDD6B, cash[0] - 0.2, cash[1], cash[2] + 7.00, 0, 40000, Cashtype, 0, 1);
		create_ambient_pickup2(0xCE6FDD6B, cash[0] + 0.5, cash[1], cash[2] + 8.00, 0, 40000, Cashtype, 0, 1);
		create_ambient_pickup2(0xCE6FDD6B, cash[0] - 0.5, cash[1], cash[2] + 10.00, 0, 40000, Cashtype, 0, 1);
		set_stat_int(get_hash_key("MP0_MPPLY_WAS_I_BAD_SPORT"), 0);
		set_stat_int(get_hash_key("MP1_MPPLY_WAS_I_BAD_SPORT"), 0);
		set_stat_int(get_hash_key("MP3_MPPLY_WAS_I_BAD_SPORT"), 0);
	}
}

void InsaneLoop() {
	GetEntityCoords(GetPlayerHandle(cashclient), cash);
	RequestModel(0x6B795EBC);
	if (HasModelLoaded(0x6B795EBC));
	RequestModel(0xFFFFFFFF9F984011);
	if (HasModelLoaded(0xFFFFFFFF9F984011));
	RequestModel(0x1B6ED610);
	if (HasModelLoaded(0x1B6ED610));
	RequestModel(0xE2BA016F);
	if (HasModelLoaded(0xE2BA016F));
	RequestModel(0x9BE9742E);
	if (HasModelLoaded(0x9BE9742E))
		RequestModel(0x13351F02);
	if (HasModelLoaded(0x13351F02))
		RequestModel(0x1AFA6A0A);
	if (HasModelLoaded(0x1AFA6A0A))
		RequestModel(0xE3BA450);
	if (HasModelLoaded(0xE3BA450))
		RequestModel(0xE6CB661E);
	if (HasModelLoaded(0xE6CB661E))
		RequestModel(0x113FD533);
	if (HasModelLoaded(0x113FD533))
		RequestModel(0xBB427A69);
	if (HasModelLoaded(0xBB427A69))
		RequestModel(0x376C99F9);
	if (HasModelLoaded(0x376C99F9)) {
		set_stat_int(get_hash_key("MPPLY_GAME_EXPLOITS"), 0);
		set_stat_int(get_hash_key("MPPLY_EXPLOITS"), 0);
		create_ambient_pickup2(0x5DE0AD3E, cash[0], cash[1], cash[2] + 5.00, 0, 20000, Cashtype, 0, 1);
		create_ambient_pickup2(0x5DE0AD3E, cash[0] + 5.00, cash[1], cash[2] + 5.00, 0, 20000, Cashtype, 0, 1);
		create_ambient_pickup2(0x5DE0AD3E, cash[0] - 5.00, cash[1], cash[2] + 5.00, 0, 20000, Cashtype, 0, 1);
		create_ambient_pickup2(0x5DE0AD3E, cash[0], cash[1] + 5.00, cash[2] + 5.00, 0, 20000, Cashtype, 0, 1);
		create_ambient_pickup2(0x5DE0AD3E, cash[0], cash[1] - 5.00, cash[2] + 5.00, 0, 20000, Cashtype, 0, 1);
		set_stat_int(get_hash_key("MP0_MPPLY_WAS_I_BAD_SPORT"), 0);
		set_stat_int(get_hash_key("MP1_MPPLY_WAS_I_BAD_SPORT"), 0);
		set_stat_int(get_hash_key("MP3_MPPLY_WAS_I_BAD_SPORT"), 0);
	}
}


int Innertube(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(1677315747);
		if (HasModelLoaded(1677315747)) {
			x10 = 0, y10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(1677315747, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), -1, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Pool Tube to All players!");
		}
	}
	return 0;
}

int GiveBballGame(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		GetEntityCoords(GetPlayerHandle(i), Position);
		float h;
		int attachobj;
		model = spawnedobject;
		RequestModel(-1525817904);
		int head = get_ped_bone_index(GetPlayerHandle(i), 24818);
		if (HasModelLoaded(-1525817904)) {
			x10 = 0.2, y10 = 0, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(-1525817904, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(i), head, x10, y10, z10, x20, y20, z20);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached BBall Arcade To All Players!");
		}
	}
	return 0;
}


bool spawn_sword = false;
int Sword(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	GiveWeaponDelayed(PlayerPedId(), 0x99B507EA, 9999, 1);
	spawnedobject = get_hash_key("prop_cs_katana_01");
	spawn_sword = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ You have been given a sword!");
	return 0;
}

bool spawn_glove = false;
int Glove(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	spawnedobject = get_hash_key("prop_boxing_glove_01");
	spawn_glove = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ You have been given a boxing glove!");
	return 0;
}

int AttachCone(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-534360227);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-534360227)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0;
		attachobj = create_object(-534360227, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached cone to player!");
	return 0;
}


int AttachTV(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1036195894);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(1036195894)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0;
		attachobj = create_object(1036195894, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached TV to player!");
	return 0;
}

int AttachTurn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(867556671);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(867556671)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(867556671, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Turn Tables to Hands!");
	return 0;
}

bool spawn_minigun_cannons = false;
int AttachMinugunCannons(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_minigun_cannons = true;
	spawnedobject = -929681224;
	if (spawn_minigun_cannons) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		float h;
		int attachobj;
		int model1 = spawnedobject;
		int model2 = spawnedobject;
		RequestModel(model1);
		RequestModel(model2);
		int back = get_ped_bone_index(GetPlayerHandle(animid), 24817);
		if (HasModelLoaded(model1) && HasModelLoaded(model2)) {
			x10 = 0.4, y10 = 0.115, z10 = 0.2, x20 = -90.0, y20 = -90.0, z20 = 0.0;
			x30 = 0.4, y30 = 0.115, z30 = -0.2, x40 = -90.0, y40 = -90.0, z40 = 0.0;
			int attachobj1 = create_object(model1, Position[0], Position[1], Position[2]);
			int attachobj2 = create_object(model2, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj1, GetPlayerHandle(animid), back, x10, y10, z10, x20, y20, z20);
			attach_entity_to_entity(attachobj2, GetPlayerHandle(animid), back, x30, y30, z30, x40, y40, z40);
		}
		spawn_minigun_cannons = false;
	}
	ShowMessageOnScreen("~b~ Attached Miniguns To Player!");
	return 0;
}

int Attachufonhead(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-956377380);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-956377380)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-956377380, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached UFO To Player!");
	return 0;
}

int AttachTV2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1486270996);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-1486270996)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1486270996, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached active TV to player!");
	return 0;
}

int AttachSoda(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(992069095);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(992069095)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(992069095, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Soda Machinhe To Player!!");
	return 0;
}


int AttachHat2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-537490919);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-537490919)) {
		x10 = 0.15, y10 = 0, z10 = 0, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(-537490919, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Hard Hat to player!");
	return 0;
}

int AttachSpin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1776671180;
	x10 = 0.5, y10 = 0.0, z10 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Roof Thing to player!");
	return 0;
}

bool spawn_sprinkler = false;
int AttachSprinkler(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_sprinkler = true;
	spawnedobject = 1864388154;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached sprinkler to player!");
	return 0;
}

bool spawn_oldboat = false;
int AttachOldBoat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_oldboat = true;
	spawnedobject = -1685705098;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached old boat to player!");
	return 0;
}

bool spawn_cage2 = false;
int Attacaged(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_cage2 = true;
	spawnedobject = 379820688;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Caged Player!");
	return 0;
}

bool spawn_beachbench = false;
int AttachBeachBench(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_beachbench = true;
	spawnedobject = -403891623;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached beach bench to player!");
	return 0;
}

bool spawn_dumpster = false;
int AttachDumpster(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_dumpster = true;
	spawnedobject = 1748268526;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached dumpster to player!");
	return 0;
}

bool spawn_trashcan = false;
int AttachTrashCan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_trashcan = true;
	spawnedobject = -1096777189;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached trash can to player!");
	return 0;
}

bool spawn_umbrella = false;
int AttachUmbrella(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_umbrella = true;
	spawnedobject = -592861175;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached umbrella to player!");
	return 0;
}

bool spawn_streetlamp = false;
int AttachStreetLamp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_streetlamp = true;
	spawnedobject = -1063472968;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached street lamp to player!");
	return 0;
}

bool spawn_constbarrel = false;
int AttachConstBarrel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_constbarrel = true;
	spawnedobject = 2080595106;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached construction barrel to player!");
	return 0;
}

bool spawn_dummyplane = false;
int AttachDummyPlane(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_dummyplane = true;
	spawnedobject = -473036318;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached dummy plane to player!");
	return 0;
}

bool spawn_dummycar = false;
int AttachDummyCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_dummycar = true;
	spawnedobject = -1007599668;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached dummy car to player!");
	return 0;
}

int AttachHandR(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1065766299);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(-1065766299);
	int head15 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 18905);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head15, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fire To Player");
	return 0;
}


int AttachFootL(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1065766299);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 14201);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(-1065766299);
	int head2 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 52301);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head2, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fire To Player");
	return 0;
}



int AttachElL(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1065766299);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 22711);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(-1065766299);
	int head4 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 2992);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head4, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fire To Player");
	return 0;
}

int AttachNeeL(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1065766299);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 46078);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(-1065766299);
	int head12 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 16335);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head12, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fire To Player");
	return 0;
}

int AttachBelt(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1065766299);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 0);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 0, z20 = 180;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fire To Player");
	return 0;
}

int AttachNeck(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1065766299);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 35731);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 0, z20 = 180;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fire To Player");
	return 0;
}

int AttachShl(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1065766299);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 40269);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 180;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(-1065766299);
	int head5 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 45509);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 180;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head5, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fire To Player");
	return 0;
}

int AttachHandH(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1065766299);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 0, z20 = 180;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(-1065766299);
	int head5 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-1065766299)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 180;
		attachobj = create_object(-1065766299, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head5, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fire To Player");
	return 0;
}

int AttachHandR1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(118627012);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(118627012);
	int head15 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 18905);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head15, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Tree To Player");
	return 0;
}


int AttachFootL1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(118627012);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 14201);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(118627012);
	int head2 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 52301);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head2, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Tree To Player");
	return 0;
}

int AttachElL1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(118627012);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 22711);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(118627012);
	int head4 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 2992);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head4, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Tree To Player");
	return 0;
}

int AttachNeeL1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(118627012);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 46078);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(118627012);
	int head12 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 16335);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head12, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Tree To Player");
	return 0;
}

int AttachBelt1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(118627012);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 0);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 0, z20 = 180;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Tree To Player");
	return 0;
}

int AttachNeck1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(118627012);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 35731);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 0, z20 = 180;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Tree To Player");
	return 0;
}

int AttachShl1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(118627012);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 40269);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 180;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(118627012);
	int head5 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 45509);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 180;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head5, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Tree To Player");
	return 0;
}

int AttachHandH1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(118627012);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 0, z20 = 180;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(118627012);
	int head5 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(118627012)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 180;
		attachobj = create_object(118627012, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head5, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Tree To Player");
	return 0;
}

int AttachHandR2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1952396163);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(1952396163);
	int head15 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 18905);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head15, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached WindMill To Player");
	return 0;
}


int AttachFootL2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1952396163);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 14201);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(1952396163);
	int head2 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 52301);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head2, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached WindMill To Player");
	return 0;
}

int AttachElL2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1952396163);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 22711);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(1952396163);
	int head4 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 2992);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head4, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached WindMill To Player");
	return 0;
}

int AttachNeeL2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1952396163);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 46078);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(1952396163);
	int head12 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 16335);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head12, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached WindMill To Player");
	return 0;
}

int AttachBelt2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1952396163);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 0);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 0, z20 = 180;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached WindMill To Player");
	return 0;
}

int AttachNeck2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1952396163);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 35731);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 0, z20 = 180;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached WindMill To Player");
	return 0;
}

int AttachShl2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1952396163);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 40269);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 180;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(1952396163);
	int head5 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 45509);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 180;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head5, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached WindMill To Player");
	return 0;
}

int AttachHandH2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1952396163);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 0, z20 = 180;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	animid = selectedMenuIndexes->operator[](1);
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	model = spawnedobject;
	RequestModel(1952396163);
	int head5 = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(1952396163)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 180;
		attachobj = create_object(1952396163, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head5, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached WindMill To Player");
	return 0;
}
int AttachDickLog2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1729226035);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-1729226035)) {
		x10 = 0.2, y10 = 0.08, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Hotdog To Player");
	return 0;
}

int Attachweiner2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-2054442544);
	RequestModel(-1729226035);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 11816);
	if (HasModelLoaded(-2054442544)) {
		x10 = 0.19, y10 = 0.18, z10 = 0.05, x20 = 0, y20 = 0, z20 = 0;
		attachobj = create_object(-2054442544, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-2054442544)) {
		x10 = 0.19, y10 = 0.18, z10 = -0.05, x20 = 0, y20 = -180, z20 = 0;
		attachobj = create_object(-2054442544, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-1729226035)) {
		x10 = 0.14, y10 = 0.25, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-1729226035)) {
		x10 = 0.14, y10 = 0.55, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-1729226035)) {
		x10 = 0.14, y10 = 0.40, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Long Dick! (Inspired By Eaqz)");
	return 0;
}

int Attachweiner3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1840863642);
	RequestModel(-1729226035);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 11816);
	if (HasModelLoaded(1840863642)) {
		x10 = 0.19, y10 = 0.18, z10 = 0.09, x20 = 0, y20 = 0, z20 = 0;
		attachobj = create_object(1840863642, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(1840863642)) {
		x10 = 0.19, y10 = 0.18, z10 = -0.09, x20 = 0, y20 = -180, z20 = 0;
		attachobj = create_object(1840863642, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-1729226035)) {
		x10 = 0.14, y10 = 0.25, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-1729226035)) {
		x10 = 0.14, y10 = 0.55, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-1729226035)) {
		x10 = 0.14, y10 = 0.40, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-1729226035)) {
		x10 = 0.14, y10 = 0.70, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Classy Dick! (Inspired By Eaqz)");
	return 0;
}


int Attachweiner1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-2054442544);
	RequestModel(-1729226035);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 11816);
	if (HasModelLoaded(-2054442544)) {
		x10 = 0.19, y10 = 0.18, z10 = 0.05, x20 = 0, y20 = 0, z20 = 0;
		attachobj = create_object(-2054442544, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-2054442544)) {
		x10 = 0.19, y10 = 0.18, z10 = -0.05, x20 = 0, y20 = -180, z20 = 0;
		attachobj = create_object(-2054442544, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-1729226035)) {
		x10 = 0.14, y10 = 0.25, z10 = -0.0, x20 = 0, y20 = -90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Dick! (Inspired By Eaqz)");
	return 0;
}

int AttachDickLog3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1729226035);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-1729226035)) {
		x10 = -0.02, y10 = 0.1, z10 = 0.0, x20 = 0, y20 = 90, z20 = 0;
		attachobj = create_object(-1729226035, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Hotdog To Player");
	return 0;
}



bool spawn_dickpole2 = false;
int AttachDickLog(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_dickpole2 = true;
	spawnedobject = 1366334172;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Dick log to player!");
	return 0;
}

bool creator_obj = false;
int AttachCreator(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	if (Create) {
		creator_obj = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached object to player!");
	} else {
		ShowMessageOnScreen("~r~You can't use this unless you have object selected using creator mode");
	}
	return 0;
}


bool detachcreator_obj = false;
int ObjectDetach(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	if (Create) {
		detachcreator_obj = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Detached object from player, if not click it a few more times!");
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

bool spawn_cage1 = false;
int AttachCreator2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_cage1 = true;
	spawnedobject = 959275690;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Kill The Jew!");
	return 0;
}

bool spawn_cage17 = false;
int AttachCreator5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_cage17 = true;
	spawnedobject = 959275690;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Caged Player!");
	return 0;
}

bool spawn_cage18 = false;
int AttachCreator6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_cage18 = true;
	spawnedobject = 1433474877;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Prisoned Player!");
	return 0;
}


int AttachWeed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 452618762;
	z10 = 0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached weed to player!");
	return 0;
}

int AttachHead(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -382832258;
	z10 = 2.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Dickhead to player!");
	return 0;
}

int AttachCoffin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 460248592;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Coffin!");
	return 0;
}

int AttachClownChair(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -2105381678;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Clown Chair!");
	return 0;
}

int AttachClock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-349306656);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-349306656)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(-349306656, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Clock To Player!");
	return 0;
}


int AttachOrangeBall(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 148511758;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Orange Ball!");
	return 0;
}

int AttachFoodVan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -272361894;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Food Van!");
	return 0;
}

int AttachPlant(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 276954077;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Plant!");
	return 0;
}

int AttachFoodVan2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1257426102;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Food Van!");
	return 0;
}

int BodyDance2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "mini@strip_club@pole_dance@pole_dance2";
		anim = "pd_dance_02";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyDance3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "mini@strip_club@pole_dance@pole_dance3";
		anim = "pd_dance_03";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyDance4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "mini@strip_club@private_dance@part1";
		anim = "priv_dance_p1";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyDance1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "mini@strip_club@pole_dance@pole_dance1";
		anim = "pd_dance_01";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyFuck9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "switch@trevor@jerking_off";
		anim = "trev_jerking_off_loop";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyFuck8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "random@drunk_driver_2";
		anim = "cardrunksex_loop_f";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyFuck7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "random@drunk_driver_2";
		anim = "cardrunksex_loop_m";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyWave(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "random@car_thief@victimpoints_ig_3";
		anim = "arms_waving";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodySwim(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "missheistdocks2a@swimtocontainer";
		anim = "michael_swim_to_container";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodySit(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "timetable@michael@on_sofabase";
		anim = "sit_sofa_base";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyPlead(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "misstrevor2ig_5c";
		anim = "plead_loop";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyPee(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "misscarsteal2peeing";
		anim = "peeing_loop";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyMedi(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "rcmcollect_paperleadinout@";
		anim = "meditiate_idle";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyJog(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "rcmfanatic1";
		anim = "jogging_on_spot";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyBooty(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "SWITCH@TREVOR@MOCKS_LAPDANCE";
		anim = "001443_01_TRVS_28_IDLE_TRV";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}

int BodyKneel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "random@arrests";
		anim = "kneeling_arrest_idle";
		animid = objecthandle;
		vm_anim2 = true;
	}
	return 0;
}


bool AttachToCreate331 = false;
int AttachCreator0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	if (Create) {
		AttachToCreate331 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~");
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}


bool AttachToCreate = false;
int AttachCreator1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		if (!AttachToCreate) {
			attach_entity_to_entity(GetPlayerHandle(PlayerId()), objecthandle, -1, 0, 0, 0, 0, 0, 0);
			AttachToCreate = true;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Attached To Object!");
		} else if (AttachToCreate) {
			detach_entity(PlayerPedId());
			AttachToCreate = false;
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Detached From Object");
		}
	}
	return 0;
}

int BodyMime(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "special_ped@mime@monologue_8@monologue_8a";
		anim = "08_ig_1_wall_ba_0";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int stop12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		StopPlayerTasks2(objecthandle);
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}



int BodyMime2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "special_ped@mime@monologue_4@monologue_4a";
		anim = "09_ig_1_balo_0";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyMime3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "special_ped@mime@monologue_1@monologue_1a";
		anim = "02_ig_1_r_0";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyMime4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "special_ped@mime@monologue_7@monologue_7a";
		anim = "11_ig_1_run_aw_0";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyCele(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "rcmfanatic1celebrate";
		anim = "celebrate";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyFuck(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "rcmpaparazzo_2";
		anim = "shag_loop_a";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyFuck2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "rcmpaparazzo_2";
		anim = "shag_loop_poppy";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyFuck3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "mini@prostitutes@sexnorm_veh";
		anim = "sex_loop_male";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyFuck4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "mini@prostitutes@sexnorm_veh";
		anim = "sex_loop_prostitute";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyFuck6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "mini@prostitutes@sexnorm_veh";
		anim = "bj_loop_prostitute";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyFuck5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "mini@prostitutes@sexnorm_veh";
		anim = "bj_loop_male";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}


int BodySit1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "amb@world_human_sit_ups@male@base";
		anim = "base";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyPull(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "SWITCH@FRANKLIN@GYM";
		anim = "001942_02_GC_FRAS_IG_5_BASE";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyPush(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "amb@world_human_push_ups@male@base";
		anim = "base";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}

int BodyTap1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "special_ped@mountain_dancer@monologue_2@monologue_2a";
		anim = "mnt_dnc_angel";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}
int BodyTap2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "special_ped@mountain_dancer@monologue_3@monologue_3a";
		anim = "mnt_dnc_buttwag";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}
int BodyTap3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "special_ped@mountain_dancer@monologue_4@monologue_4a";
		anim = "mnt_dnc_verse";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}
int BodyTap4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		animdict = "special_ped@mountain_dancer@monologue_1@monologue_1a";
		anim = "mtn_dnc_if_you_want_to_get_to_heaven";
		animid = objecthandle;
		vm_anim2 = true;
	} else {
		ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
	}
	return 0;
}


int AttachDoor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1774846173;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Door To Player!");
	return 0;
}

int AttachDoor2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1093881309;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Glass Door To Player!");
	return 0;
}

int AttachSnow(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 962570067;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Snow Sign To Player!");
	return 0;
}

int AttachBarrel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -1344435013;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Barrel To Player!");
	return 0;
}


int AttachJacked(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 350476011;
	z10 = -1.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Big Ass Cone To Player!");
	return 0;
}
int AttachJacked2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -1750759319;
	z10 = -1.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Big Ass Cola To Player!");
	return 0;
}



int AttachCage(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_cage = true;
	spawnedobject = -1479600188;
	z10 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Cage to Player!");
	return 0;
}

int AttachTV3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1340914825;
	z10 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached TV 3 To Player!");
	return 0;
}

int AttachSlushi(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1369928609);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-1369928609)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
		attachobj = create_object(-1369928609, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Slushi To Player!");
	return 0;
}
int AttachDonut5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1421582485);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(1421582485)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(1421582485, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Donut Cart to player!");
	return 0;
}



int AttachNoGoVodka(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1793667637);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(1793667637)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(1793667637, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Vodka In Hand To Player");
	return 0;
}

int AttachCashRegister(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(759654580);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(759654580)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(759654580, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Register In Hand To Player");
	return 0;
}
bool spawn_chandelier = false;
int Attachchandelier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawn_chandelier = true;
	spawnedobject = -1720704599;
	if (spawn_chandelier) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		float h;
		int attachobj;
		model = spawnedobject; // dodgem car object
		RequestModel(model);
		int spine = get_ped_bone_index(GetPlayerHandle(animid), 57597);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = -90.0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), spine, x10, y10, z10, x20, y20, z20);
		}
		spawn_chandelier = false;
	}
	ShowMessageOnScreen("~b~ Attached Chandelier to player!");
	return 0;

}

int AttachTV4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 383555675;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached TV 4 To Player!");
	return 0;
}

int AttachPASpeakers(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1902132942);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(1902132942)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(1902132942, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached PA Speakers To Player!");
	return 0;
}

int AttachBankVaultDoor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 2121050683;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Bank Vault Door To Player!");
	return 0;
}

int AttachSnowBucket(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -1367245739;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Snow Bucket To Player!");
	return 0;
}

int AttachSecurityCamera(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParamters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -1340405475;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Security Camera To Player!");
	return 0;
}


int AttachZultar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1488589320;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Zultar Game To Player!");
	return 0;
}

int AttachMill(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1952396163;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Big Ass Windmill To Player!");
	return 0;
}
int Bottle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(2010247122);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(2010247122)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(2010247122, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Bottle To Player!");
	return 0;
}
int Bottle2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(211213803);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(211213803)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(211213803, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Bottle2 To Player!");
	return 0;
}
int flare2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-2071229766);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-2071229766)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-2071229766, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached flare To Player!");
	return 0;
}

int flare3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(809669486);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(809669486)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(809669486, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Gnome To Player!");
	return 0;
}

int flare4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1358072771);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(1358072771)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(1358072771, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Mushroom To Player!");
	return 0;
}

int Snowman(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1617412079);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 57597);
	if (HasModelLoaded(-1617412079)) {
		x10 = 0.14, y10 = 0, z10 = 0.0, x20 = 0.5, y20 = 90, z20 = 0;
		attachobj = create_object(-1617412079, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Snowman To Player!");
	return 0;
}
int AttachMan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	if (DoesEntityExist(objecthandle)) {
		network_request_control_of_entity(objecthandle);
		attach_entity_to_entity(objecthandle, GetPlayerHandle(animid), -1, 0, 0, 0, 0, 0, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Vehicle has been launched forwards, may have to click more than once!");
	}
	return 0;
}
int Cone2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1587301201);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-1587301201)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 0, y20 = 90, z20 = 0;
		attachobj = create_object(-1587301201, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Cone To Player!");
	return 0;
}

int Bigtree(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 118627012;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Big Tree To Player!");
	return 0;
}
int AttachN0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-939235386);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-939235386)) {
		x10 = 1, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-939235386, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 0 To Player!");
	return 0;
}
int AttachN1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1519357138);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(1519357138)) {
		x10 = 1, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(1519357138, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 1 To Player!");
	return 0;
}
int AttachN2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1798123021);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(1798123021)) {
		x10 = 1, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(748204269, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 2 To Player!");
	return 0;
}
int AttachN3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(2046479272);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(2046479272)) {
		x10 = 1, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(748204269, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 3 To Player!");
	return 0;
}
int AttachN4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-507372739);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-507372739)) {
		x10 = 1, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-748204269, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 4 To Player!");
	return 0;
}
int AttachN5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-135051361);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-135051361)) {
		x10 = 1, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-748204269, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 5 To Player!");
	return 0;
}
int AttachN6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(84140480);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(84140480)) {
		x10 = 1, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(748204269, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 6 To Player!");
	return 0;
}
int AttachN7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1686303052);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-1686303052)) {
		x10 = 1, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-748204269, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 7 To Player!");
	return 0;
}
int AttachN8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(518657424);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(518657424)) {
		x10 = 1, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(748204269, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 8 To Player!");
	return 0;
}
int AttachN9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(748204269);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(748204269)) {
		x10 = 1.0, y10 = 0.05, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(748204269, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attach 9 To Player!");
	return 0;
}


int AttachArrow(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 170715090;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached White Arrow To Player!");
	return 0;
}

int AttachEle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 251770068;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached White Elevator To Player!");
	return 0;
}


int AttachAxe(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1152027126);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 36029);
	if (HasModelLoaded(-1152027126)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -100, y20 = 12.6, z20 = 5.0;
		attachobj = create_object(-1152027126, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Axe In Hand To Player");
	return 0;
}

int AttachRif(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1792222914);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(1792222914)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(1792222914, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Space Rifle In Hand To Player");
	return 0;
}

int AttachStair(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 75309412;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Staircase To Player!");
	return 0;
}

int AttachRadar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 2124719729;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Radar To Player!");
	return 0;
}

int AttachWarheads(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -2133399564;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Warheads To Player!");
	return 0;
}

int AttachCart1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -1975182244;
	x10 = 2.0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Feris Wheel Cart To Player!");
	return 0;
}

int AttachGame(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1991361770);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-1991361770)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.1, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-938090847, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Arcade Game to player!");
	return 0;
}

int AttachGame2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1679199186);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-1679199186)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1679199186, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Air Hockey To Player!");
	return 0;
}

int AttachCactus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-938090847);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-938090847)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-938090847, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Cactus To Player!");
	return 0;
}

int AttachKayak(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-507412625);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-507412625)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-507412625, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Kayak To Player!");
	return 0;
}

int AttachStatue(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1307682939);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-1307682939)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1307682939, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Statue To Player!");
	return 0;
}

int AttachHat6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1929385697);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(-1929385697)) {
		x10 = 0.15, y10 = 0, z10 = 0, x20 = 0, y20 = 90, z20 = 0.0;
		attachobj = create_object(-1929385697, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Straw Hat to player!");
	return 0;
}

int AttachTable1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(314623274);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(314623274)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(314623274, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Pool Table To Player!");
	return 0;
}

int AttachSwing(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1991361770);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	if (HasModelLoaded(1307682939)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(1307682939, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Swing To Player!");
	return 0;
}

int AttachTable2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1677315747;
	z10 = 0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Pool Tube To Player!");
	return 0;
}

int AttachRon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1519880608;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Propane Ron To Player!");
	return 0;
}

int AttachStreet(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 862871082;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Street Light To Player!");
	return 0;
}

int AttachTrain(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1961489851;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Train To Player!");
	return 0;
}

int AttachTrain1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -943306241;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Train Head To Player!");
	return 0;
}

int HugeDick(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -382832258;
	x10 = 0.1, y10 = 0, z10 = -0.01, x20 = 0, y20 = 0, z20 = 0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Massive Cock!");
	return 0;
}

int AttachFerrisWheel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -1003748966;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Ferris Wheel!");
	return 0;
}

int RiotHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-547381377);
	int head = GET_ENTITY_BONE_INDEX_BY_NAME(GetPlayerHandle(PlayerId()), "Gun_Nuzzle");
	if (HasModelLoaded(-547381377)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
		attachobj = create_object(-547381377, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Riotshield In Hand To Player");
	return 0;
}

int PoleHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(2088900873);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 36029);
	if (HasModelLoaded(2088900873)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(2088900873, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Pole In Hand To Player");
	return 0;
}

int SwordHand1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-491126417);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 31086);
	int head1 = get_ped_bone_index(GetPlayerHandle(animid), 36029);
	int head2 = get_ped_bone_index(GetPlayerHandle(animid), 6286);
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 90, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 100, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 110, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 130, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 150, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 160, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 170, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 180, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 70, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 50, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 30, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 20, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 10, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0, y10 = 0, z10 = 0, x20 = 90, y20 = 0, z20 = 0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head2, x10, y10, z10, x20, y20, z20);
	}
	if (HasModelLoaded(-491126417)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head1, x10, y10, z10, x20, y20, z20);
	}

	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Sword To Player");
	return 0;
}

int cickHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(610857585);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(610857585)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(610857585, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Chicken In Hand To Player");
	return 0;
}

int SwordHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-491126417);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-491126417)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-491126417, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Sword In Hand To Player");
	return 0;
}

int Flamingo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1070059960);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-1070059960)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-1070059960, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Flamingo In Hand To Player");
	return 0;
}

int neonhand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-2130406583);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-2130406583)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-2130406583, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Neon Light In Hand To Player");
	return 0;
}

int Lighthand2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1393636838);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(1393636838)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(1393636838, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached LightPole In Hand To Player");
	return 0;
}

int PoolHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(1715961520);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(1715961520)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(1715961520, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Pool Bed In Hand To Player");
	return 0;
}

int GiveFishingPole(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1910604593);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 36029);
	if (HasModelLoaded(-1910604593)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-1910604593, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Fishing Pole To Player");
	return 0;
}

int GiveToy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-1005864181);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-1005864181)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-1005864181, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Toy");
	return 0;
}



int GivePanty(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-107476029);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-107476029)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-107476029, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Panty To Player");
	return 0;
}


int GiveKnife(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(436978267);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(436978267)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(436978267, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Knife In Hand To Player");
	return 0;
}


int GivePan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(260566774);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(260566774)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(260566774, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Pan In Hand To Player");
	return 0;
}



int DickHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-382832258);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-382832258)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-382832258, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Dick In Hand To Player");
	return 0;
}


int MowerHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(447976993);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(447976993)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(447976993, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Mower In Hand To Player");
	return 0;
}



int BongHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-257549932);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
	if (HasModelLoaded(-257549932)) {
		x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
		attachobj = create_object(-257549932, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Bong In Hand To Player");
	return 0;
}

int AttachAsteroid(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = -543669801;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Asteroid!");
	return 0;
}

int AttachGass(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-2025105036);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-2025105036)) {
		x10 = 0.02, y10 = 0, z10 = 0, x20 = 120, y20 = 90, z20 = 0.0;
		attachobj = create_object(-2025105036, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached Gas Mask to player!");
	return 0;
}

int AttachBig2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	float Position[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	float h;
	int attachobj;
	model = spawnedobject;
	RequestModel(-915071241);
	int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 12844);
	if (HasModelLoaded(-915071241)) {
		x10 = 0.02, y10 = 0, z10 = 0, x20 = 190, y20 = 90, z20 = 0.0;
		attachobj = create_object(-915071241, Position[0], Position[1], Position[2]);
		attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached BigFoot Mask to player!");
	return 0;
}

int AttachNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1433474877;
	x10 = 0, y10 = 0, z10 = 0, x20 = 45, y20 = 0, z20 = 0.0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached beer neon to player!");
	return 0;
}

int blameExplosion1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 0;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}


int blameExplosion2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 1;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 2;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 3;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 4;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 5;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 6;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 7;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 8;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 9;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 10;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 11;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 12;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 13;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 14;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 15;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

int blameExplosion17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 15;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}
int blameExplosion18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player2 = 15;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Selected To Blame!");
	return 0;
}

bool blameloops1 = false;
int blameExplosion420(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!blameloops1) {
		blameloops1 = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mass Suicide:~b~ON!");

	} else if (blameloops1) {
		blameloops1 = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Mass Suicide:~r~OFF!");
	}
	return 0;
}


bool blameloops = false;
int blameExplosion(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!blameloops) {
		blameloops = true;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Blame Loop:~b~ON!");

	} else if (blameloops) {
		blameloops = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Blame Loop:~r~OFF!");
	}
	return 0;
}

bool camshakeloop = false;
int camshakeplayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!camshakeloop) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Screen Shake Loop:~b~ON!");
		camshakeloop = true;
	} else if (camshakeloop) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Screen Shake Loop:~r~OFF!");
		camshakeloop = false;
	}
	return 0;
}
void kamshakeloop() {
	float Position[3];
	GetEntityCoords(GetPlayerHandle(cashclient), &Position[0], &Position[1], &Position[2]);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, JOLT_SHAKE);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, LARGE_EXPLOSION_SHAKE);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, SMALL_EXPLOSION_SHAKE);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, SKY_DIVING_SHAKE);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, MEDIUM_EXPLOSION_SHAKE);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, DRUNK_SHAKE);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, HAND_SHAKE);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, VIBRATE_SHAKE);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, ROAD_VIBRATION_SHAKE);
	AddExplosion1(Position[0], Position[1], Position[2], TANKER, 8.0f, false, true, GRENADE_EXPLOSION_SHAKE);
}

void blameExplosion1() {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float pos[3];
		GetEntityCoords(Handle, pos);
		ADD_OWNED_EXPLOSION(Handle, pos[0], pos[1], pos[2], 32, 5, 0, 1, 5);
		ADD_OWNED_EXPLOSION(Handle, pos[0], pos[1], pos[2], 32, 5, 0, 1, 5);
	}
}

void blameExplosion() {
	int i = 0;
	for (i = 0; i < 18; i++) {
		if (i == PlayerId()) continue;
		int Handle = GetPlayerHandle(i);
		if (!DoesEntityExist(Handle)) continue;
		float Position[3];
		int pedID = GET_PLAYER_PED(i);
		GetEntityCoords(pedID, Position);
		int num3 = GET_PLAYER_PED(Player2);
		if ((pedID > 0) && (pedID != PlayerPedId())) {
			ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
		}
	}
}

int blame1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 0;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 1;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 2;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 3;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 4;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 5;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 6;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 7;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 8;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 9;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 10;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 11;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 12;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 13;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 14;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 15;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}

int blame17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 15;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}
int blame18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Player1 = 15;
	float Position[3];
	int pedID = GET_PLAYER_PED(Player1);
	GetEntityCoords(pedID, Position);
	int num3 = GET_PLAYER_PED(Player2);
	ADD_OWNED_EXPLOSION(num3, Position[0], Position[1], Position[2], 32, 5, 0, 1, 5);
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That Bitch Has Been Blamed!");
	return 0;
}

int PiggieBack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle = selectedMenuIndexes->operator[](1);
	attach_entity_to_entity(PlayerPedId(), GetPlayerHandle(AttachPedHandle), -1, 0, -0.3, 0, 0, 0, 0);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "bj_loop_male";
	animid = PlayerId();
	vm_anim = true;
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Piggy back!");
	return 0;
}
bool funnyshit = false;
int FuckPlayerHandle[2];
bool Fuckp = false;
int FuckPlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle = selectedMenuIndexes->operator[](1);
	FuckPlayerHandle[0] = GetPlayerHandle(AttachPedHandle);
	FuckPlayerHandle[1] = PlayerPedId();
	if (FuckPlayerHandle[1] == FuckPlayerHandle[0]) {
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ You are trying to fuck yourself retard, If we allowed this we would freeze.");
		return 0;
	}
	if (!Fuckp) {
		attach_entity_to_entity(FuckPlayerHandle[1], FuckPlayerHandle[0], -1, 0, -0.3, 0, 0, 0, 0);
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Attached To Player and Activate Fuck Animation!");
		animdict = "rcmpaparazzo_2";
		anim = "shag_loop_a";
		animid = PlayerId();
		vm_anim = true;
		Fuckp = true;
	} else if (Fuckp) {
		detach_entity(PlayerPedId());
		clear_ped_tasks_immediately(PlayerPedId());
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Detached From Player and Stopped Animation!");
		Fuckp = false;
	}
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Enjoy the fun!");
	return 0;
}

int ChopPiss1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "pee_right_enter";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopPiss2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "pee_right_idle";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopPiss3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "pee_right_exit";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopDump(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "dump_loop";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopAttack2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@melee@streamed_core@";
	anim = "attack";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopAttack1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@melee@streamed_core@";
	anim = "ground_attack_0";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Detach(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	detach_entity(PlayerPedId());
	ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Detached");
	return 0;
}

int PlateThreadValue = -1;
int ChangePlate1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_plate = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)1, 0, 0);
	return 0;
}


LONG WINAPI Exception(struct _EXCEPTION_POINTERS *e) {
	printf("GTAV Menu crashed for some reason");

	HalReturnToFirmware(HalRebootQuiesceRoutine);

	return 0;
}


void SetupMenu() {

	menuInputHandler = new Input;
	mainMenu = new GTAVMenu;
	ExplosionSet = new GTAVMenu;
	Single2 = new GTAVMenu;
	Toggle2 = new GTAVMenu;
	FireWorkMenu = new GTAVMenu;
	BodyGuardAttachOptions = new GTAVMenu;
	weedcolors = new GTAVMenu;
	hostcolors = new GTAVMenu;
	PositionMenu = new GTAVMenu;
	ScrollerMenu = new GTAVMenu;
	TitleShaderColor1 = new GTAVMenu;
	MenuFonts = new GTAVMenu;
	BackgroundMenu = new GTAVMenu;
	BorderMenu = new GTAVMenu;
	MiscOption2Pag2 = new GTAVMenu;
	MoneyOptions = new GTAVMenu;
	quickOptionsMenu = new GTAVMenu;
	quickOptionsMenu1 = new GTAVMenu;
	supermenu = new GTAVMenu;
	quickOptionsMenu2 = new GTAVMenu;
	ModelChanger303 = new GTAVMenu;
	PropCustom0 = new GTAVMenu;
	quickOptionsMenu3 = new GTAVMenu;
	ModelChanger1 = new GTAVMenu;
	ModelChanger100 = new GTAVMenu;
	Protection = new GTAVMenu;
	ModelChanger303 = new GTAVMenu;
	blamePlayers = new GTAVMenu;
	esplist = new GTAVMenu;
	blamePlayers2 = new GTAVMenu;
	AllAttach = new GTAVMenu;
	playerOptionsMenu = new GTAVMenu;
	onlinePlayersList = new GTAVMenu;
	CashDropMenu = new GTAVMenu;
	vehicleOptionMenu = new GTAVMenu;
	vehicleextra = new GTAVMenu;
	vehicleextra1 = new GTAVMenu;
	vehicleextra2 = new GTAVMenu;
	vehicleextra3 = new GTAVMenu;
	vehicleOptionMenu2 = new GTAVMenu;
	NeonMenu = new GTAVMenu;
	colorsmenu = new GTAVMenu;
	VehPaintMenu = new GTAVMenu;
	VehPaintMenu2 = new GTAVMenu;
	RimPaint = new GTAVMenu;
	weaponOptionsMenu = new GTAVMenu;
	onlinePlayers = new GTAVMenu;
	onlinePlayersSubMenu = new GTAVMenu;
	CarSpawner = new GTAVMenu;
	CarSpawner2 = new GTAVMenu;
	CarSpawnerMenu0 = new GTAVMenu;
	CarSpawnerMenu0P2 = new GTAVMenu;
	CarSpawnerMenu1 = new GTAVMenu;
	CarSpawnerMenu2 = new GTAVMenu;
	CarSpawnerMenu2P2 = new GTAVMenu;
	CarSpawnerMenu3 = new GTAVMenu;
	CarSpawnerMenu4 = new GTAVMenu;
	CarSpawnerMenu4P2 = new GTAVMenu;
	CarSpawnerMenu5 = new GTAVMenu;
	CarSpawnerMenu6 = new GTAVMenu;
	CarSpawnerMenu7 = new GTAVMenu;
	CarSpawnerMenu8 = new GTAVMenu;
	CarSpawnerMenu8P2 = new GTAVMenu;
	CarSpawnerMenu9 = new GTAVMenu;
	CarSpawnerMenu9P2 = new GTAVMenu;
	CarSpawnerMenu10 = new GTAVMenu;
	CarSpawnerMenu11 = new GTAVMenu;
	CarSpawnerMenu12 = new GTAVMenu;
	CarSpawnerMenu13 = new GTAVMenu;
	CarSpawnerMenu14 = new GTAVMenu;
	CarSpawnerMenu14P2 = new GTAVMenu;
	CarSpawnerMenu15 = new GTAVMenu;
	CarSpawnerMenu16 = new GTAVMenu;
	CarSpawnerMenu17 = new GTAVMenu;
	CarSpawnerMenu18 = new GTAVMenu;
	CarSpawnerMenu19 = new GTAVMenu;
	CarSpawnerMenu20 = new GTAVMenu;
	BodyMimi = new GTAVMenu;
	Scenee = new GTAVMenu;
	Scenee2 = new GTAVMenu;
	CarSpawnerMenu20P2 = new GTAVMenu;
	CarSpawnerMenu21 = new GTAVMenu;
	CarSpawnerMenu22 = new GTAVMenu;
	CarSpawnerMenu69 = new GTAVMenu;
	CarSpawnerMenu23 = new GTAVMenu;
	//
	CarSpawner1 = new GTAVMenu;
	CarSpawner22 = new GTAVMenu;
	CarSpawnerMenu00 = new GTAVMenu;
	CarSpawnerMenu0P22 = new GTAVMenu;
	CarSpawnerMenu11 = new GTAVMenu;
	CarSpawnerMenu22 = new GTAVMenu;
	CarSpawnerMenu2P22 = new GTAVMenu;
	CarSpawnerMenu33 = new GTAVMenu;
	CarSpawnerMenu44 = new GTAVMenu;
	CarSpawnerMenu4P22 = new GTAVMenu;
	CarSpawnerMenu55 = new GTAVMenu;
	CarSpawnerMenu66 = new GTAVMenu;
	CarSpawnerMenu77 = new GTAVMenu;
	CarSpawnerMenu88 = new GTAVMenu;
	CarSpawnerMenu8P22 = new GTAVMenu;
	CarSpawnerMenu99 = new GTAVMenu;
	CarSpawnerMenu9P22 = new GTAVMenu;
	CarSpawnerMenu100 = new GTAVMenu;
	CarSpawnerMenu111 = new GTAVMenu;
	CarSpawnerMenu110 = new GTAVMenu;
	CarSpawnerMenu122 = new GTAVMenu;
	CarSpawnerMenu133 = new GTAVMenu;
	CarSpawnerMenu144 = new GTAVMenu;
	CarSpawnerMenu14P22 = new GTAVMenu;
	CarSpawnerMenu155 = new GTAVMenu;
	CarSpawnerMenu166 = new GTAVMenu;
	CarSpawnerMenu177 = new GTAVMenu;
	CarSpawnerMenu188 = new GTAVMenu;
	CarSpawnerMenu199 = new GTAVMenu;
	CarSpawnerMenu200 = new GTAVMenu;
	CarSpawnerMenu20P22 = new GTAVMenu;
	CarSpawnerMenu211 = new GTAVMenu;
	CarSpawnerMenu222 = new GTAVMenu;
	CarSpawnerMenu699 = new GTAVMenu;
	CarSpawnerMenu233 = new GTAVMenu;
	//
	OnlinePlayerBasicOptions = new GTAVMenu;
	AttachNumbers = new GTAVMenu;
	CampfireOptions = new GTAVMenu;
	MillOptions = new GTAVMenu;
	TreeOptions = new GTAVMenu;
	OnlinePlayerVehicleOptions = new GTAVMenu;
	OnlinePlayerTeleport = new GTAVMenu;
	particlemenu = new GTAVMenu;
	colorlist = new GTAVMenu;
	NaughtyStuff = new GTAVMenu;
	NaughtyStuff2 = new GTAVMenu;
	KickPlayerStuff = new GTAVMenu;
	AllOnlinePlayers = new GTAVMenu;
	AllAtachObject = new GTAVMenu;
	GuardMenu = new GTAVMenu;//rideAnimalsMenu
	rideAnimalsMenu = new GTAVMenu;//rideAnimalsModelMenu
	rideAnimalsModelMenu = new GTAVMenu;
	TeleMenu = new GTAVMenu;
	TeleMenu2 = new GTAVMenu;
	TeleMenu3 = new GTAVMenu;
	TeleMenu4 = new GTAVMenu;
	TeleMenu5 = new GTAVMenu;
	ModelChanger = new GTAVMenu;
	ModelChanger2 = new GTAVMenu;
	ModelChanger3 = new GTAVMenu;
	ModelChanger4 = new GTAVMenu;
	ModelChanger5 = new GTAVMenu;
	ModelChanger6 = new GTAVMenu;
	ModelChanger7 = new GTAVMenu;
	ModelChanger8 = new GTAVMenu;
	ModelChanger9 = new GTAVMenu;
	ModelChanger10 = new GTAVMenu;
	MiscOptions = new GTAVMenu;
	AnimalRiding = new GTAVMenu;
	Animal3 = new GTAVMenu;
	Animal4 = new GTAVMenu;
	GaurdMenu2 = new GTAVMenu;
	Strip23 = new GTAVMenu;
	Maude23 = new GTAVMenu;
	Naked23 = new GTAVMenu;
	Alien23 = new GTAVMenu;
	Priest23 = new GTAVMenu;
	Gang23 = new GTAVMenu;
	Male23 = new GTAVMenu;
	Zom23 = new GTAVMenu;
	Body23 = new GTAVMenu;
	FunGunMenu = new GTAVMenu;
	WeaponGun = new GTAVMenu;
	CIA23 = new GTAVMenu;
	weptints = new GTAVMenu;
	clrcross = new GTAVMenu;
	weptints2 = new GTAVMenu;
	ObjectAttachments = new GTAVMenu;
	ObjectAttachments2 = new GTAVMenu;
	AttachPlayer = new GTAVMenu;
	ObjectAttachments3 = new GTAVMenu;
	ObjectAttachments4 = new GTAVMenu;
	ObjectAttachments5 = new GTAVMenu;
	ObjectAttachments6 = new GTAVMenu;
	ObjectAttachments7 = new GTAVMenu;
	CashDropOptions = new GTAVMenu;
	ExtraNaughtyStuff = new GTAVMenu;
	ObjectOptions = new GTAVMenu;
	watermenu = new GTAVMenu;
	ObjectOptions3 = new GTAVMenu;
	ObjectOptions1 = new GTAVMenu;
	mapmods = new GTAVMenu;
	FunnyCarOptions = new GTAVMenu;
	ChopAnims = new GTAVMenu;
	CougAnims = new GTAVMenu;
	CoyoAnims = new GTAVMenu;
	RetAnims = new GTAVMenu;
	ModShop = new GTAVMenu;
	HornMenu = new GTAVMenu;
	HornMenu2 = new GTAVMenu;
	HornMenu3 = new GTAVMenu;
	TintMenu = new GTAVMenu;
	tiresmoke1 = new GTAVMenu;
	tiresmoke = new GTAVMenu;
	OpenMenu = new GTAVMenu;
	PerformanceMenu = new GTAVMenu;
	BodyMenu = new GTAVMenu;
	WheelMenu = new GTAVMenu;
	ArmourMenu = new GTAVMenu;
	HighEnd = new GTAVMenu;
	EngineMenu = new GTAVMenu;
	TransMenu = new GTAVMenu;
	BrakesMenu = new GTAVMenu;
	SuspMenu = new GTAVMenu;
	ExMenu = new GTAVMenu;
	FbMenu = new GTAVMenu;
	RbMenu = new GTAVMenu;
	SkMenu = new GTAVMenu;
	InteriorMenu = new GTAVMenu;
	HoodMenu = new GTAVMenu;
	LFenderMenu = new GTAVMenu;
	RFenderMenu = new GTAVMenu;
	RoofMenu = new GTAVMenu;
	GrillMenu = new GTAVMenu;
	SpoilerMenu = new GTAVMenu;
	HighEnd42 = new GTAVMenu;
	Lowrider = new GTAVMenu;
	Muscle = new GTAVMenu;
	Offroad = new GTAVMenu;
	Sport = new GTAVMenu;
	SportMenu2 = new GTAVMenu;
	SUV = new GTAVMenu;
	Tuner = new GTAVMenu;
	TunerMenu2 = new GTAVMenu;
	Pegasus = new GTAVMenu;
	Weather = new GTAVMenu;
	SpeedoMeter = new GTAVMenu;
	Recovery = new GTAVMenu;
	RGMenu = new GTAVMenu;
	FWMenu = new GTAVMenu;
	VWMenu = new GTAVMenu;
	fxmenu = new GTAVMenu;
	male = new GTAVMenu;
	female = new GTAVMenu;
	Character1 = new GTAVMenu;
	outfitsmenu = new GTAVMenu;
	Character2 = new GTAVMenu;
	Character3 = new GTAVMenu;
	KDMP0 = new GTAVMenu;
	RankMenuMP0 = new GTAVMenu;
	RankMenuMP1 = new GTAVMenu;
	MoneyMenuMP0 = new GTAVMenu;
	MoneyMenuMP1 = new GTAVMenu;
	MovementMenu = new GTAVMenu;
	FavoriteModelsMenu = new GTAVMenu;
	AnimationMenu = new GTAVMenu;
	SportOptions = new GTAVMenu;
	SexOptions = new GTAVMenu;
	DanceOptions = new GTAVMenu;
	SuperHeroOptions = new GTAVMenu;
	MiscOptions2 = new GTAVMenu;
	MiscOptions6 = new GTAVMenu;
	MiscOptions5 = new GTAVMenu;
	MiscOptions9 = new GTAVMenu;
	MiscOptions3 = new GTAVMenu;
	MiscOptions4 = new GTAVMenu;
	ObjectOptions2 = new GTAVMenu;
	CreatorVehicle = new GTAVMenu;
	veh1 = new GTAVMenu;
	veh2 = new GTAVMenu;
	Bodydancer = new GTAVMenu;
	BodyMisc = new GTAVMenu;
	BodySex = new GTAVMenu;
	BodySport = new GTAVMenu;
	Poledancer = new GTAVMenu;
	ModelChanger300 = new GTAVMenu;
	ModelChanger301 = new GTAVMenu;
	MenuOptions = new GTAVMenu;
	TitleFonts = new GTAVMenu;
	TitleFonts1 = new GTAVMenu;
	ItemFonts = new GTAVMenu;
	TitleTextColor = new GTAVMenu;
	TitleTextColor1 = new GTAVMenu;
	TitleShaderColor = new GTAVMenu;
	MainShaderColor = new GTAVMenu;
	TitleColor = new GTAVMenu;
	ItemColor = new GTAVMenu;
	SelectorColor = new GTAVMenu;
	MenuPosition = new GTAVMenu;
	MenuAlphaLevel = new GTAVMenu;
	MarqueePosition = new GTAVMenu;
	PlateMenu = new GTAVMenu;
	NeonMenu = new GTAVMenu;
	creatorVehicleDoors = new GTAVMenu;
	SetPlayerAlpha = new GTAVMenu;
	OnlinePlayersGiveMenu = new GTAVMenu;
	MiniGamesSubMenu = new GTAVMenu;
	RanTele = new GTAVMenu;
	gravopt = new GTAVMenu;
	gravopt3 = new GTAVMenu;
	gravopt2 = new GTAVMenu;
	SecCamerasMenu = new GTAVMenu;
	OnlineTest = new GTAVMenu;
	rgbsubmenu = new GTAVMenu;
	Timscolor = new GTAVMenu;
	LiveryMenu = new GTAVMenu;
	DevTestingMenu = new GTAVMenu;
	towplayer = new GTAVMenu;
	OnlinePlayerVehicleOptions2 = new GTAVMenu;
	TeleMenu3 = new GTAVMenu;
	CarSpawnerMenu24 = new GTAVMenu;
	CarSpawnerMenu244 = new GTAVMenu;
	VehicleHandleMenu = new GTAVMenu;
	ObjectHandleMenu = new GTAVMenu;
	SaveLocationMenu = new GTAVMenu;
	LoadLocationMenu = new GTAVMenu;

	// Bodyguard Menu Page 
	GuardMenu->SetMenuTitle("BODYGUARD OPTIONS");
	GuardMenu->AddSubMenu("CIA Agent", CIA23);
	GuardMenu->AddSubMenu("Bodybuilder", Body23);
	GuardMenu->AddSubMenu("Stripper", Strip23);
	GuardMenu->AddSubMenu("Zombie", Zom23);
	GuardMenu->AddSubMenu("Maude", Maude23);
	GuardMenu->AddSubMenu("Naked Hobo", Naked23);
	GuardMenu->AddSubMenu("Pants Down", Male23);
	GuardMenu->AddSubMenu("Gang Member", Gang23);
	GuardMenu->AddSubMenu("Priest", Priest23);
	GuardMenu->AddSubMenu("Alien", Alien23);
	GuardMenu->AddSubMenu("BodyGuard Options", GaurdMenu2);
	GuardMenu->AddSubMenu("Animal Guards", Animal3);
	GuardMenu->AddSubMenu("Ride Animals Menu", rideAnimalsMenu);
	GuardMenu->AddStaticItem("Tank Guard", false, tankgaurds, NULL);

	// Ride Animals Menu
	rideAnimalsMenu->SetMenuTitle("Ride Animals");
	rideAnimalsMenu->AddStaticItem("Ride Aimed Animal", false, RideSpawnedAnimal, NULL);// analog stick, ill show you how its called giving you an example for others
	rideAnimalsMenu->AddStaticItem("Stop Riding Animal", false, StopRideAnimal, NULL); //find an option that you want the instructional buttons for, make it a looped option

	//Priest Menu
	Priest23->SetMenuTitle("Priest Menu");
	Priest23->AddStaticItem("Priest M16", false, Priest1, NULL);
	Priest23->AddStaticItem("Priest Launcher", false, Priest2, NULL);
	Priest23->AddStaticItem("Priest Knife", false, Priest3, NULL);
	Priest23->AddStaticItem("Priest Bat", false, Priest4, NULL);
	Priest23->AddStaticItem("Priest Hammer", false, Priest5, NULL);
	Priest23->AddStaticItem("Priest StunGun", false, Priest6, NULL);
	Priest23->AddStaticItem("Priest MiniGun", false, Priest7, NULL);
	Priest23->AddStaticItem("Priest Sawed-Off", false, Priest8, NULL);

	//Alien Menu
	Alien23->SetMenuTitle("Alien Menu");
	Alien23->AddStaticItem("Alien M16", false, Alien1, NULL);
	Alien23->AddStaticItem("Alien Launcher", false, Alien2, NULL);
	Alien23->AddStaticItem("Alien Knife", false, Alien3, NULL);
	Alien23->AddStaticItem("Alien Bat", false, Alien4, NULL);
	Alien23->AddStaticItem("Alien Hammer", false, Alien5, NULL);
	Alien23->AddStaticItem("Alien StunGun", false, Alien6, NULL);
	Alien23->AddStaticItem("Alien MiniGun", false, Alien7, NULL);
	Alien23->AddStaticItem("Alien Sawed-Off", false, Alien8, NULL);






	//Gang Member Menu
	Gang23->SetMenuTitle("Gang Member Menu");
	Gang23->AddStaticItem("Gang Member M16", false, Gang1, NULL);
	Gang23->AddStaticItem("Gang Member Launcher", false, Gang2, NULL);
	Gang23->AddStaticItem("Gang Member Knife", false, Gang3, NULL);
	Gang23->AddStaticItem("Gang Member Bat", false, Gang4, NULL);
	Gang23->AddStaticItem("Gang Member Hammer", false, Gang5, NULL);
	Gang23->AddStaticItem("Gang Member StunGun", false, Gang6, NULL);
	Gang23->AddStaticItem("Gang Member MiniGun", false, Gang7, NULL);
	Gang23->AddStaticItem("Gang Member Sawed-Off", false, Gang8, NULL);





	// Pants Down Menu
	Male23->SetMenuTitle("Pants Down Options");
	Male23->AddStaticItem("Pants Down M16", false, MaleDown, NULL);
	Male23->AddStaticItem("Pants Down Launcher", false, MaleDown1, NULL);
	Male23->AddStaticItem("Pants Down Knife", false, MaleDown2, NULL);
	Male23->AddStaticItem("Pants Down Bat", false, MaleDown3, NULL);
	Male23->AddStaticItem("Pants Down Hammer", false, MaleDown4, NULL);
	Male23->AddStaticItem("Pants Down StunGun", false, MaleDown5, NULL);
	Male23->AddStaticItem("Pants Down MiniGun", false, MaleDown6, NULL);
	Male23->AddStaticItem("Pants Down Sawed-Off", false, MaleDown7, NULL);

	// Naked Hobo Menu
	Naked23->SetMenuTitle("Naked Hobo Options");
	Naked23->AddStaticItem("Naked Hobo M16", false, NakedBody1, NULL);
	Naked23->AddStaticItem("Naked Hobo Launcher", false, NakedBody2, NULL);
	Naked23->AddStaticItem("Naked Hobo Knife", false, NakedBody3, NULL);
	Naked23->AddStaticItem("Naked Hobo Bat", false, NakedBody4, NULL);
	Naked23->AddStaticItem("Naked Hobo Hammer", false, NakedBody5, NULL);
	Naked23->AddStaticItem("Naked Hobo StunGun", false, NakedBody, NULL);
	Naked23->AddStaticItem("Naked Hobo MiniGun", false, NakedBody6, NULL);
	Naked23->AddStaticItem("Naked Hobo Sawed-Off", false, NakedBody7, NULL);

	// Maude Menu
	Maude23->SetMenuTitle("Maude Options");
	Maude23->AddStaticItem("Maude M16", false, MaudeGuard1, NULL);
	Maude23->AddStaticItem("Maude Launcher", false, MaudeGuard2, NULL);
	Maude23->AddStaticItem("Maude Knife", false, MaudeGuard3, NULL);
	Maude23->AddStaticItem("Maude Bat", false, MaudeGuard4, NULL);
	Maude23->AddStaticItem("Maude Hammer", false, MaudeGuard5, NULL);
	Maude23->AddStaticItem("Maude StunGun", false, MaudeGuard, NULL);
	Maude23->AddStaticItem("Maude MiniGun", false, MaudeGuard6, NULL);
	Maude23->AddStaticItem("Maude Sawed-Off", false, MaudeGuard7, NULL);

	// Zombie Menu
	Zom23->SetMenuTitle("Zombie Options");
	Zom23->AddStaticItem("Zombie M16", false, ZombiesSpawn3, NULL);
	Zom23->AddStaticItem("Zombie Launcher", false, ZombiesSpawn4, NULL);
	Zom23->AddStaticItem("Zombie Knife", false, ZombiesSpawn, NULL);
	Zom23->AddStaticItem("Zombie Bat", false, ZombiesSpawn2, NULL);
	Zom23->AddStaticItem("Zombie Hammer", false, ZombiesSpawn5, NULL);
	Zom23->AddStaticItem("Zombie StunGun", false, ZombiesSpawn6, NULL);
	Zom23->AddStaticItem("Zombie MiniGun", false, ZombiesSpawn7, NULL);
	Zom23->AddStaticItem("Zombie Sawed-Off", false, ZombiesSpawn8, NULL);

	// Stripper Menu
	Strip23->SetMenuTitle("Stripper Options");
	Strip23->AddStaticItem("Stripper M16", false, StripperSpawn2, NULL);
	Strip23->AddStaticItem("Stripper Launcher", false, StripperSpawn3, NULL);
	Strip23->AddStaticItem("Stripper Knife", false, StripperSpawn4, NULL);
	Strip23->AddStaticItem("Stripper Bat", false, StripperSpawn5, NULL);
	Strip23->AddStaticItem("Stripper Hammer", false, StripperSpawn6, NULL);
	Strip23->AddStaticItem("Stripper StunGun", false, StripperSpawn, NULL);
	Strip23->AddStaticItem("Stripper MiniGun", false, StripperSpawn7, NULL);
	Strip23->AddStaticItem("Stripper Sawed-Off", false, StripperSpawn8, NULL);



	// Bodybuilder Agent Menu
	Body23->SetMenuTitle("CIA Agent Options");
	Body23->AddStaticItem("Bodybuilder M16", false, BuffSpawn, NULL);
	Body23->AddStaticItem("Bodybuilder Rocket", false, BuffSpawn2, NULL);
	Body23->AddStaticItem("Bodybuilder Knife", false, BuffSpawn3, NULL);
	Body23->AddStaticItem("Bodybuilder Bat", false, BuffSpawn4, NULL);
	Body23->AddStaticItem("Bodybuilder Hammer", false, BuffSpawn5, NULL);
	Body23->AddStaticItem("Bodybuilder StunGun", false, BuffSpawn6, NULL);
	Body23->AddStaticItem("Bodybuilder MiniGun", false, BuffSpawn7, NULL);
	Body23->AddStaticItem("Bodybuilder Sawed-Off", false, BuffSpawn8, NULL);


	// CIA Agent Menu
	CIA23->SetMenuTitle("CIA Agent Options");
	CIA23->AddStaticItem("CIA Agent M16", false, CIASpawn, NULL);
	CIA23->AddStaticItem("CIA Agent Rocket", false, LIA, NULL);
	CIA23->AddStaticItem("CIA Agent Knife", false, LIA2, NULL);
	CIA23->AddStaticItem("CIA Agent Bat", false, LIA3, NULL);
	CIA23->AddStaticItem("CIA Agent Hammer", false, LIA4, NULL);
	CIA23->AddStaticItem("CIA Agent StunGun", false, LIA5, NULL);
	CIA23->AddStaticItem("CIA Agent MiniGun", false, LIA6, NULL);
	CIA23->AddStaticItem("CIA Agent Sawed-Off", false, LIA7, NULL);
	CIA23->AddStaticItem("Monkey Agent Sawed-Off", false, LIA8, NULL);

	// Bodyguard Options Menu
	GaurdMenu2->SetMenuTitle("Bodyguard Options");
	//GaurdMenu2->AddStaticItem("Give Guards Uzi", false, GiveGUzi, NULL);
	//GaurdMenu2->AddStaticItem("Give Invincibility", false, GiveGuardInvincibility, NULL);
	GaurdMenu2->AddStaticItem("Take Away Invincibility", false, TakeAwayGuardInvincibility, NULL);
	GaurdMenu2->AddStaticItem("Make Bodyguard Move", false, MakeBodyGuardRun, NULL);
	GaurdMenu2->AddStaticItem("Clear Guard's Tasks", false, ClearGuardTask, NULL);


	Animal3->AddStaticItem("Mountain Lion", false, MntLionSpawn, NULL);
	Animal3->AddStaticItem("Deer", false, DeerDown, NULL);
	Animal3->AddStaticItem("Shark", false, SharkDown, NULL);
	Animal3->AddStaticItem("Chicken", false, ChickenDown, NULL);
	Animal3->AddStaticItem("Cow", false, CowDown, NULL);
	Animal3->AddStaticItem("Chop", false, ChopGuard, NULL);
	Animal3->AddStaticItem("Husky", false, HuskGuard, NULL);
	Animal3->AddStaticItem("Pig", false, PigGuard, NULL);
	Animal3->AddStaticItem("Retriever", false, RetGuard, NULL);
	Animal3->AddStaticItem("Monkey", false, MonkGuard, NULL);
	Animal3->AddStaticItem("Chimp", false, ChimpGuard, NULL);
	Animal3->AddSubMenu("Page2", Animal4);

	Animal4->AddStaticItem("Coyote", false, CoyGuard, NULL);
	Animal4->AddStaticItem("Seagull", false, SeaGuard, NULL);
	Animal4->AddStaticItem("Pigeon", false, PigzGuard, NULL);
	Animal4->AddStaticItem("Rat", false, RatGuard, NULL);
	Animal4->AddStaticItem("Crow", false, CrowGuard, NULL);
	Animal4->AddStaticItem("Fish", false, FishGuard, NULL);
	Animal4->AddStaticItem("Duck", false, DuckGuard, NULL);
	Animal4->AddStaticItem("Animal Attack Bodyguard", false, AnimalAttack, NULL);

	// Quick Options
	quickOptionsMenu1->SetMenuTitle("Quick Options");
	quickOptionsMenu1->AddStaticItem("God Mode", true, ToggleInvincibility, NULL);
	quickOptionsMenu1->AddStaticItem("Off Radar", true, OffRadar, NULL); 
	quickOptionsMenu1->AddStaticItem("Fast Motion", true, FastMotion, NULL);
	quickOptionsMenu1->AddStaticItem("Ban Bypass", true, bypassthecash, NULL);
	quickOptionsMenu1->AddStaticItem("Give All Weapons", false, GiveAllWeapons, NULL);
	quickOptionsMenu1->AddStaticItem("Infinite Ammo", true, ToggleAmmo, NULL);
	quickOptionsMenu1->AddStaticItem("Ragdoll", true, Ragdollswagger, NULL);
	quickOptionsMenu1->AddStaticItem("Never Wanted", true, WantedPlayer, NULL);
	quickOptionsMenu1->AddStaticItem("Wanted 5 Stars", false, WantedPlayer2, NULL);
	quickOptionsMenu1->AddSubMenu("Supers", supermenu);
	quickOptionsMenu1->AddStaticItem("Display Who's Talking", true, Whostalking, NULL);
	quickOptionsMenu1->AddStaticItem("Who Muted Me", true, whosmutedme, NULL);
	quickOptionsMenu1->AddStaticItem("Mobile radio", true, MobileRadioLoop, NULL);
	quickOptionsMenu1->AddStaticItem("Heat Vision", true, Heaty, NULL);
	quickOptionsMenu1->AddStaticItem("Night Vision", true, Nighty, NULL);
	quickOptionsMenu1->AddStaticItem("Dry Off", false, DryOff, NULL);
	quickOptionsMenu1->AddStaticItem("Clean Yourself", false, CleanPedBody, NULL);
	quickOptionsMenu1->AddStaticItem("Fix Vehicle", false, FixMyCar, NULL);
	quickOptionsMenu1->AddSubMenu("Page 2", quickOptionsMenu2);

	quickOptionsMenu2->SetMenuTitle("Quick Options 2");
	quickOptionsMenu2->AddStaticItem("Invisible Player", true, InvisiblePlayer, NULL);
	quickOptionsMenu2->AddStaticItem("No Clip", true, noclip, NULL);
	quickOptionsMenu2->AddStaticItem("Moses Loop", true, noclip2, NULL);
	quickOptionsMenu2->AddStaticItem("Flash Minimap", false, FlashMinimap, NULL);
	quickOptionsMenu2->AddStaticItem("Give Duncecap", false, Duncecap, NULL);
	quickOptionsMenu2->AddStaticItem("Remove Duncecap", false, Duncecap1, NULL);
	quickOptionsMenu2->AddSubMenu("Animations Menu", AnimationMenu);
	quickOptionsMenu2->AddStaticItem("Teleport Into Nearest Car", false, TeleIntoCar, NULL);
	quickOptionsMenu2->AddSubMenu("Screen FX", fxmenu);
	//quickOptionsMenu2->AddStaticItem("Remove Fireworks Limit", false, FWLimit, NULL);
	quickOptionsMenu2->AddStaticItem("First Person Mode", true, FlyMod, NULL);
	quickOptionsMenu2->AddSubMenu("Security Cameras", SecCamerasMenu);
	quickOptionsMenu2->AddStaticItem("Detach Objects", false, Detacnhloop, NULL);
	//quickOptionsMenu2->AddStaticItem("FireMan Loop", true, firemanloop, NULL);
	quickOptionsMenu2->AddStaticItem("Personal Taxi", false, tankgaurds13, NULL);
	quickOptionsMenu2->AddStaticItem("Delete Taxi", false, teleway, NULL);
	quickOptionsMenu2->AddStaticItem("Secruity Escort", false, guardlower, NULL);
	//quickOptionsMenu2->AddSubMenu("Page 3",quickOptionsMenu3);
	//quickOptionsMenu2->AddStaticItem("Off Radar", false, Offradar, NULL);


	//Super Menu
	supermenu->SetMenuTitle("Super Menu");
	supermenu->AddStaticItem("Super Grip", true, Speed2, NULL);
	supermenu->AddStaticItem("Super Run", true, SuperRunCheat, NULL);
	supermenu->AddStaticItem("Super Punch", true, SuperPunchCheat, NULL);
	supermenu->AddStaticItem("Super Jump", true, SuperJumpCheat, NULL);
	supermenu->AddStaticItem("Super Swim", true, SwimFastCheat, NULL);
	supermenu->AddStaticItem("Superman Mode", true, SuperMod, NULL);

	//Player Protection
	Protection->SetMenuTitle("Player Protection");
	Protection->AddStaticItem("Sticky AIM Protect", true, Protection1, NULL);
	Protection->AddStaticItem("Explode Who's Talking", true, Protection2, NULL);
	Protection->AddStaticItem("Molotov AIM Protect", true, Protection3, NULL);
	Protection->AddStaticItem("Invisibe AIM Protect", true, Protection4, NULL);
	Protection->AddStaticItem("No Guns AIM Protect", true, Protection5, NULL);
	Protection->AddStaticItem("Water Aim Protect", true, Protection6, NULL);
	Protection->AddStaticItem("AirStrike Aim Protect", true, Protection7, NULL);


	//Page 3
	//quickOptionsMenu3->AddStaticItem("FX Loop", true, particallooper, NULL);
	//quickOptionsMenu3->AddStaticItem("Detach Entity", false, DetachModder, NULL);
	//quickOptionsMenu3->AddStaticItem("Detach Entity Loop", true, Detacnhloop, NULL);

	//Get Number of players
	onlinePlayersList->SetMenuTitle("Total Players + Free Slots");
	onlinePlayersList->AddStaticItem("Get Number Of Players", false, GetNumberOfPlayers, NULL);
	onlinePlayersList->AddStaticItem("Display Free Slots", true, FreeSlots2, NULL);

	AnimationMenu->SetMenuTitle("Animation Menu");
	AnimationMenu->AddStaticItem("Drunk Mode", false, DrunkMode, NULL);
	AnimationMenu->AddStaticItem("Male Mode", false, NormalM, NULL);
	AnimationMenu->AddStaticItem("Female Mode", false, NormalF, NULL);
	AnimationMenu->AddSubMenu("Sports Animations", SportOptions);
	AnimationMenu->AddSubMenu("Sex Animations", SexOptions);
	AnimationMenu->AddSubMenu("Dance Animations", DanceOptions);
	AnimationMenu->AddSubMenu("Misc Animations", MiscOptions2);
	AnimationMenu->AddSubMenu("Zombie Animations", MiscOptions5);
	AnimationMenu->AddSubMenu("Statue Animations", MiscOptions9);
	AnimationMenu->AddSubMenu("Mime Animations", MiscOptions6);
	AnimationMenu->AddSubMenu("Dog Animations", ChopAnims);
	AnimationMenu->AddSubMenu("Cougar Animations", CougAnims);
	AnimationMenu->AddSubMenu("Coyote Animations", CoyoAnims);
	AnimationMenu->AddSubMenu("Scenario Options", gravopt2);
	AnimationMenu->AddStaticItem("Stop Task", false, StopLoop, NULL);

	// Mime Options 
	MiscOptions6->AddStaticItem("Wall", false, Mime2, NULL);
	MiscOptions6->AddStaticItem("Random", false, Mime3, NULL);
	MiscOptions6->AddStaticItem("Walk", false, Mime4, NULL);
	MiscOptions6->AddStaticItem("Run", false, Mime5, NULL);

	// Statue Options 
	MiscOptions9->AddStaticItem("Base", false, Stat1, NULL);
	MiscOptions9->AddStaticItem("Enter", false, Stat2, NULL);
	MiscOptions9->AddStaticItem("Idle 1", false, Stat3, NULL);
	MiscOptions9->AddStaticItem("Idle 2", false, Stat4, NULL);


	// Zombie Options 
	MiscOptions5->SetMenuTitle("Zombie Options");
	MiscOptions5->AddStaticItem("CosPlay", false, Zombie1, NULL);
	MiscOptions5->AddStaticItem("Brainzzz", false, Zombie2, NULL);
	MiscOptions5->AddStaticItem("I Am Zombie", false, Zombie3, NULL);
	MiscOptions5->AddStaticItem("I Am Undead", false, Zombie4, NULL);
	MiscOptions5->AddStaticItem("Photo Anyone?", false, Zombie5, NULL);
	MiscOptions5->AddStaticItem("Carefull..", false, Zombie6, NULL);

	// Cougar Options 
	CougAnims->SetMenuTitle("Cougar Options");
	CougAnims->AddStaticItem("Rest Base", false, Cougar1, NULL);
	CougAnims->AddStaticItem("Rest Enter", false, Cougar2, NULL);
	CougAnims->AddStaticItem("Rest Exit", false, Cougar3, NULL);
	CougAnims->AddStaticItem("Get Up", false, Cougar6, NULL);
	CougAnims->AddStaticItem("Growling", false, Cougar5, NULL);
	CougAnims->AddStaticItem("Attack", false, Cougar4, NULL);

	// Coyote Options 
	CoyoAnims->AddStaticItem("Sit", false, Coyote1, NULL);
	CoyoAnims->AddStaticItem("Rest", false, Coyote2, NULL);
	CoyoAnims->AddStaticItem("Wander", false, Coyote3, NULL);
	CoyoAnims->AddStaticItem("Gallop", false, Coyote4, NULL);
	CoyoAnims->AddStaticItem("Attack", false, Coyote5, NULL);

	// Sport Options 
	SportOptions->SetMenuTitle("Sport Options");
	SportOptions->AddStaticItem("Situps", false, Situps, NULL);
	SportOptions->AddStaticItem("Pushups", false, Pushups, NULL);
	SportOptions->AddStaticItem("Pullups", false, PullUpsSports, NULL);

	// Sex Options 
	SexOptions->SetMenuTitle("Sex Options");
	SexOptions->AddStaticItem("Fuck", false, FuckAir, NULL);
	SexOptions->AddStaticItem("Fuck 2", false, FuckAir2, NULL);
	SexOptions->AddStaticItem("Prostitue Male Sex", false, ProsMale, NULL);
	SexOptions->AddStaticItem("Prostitue Female Sex", false, ProsFemale, NULL);
	SexOptions->AddStaticItem("Prostitue Male BJ", false, BJMale, NULL);
	SexOptions->AddStaticItem("Prostitue Female BJ", false, BJFemale, NULL);
	SexOptions->AddStaticItem("Drunk Sex Male", false, DrunkSexM, NULL);
	SexOptions->AddStaticItem("Drunk Sex Female", false, DrunkSexF, NULL);

	// Dance Options 
	DanceOptions->SetMenuTitle("Dance Options");
	DanceOptions->AddStaticItem("Pole Dance 1", false, PoleDance, NULL);
	DanceOptions->AddStaticItem("Pole Dance 2", false, PoleDance2, NULL);
	DanceOptions->AddStaticItem("Pole Dance 3", false, PoleDance3, NULL);
	DanceOptions->AddStaticItem("Private Dance", false, PrivateDance, NULL);
	DanceOptions->AddStaticItem("Tap Dance 1", false, TapDancingHeaven, NULL);
	DanceOptions->AddStaticItem("Tap Dance 2", false, ButtwagDance, NULL);
	DanceOptions->AddStaticItem("Tap Dance 3", false, VerseDance, NULL);
	DanceOptions->AddStaticItem("Tap Dance 4", false, HeavenDance, NULL);
	DanceOptions->AddStaticItem("Lap Dance", false, LapDance, NULL);


	// Misc Options2
	MiscOptions2->SetMenuTitle("Misc Animations");
	MiscOptions2->AddStaticItem("Bar", false, Hammer8, NULL);
	MiscOptions2->AddStaticItem("Celebrate", false, Celebrate, NULL);
	MiscOptions2->AddStaticItem("Chat", false, Hammer12, NULL);
	MiscOptions2->AddStaticItem("Chat 2", false, Hammer13, NULL);
	MiscOptions2->AddStaticItem("Cheer", false, Hammer10, NULL);
	MiscOptions2->AddStaticItem("Crawl", false, Hammer4, NULL);
	MiscOptions2->AddStaticItem("Cop Kneeling Arrest", false, CopKneel, NULL);
	MiscOptions2->AddStaticItem("Come over hear", false, Hammer14, NULL);
	MiscOptions2->AddStaticItem("Drunk Howling", false, TrevorDrunkHowling, NULL);
	MiscOptions2->AddStaticItem("Drunk Trevor", false, TrevorDrunk2, NULL);
	MiscOptions2->AddStaticItem("Electrocute", false, Tazer2, NULL);
	MiscOptions2->AddStaticItem("Games", false, Hammer7, NULL);
	MiscOptions2->AddStaticItem("Gay", false, Hammer3, NULL);
	MiscOptions2->AddStaticItem("Golf", false, Golfshit, NULL);
	MiscOptions2->AddStaticItem("Hammer", false, Hammer2, NULL);
	MiscOptions2->AddSubMenu("Page 2", MiscOptions3);


	// Misc Options2
	MiscOptions3->SetMenuTitle("Misc Animations Page 2");
	MiscOptions3->AddStaticItem("Investigate", false, Hammer11, NULL);
	MiscOptions3->AddStaticItem("Impatient", false, Hammer15, NULL);
	MiscOptions3->AddStaticItem("Jackking Off", false, JerkingOffLoop, NULL);
	MiscOptions3->AddStaticItem("Jog", false, Jogloop, NULL);
	MiscOptions3->AddStaticItem("Meditating", false, Meditating, NULL);
	MiscOptions3->AddStaticItem("Pee", false, Peeloop, NULL);
	MiscOptions3->AddStaticItem("Plead", false, Pleadloop, NULL);
	MiscOptions3->AddStaticItem("Rolling Barrel", false, RollingBarrel, NULL);
	MiscOptions3->AddStaticItem("Shovel", false, Preacher, NULL);
	MiscOptions3->AddStaticItem("Sit", false, SitDown, NULL);
	MiscOptions3->AddStaticItem("Sleep", false, Saxman, NULL);
	MiscOptions3->AddStaticItem("Smash", false, Hammer9, NULL);
	MiscOptions3->AddStaticItem("Stun Fire", false, FireLoop, NULL);
	MiscOptions3->AddStaticItem("Swim", false, Hammer5, NULL);
	MiscOptions3->AddStaticItem("Swim 2", false, Hammer6, NULL);
	MiscOptions3->AddSubMenu("Page 3", MiscOptions4);


	// Misc Options2
	MiscOptions4->SetMenuTitle("Misc Animations Page 3");
	MiscOptions4->AddStaticItem("Tazer", false, StunLoop, NULL);
	MiscOptions4->AddStaticItem("Wave Your Arms", false, ArmsWave, NULL);

	// Vehicle Options Page 1
	vehicleOptionMenu->SetMenuTitle("Vehicle Options");
	vehicleOptionMenu->AddSubMenu("Vehicle Spawner", CarSpawner);
	vehicleOptionMenu->AddSubMenu("Los Santos Customs", ModShop);
	vehicleOptionMenu->AddStaticItem("Vehicle Seatbelt", true, Seatbelt, NULL);
	vehicleOptionMenu->AddStaticItem("Shuffle Seats", false, SwapSeats, NULL);
	vehicleOptionMenu->AddStaticItem("Nitrous", true, ToggleNos, NULL);
	vehicleOptionMenu->AddStaticItem("Drift", true, SlideyHand, NULL);
	vehicleOptionMenu->AddStaticItem("Drive On Water", true, DriveWater, NULL);
	vehicleOptionMenu->AddStaticItem("Lowrider", true, ToggleLowRider, NULL);
	vehicleOptionMenu->AddStaticItem("Wheelie Mod", true, vehnoclip3, NULL);//ToggleEntitiyGravity1
	vehicleOptionMenu->AddStaticItem("Anti Gravity", true, ToggleEntitiyGravity1, NULL);
	vehicleOptionMenu->AddStaticItem("Drive In Air", true, DriveAir, NULL);
	vehicleOptionMenu->AddStaticItem("Lock Vehicle", false, Lock, NULL);
	vehicleOptionMenu->AddStaticItem("Unlock Vehicle", false, Unlock, NULL);
	vehicleOptionMenu->AddStaticItem("Flying Vehicle", true, ToggleFlyingVeh, NULL);
	vehicleOptionMenu->AddStaticItem("Invisible Vehicle", true, InvisibleVehicleLP, NULL);
	vehicleOptionMenu->AddStaticItem("Super Break", true, superbreakswag, NULL);
	vehicleOptionMenu->AddStaticItem("Drive On Walls", true, vehnoclip, NULL);//ToggleEntitiyGravity1
	vehicleOptionMenu->AddSubMenu("Vehicle Options 2", vehicleOptionMenu2);

	//vehicleOptionMenu2->AddStaticItem("MPH Speedgun", true, speedGunRP, NULL);
	vehicleOptionMenu2->AddStaticItem("Lower Vehicle", true, LowerVehicle, NULL);
	vehicleOptionMenu2->AddStaticItem("MPH Speedometer", true, DriveAirGz, NULL);
	vehicleOptionMenu2->AddStaticItem("Vehicle God Mode", false, ToggleInvincibleCar, NULL);
	vehicleOptionMenu2->AddStaticItem("Lazers", true, Togglelazesrs1, NULL);
	vehicleOptionMenu2->AddSubMenu("Vehicle Weapons", VWMenu);
	vehicleOptionMenu2->AddSubMenu("Vehicle Extras", vehicleextra);
	//vehicleOptionMenu2->AddSubMenu("Neons", NeonMenu);
	
	//Neon Menu
	//NeonMenu->SetMenuTitle("Vehicle Neons");
	NeonMenu->AddStaticItem("Toggle Neons", true, ToggleNeon, NULL);
	NeonMenu->AddStaticItem("Red Neons", false, RedNeon, NULL);
	NeonMenu->AddStaticItem("Green Neons", false, GreenNeon, NULL);
	NeonMenu->AddStaticItem("Blue Neons", false, BlueNeon, NULL);
	NeonMenu->AddStaticItem("Pink Neons", false, PinkNeon, NULL);
	NeonMenu->AddStaticItem("Purple Neons", false, PurpleNeon, NULL);
	NeonMenu->AddStaticItem("Orange Neons", false, OrangeNeon, NULL);
	NeonMenu->AddStaticItem("Cyan Neons", false, CyanNeon, NULL);
	NeonMenu->AddStaticItem("White Neons", false, WhiteNeon, NULL);
	NeonMenu->AddStaticItem("Remove Neons", false, RemoveNeon, NULL);

	vehicleextra->SetMenuTitle("Vehicle Extras");
	vehicleextra->AddStaticItem("UFO Car", false, FlyingAnus, NULL);
	vehicleextra->AddStaticItem("Seat Car", false, toelitcar, NULL);
	vehicleextra->AddStaticItem("Seat Car 2", false, toelitcar1, NULL);
	vehicleextra->AddSubMenu("Vehicle Attachments", vehicleextra1);

	// Vehicle Attachments	
	vehicleextra1->SetMenuTitle("Vehicle Extras");
	vehicleextra1->AddSubMenu("MiniGuns", vehicleextra3);
	vehicleextra1->AddSubMenu("Space Rifels", vehicleextra2);

	//MiniGuns
	vehicleextra3->AddStaticItem("Minigun Right", false, MinBGun, NULL);
	vehicleextra3->AddStaticItem("Minigun Left", false, MinBGun1, NULL);
	vehicleextra3->AddStaticItem("Minigun Top Right", false, MinBGun2, NULL);
	vehicleextra3->AddStaticItem("Minigun Top Left", false, MinBGun3, NULL);
	vehicleextra3->AddStaticItem("Minigun Front Right", false, MinBGun4, NULL);
	vehicleextra3->AddStaticItem("Minigun Front Left", false, MinBGun5, NULL);

	//Space Rifles
	vehicleextra2->AddStaticItem("Space Rifle Right", false, MinBGun10, NULL);
	vehicleextra2->AddStaticItem("Space Rifle Left", false, MinBGun11, NULL);
	vehicleextra2->AddStaticItem("Space Rifle Front Right", false, MinBGun14, NULL);
	vehicleextra2->AddStaticItem("Space Rifle Front Left", false, MinBGun13, NULL);

	// RGB Colors
	colorsmenu->SetMenuTitle("RGB Colors");
	colorsmenu->AddSubMenu("Custom RGB", rgbsubmenu);
	colorsmenu->AddStaticItem("Custom Green", false, Custome1, NULL);
	colorsmenu->AddStaticItem("Custom Blue", false, Custome2, NULL);
	colorsmenu->AddStaticItem("Custom Violet", false, Custome3, NULL);
	colorsmenu->AddStaticItem("Custom Red", false, Custome4, NULL);
	colorsmenu->AddStaticItem("Custom Yellow", false, Custome5, NULL);
	colorsmenu->AddStaticItem("Custom Purple", false, Custome6, NULL);
	colorsmenu->AddStaticItem("Custome Light Green", false, Custome7, NULL);
	colorsmenu->AddStaticItem("Custom Pink", false, Custome7, NULL);
	colorsmenu->AddStaticItem("Sexy Red", false, PaintMBlackv3, NULL);
	colorsmenu->AddStaticItem("Sexy Green", false, PaintMBlackv4, NULL);
	colorsmenu->AddStaticItem("Sexy Purple", false, PaintMBlackv5, NULL);
	colorsmenu->AddStaticItem("Sexy Light Blue", false, PaintMBlackv6, NULL);
	colorsmenu->AddStaticItem("Sexy Blue", false, PaintMBlackv7, NULL);
	colorsmenu->AddStaticItem("Sexy Neon blue", false, PaintMBlackv8, NULL);
	colorsmenu->AddStaticItem("Sexy Orange", false, PaintMBlackv9, NULL);
	colorsmenu->AddStaticItem("Real Gold", false, PaintMBlackv10, NULL);
	colorsmenu->AddStaticItem("Toothpaste Green", false, PaintMBlackv11, NULL);
	colorsmenu->AddSubMenu("Input Custom RGB", rgbsubmenu);
	colorsmenu->AddSubMenu("Tim's Colors", Timscolor);

	// RGB Custom
	rgbsubmenu->AddStaticItem("Custom Primary R", false, CustomRGB420, NULL);
	rgbsubmenu->AddStaticItem("Custom Primary G", false, CustomRGB421, NULL);
	rgbsubmenu->AddStaticItem("Custom Primary B", false, CustomRGB422, NULL);
	//Custome Secndory
	rgbsubmenu->AddStaticItem("Custom Secondary R", false, CustomRGB423, NULL);
	rgbsubmenu->AddStaticItem("Custom Secondary G", false, CustomRGB424, NULL);
	rgbsubmenu->AddStaticItem("Custom Secondary B", false, CustomRGB425, NULL);

	// Tims Colors
	Timscolor->AddStaticItem("Exotic Purple", false, PaintFBluev1, NULL);
	Timscolor->AddStaticItem("Hot Purple", false, PaintFBluev2, NULL);
	Timscolor->AddStaticItem("Merlot Red", false, PaintFBluev3, NULL);
	Timscolor->AddStaticItem("Highlighter Yellow", false, PaintFBluev4, NULL);
	Timscolor->AddStaticItem("Sea Foam Green", false, PaintFBluev5, NULL);
	Timscolor->AddStaticItem("3D Purple", false, PaintFBluev6, NULL);

	// Paint Menu Page 1
	VehPaintMenu->AddSubMenu("Vehicle Livery", LiveryMenu);
	VehPaintMenu->AddStaticItem("Rainbow Car", true, ToggleRainbow, NULL);
	VehPaintMenu->AddStaticItem("Random Color", false, RandomPaint, NULL);
	VehPaintMenu->AddSubMenu("Rim Paint", RimPaint);
	VehPaintMenu->AddStaticItem("Chrome", false, PaintChrome, NULL);
	VehPaintMenu->AddStaticItem("Metallic Black", false, PaintBlack, NULL);
	VehPaintMenu->AddStaticItem("Matte Black", false, PaintMBlack, NULL);
	VehPaintMenu->AddStaticItem("Mettalic White", false, PaintMWhite, NULL);
	VehPaintMenu->AddStaticItem("Matte White", false, PaintMatteWhite, NULL);
	VehPaintMenu->AddStaticItem("Pure Gold", false, PaintGold, NULL);
	VehPaintMenu->AddStaticItem("Lime Green", false, PaintLimeGreen, NULL);
	VehPaintMenu->AddStaticItem("Hot Pink", false, PaintHotPink, NULL);
	VehPaintMenu->AddStaticItem("Fluorescent Blue", false, PaintFBlue, NULL);
	VehPaintMenu->AddStaticItem("Blue Angels", false, PaintBAngels, NULL);
	VehPaintMenu->AddSubMenu("Page 2", VehPaintMenu2);

	// Paint Menu Page 2
	VehPaintMenu2->SetMenuTitle("Page 2");
	VehPaintMenu2->AddStaticItem("Red", false, PaintRed, NULL);
	VehPaintMenu2->AddStaticItem("Orange", false, PaintOrange, NULL);
	VehPaintMenu2->AddStaticItem("Purple", false, PaintPurple, NULL);
	VehPaintMenu2->AddStaticItem("Black/Chrome", false, PaintCombo01, NULL);
	VehPaintMenu2->AddStaticItem("White/Chrome", false, PaintCombo02, NULL);
	VehPaintMenu2->AddStaticItem("Blue/Chrome", false, PaintCombo05, NULL);
	VehPaintMenu2->AddStaticItem("Lime/Chrome", false, PaintCombo06, NULL);
	VehPaintMenu2->AddStaticItem("Pink/Chrome", false, PaintCombo07, NULL);
	VehPaintMenu2->AddStaticItem("White/Black", false, PaintCombo03, NULL);
	VehPaintMenu2->AddStaticItem("Black/White", false, PaintCombo08, NULL);
	VehPaintMenu2->AddStaticItem("Desert/Black", false, PaintCombo04, NULL);
	VehPaintMenu2->AddStaticItem("Red/Black", false, PaintCombo09, NULL);

	LiveryMenu->SetMenuTitle("Vehicle Livery");
	LiveryMenu->AddStaticItem("Show Livery Count", false, ShowVehLivery, NULL);
	LiveryMenu->AddStaticItem("Livery 1", false, VehLivery1, NULL);
	LiveryMenu->AddStaticItem("Livery 2", false, VehLivery2, NULL);
	LiveryMenu->AddStaticItem("Livery 3", false, VehLivery3, NULL);
	LiveryMenu->AddStaticItem("Livery 4", false, VehLivery4, NULL);
	LiveryMenu->AddStaticItem("Livery 5", false, VehLivery5, NULL);
	LiveryMenu->AddStaticItem("Livery 6", false, VehLivery6, NULL);
	LiveryMenu->AddStaticItem("Livery 7", false, VehLivery7, NULL);
	LiveryMenu->AddStaticItem("Livery 8", false, VehLivery8, NULL);

	// Rim Paint Menu
	RimPaint->SetMenuTitle("Rim Paint Options");
	RimPaint->AddStaticItem("Lime Green", false, PaintRim0, NULL);
	RimPaint->AddStaticItem("Black", false, PaintRim1, NULL);
	RimPaint->AddStaticItem("White", false, PaintRim2, NULL);
	RimPaint->AddStaticItem("Blue", false, PaintRim3, NULL);
	RimPaint->AddStaticItem("Hot Pink", false, PaintRim4, NULL);
	RimPaint->AddStaticItem("Purple", false, PaintRim5, NULL);
	RimPaint->AddStaticItem("Red", false, PaintRim6, NULL);

	// Vehicle Weapons
	VWMenu->SetMenuTitle("Vehicle Weapons");
	VWMenu->AddStaticItem("Vehicle Rockets", true, ToggleRocket, NULL);
	VWMenu->AddStaticItem("Vehicle Machineguns", true, ToggleMini, NULL);
	VWMenu->AddStaticItem("Vehicle Super Bullets", true, ToggleSuperMG, NULL);
	VWMenu->AddStaticItem("Vehicle Fireworks", true, ToggleFWVehicle, NULL);
	VWMenu->AddStaticItem("Vehicle Flares", true, ToggleVehicleFlare, NULL);
	VWMenu->AddStaticItem("Vehicle Lazer Guns", true, ToggleVehicleSavage, NULL);

	// Weapon Options
	weaponOptionsMenu->SetMenuTitle("Weapon Options");
	weaponOptionsMenu->AddStaticItem("Dead Eye", true, SlowMotion11, NULL);
	weaponOptionsMenu->AddStaticItem("Gravity Gun", true, Togglegravegun, NULL);
	weaponOptionsMenu->AddStaticItem("Tazer Bullets/Punches", true, ToggleCreatorFlares2, NULL);
	weaponOptionsMenu->AddStaticItem("Explosive Ammo", true, ExplosiveAmmo, NULL);
	weaponOptionsMenu->AddStaticItem("Explosive Ammo 1", true, ExplosiveAmmo1, NULL);
	weaponOptionsMenu->AddStaticItem("Fire Ammo", true, FireAmmo, NULL);
	weaponOptionsMenu->AddStaticItem("Car Gun", true, ToggleUltimateDeagle, NULL);
	weaponOptionsMenu->AddStaticItem("1 Shot Kill", true, WantedPlayer3, NULL);
	weaponOptionsMenu->AddStaticItem("Force Field", true, FieldToggle, NULL);
	weaponOptionsMenu->AddStaticItem("Invisible Weapon", true, VisWeapon, NULL);
	weaponOptionsMenu->AddStaticItem("Switch Aim To Traditional", false, targets1, NULL);
	weaponOptionsMenu->AddSubMenu("Weapon Tints", weptints);
	weaponOptionsMenu->AddSubMenu("Cross Hairs", weptints2);//RocketTrigGun
	weaponOptionsMenu->AddSubMenu("Fun Gun menu", FunGunMenu);
	weaponOptionsMenu->AddSubMenu("Weapon Gun menu", WeaponGun);

	//Weapon Gun Options
	WeaponGun->AddStaticItem("Rocket Gun", true, RocketTrigGun, NULL);
	WeaponGun->AddStaticItem("Tank Gun", true, RocketTrigGun1, NULL);
	WeaponGun->AddStaticItem("Grenade Gun", true, RocketTrigGun2, NULL);
	WeaponGun->AddStaticItem("Flare Gun", true, RocketTrigGun3, NULL);
	WeaponGun->AddStaticItem("SnowBall Gun", true, RocketTrigGun4, NULL);
	WeaponGun->AddStaticItem("FireWork Gun", true, RocketTrigGun5, NULL);

	weptints2->SetMenuTitle("Cross Hairs");
	weptints2->AddStaticItem("Green Shield", true, Cross1, NULL);
	weptints2->AddStaticItem("Purple Shield", true, Cross2, NULL);
	weptints2->AddStaticItem("Red Skull", true, Cross3, NULL);
	weptints2->AddStaticItem("Violet Skull", true, Cross4, NULL);

	FunGunMenu->SetMenuTitle("Fun Gun Menu");
	FunGunMenu->AddStaticItem("Fun Gun", true, ToggleFunGun, NULL);
	FunGunMenu->AddStaticItem("Dildo Ammo", true, FunGunItemDildo, NULL);
	FunGunMenu->AddStaticItem("White Block", true, FunGunItemWhiteBlock, NULL);
	FunGunMenu->AddStaticItem("Alien egg", true, FunGunItemAlienEgg, NULL);
	FunGunMenu->AddStaticItem("Body Parts", true, FunGunItemBodyParts, NULL);
	FunGunMenu->AddStaticItem("Wrecked Buzzard", true, FunGunItem1, NULL);
	FunGunMenu->AddStaticItem("Ambulance Ammo", true, FunGunItem2, NULL);
	FunGunMenu->AddStaticItem("Number 1", true, FunGunItem3, NULL);
	FunGunMenu->AddStaticItem("UFO", true, FunGunItem4, NULL);
	FunGunMenu->AddStaticItem("Ferris Wheel", true, FunGunItem11, NULL);
	FunGunMenu->AddStaticItem("WheelChair", true, FunGunItem5, NULL);//1677315747
	FunGunMenu->AddStaticItem("tv", true, FunGunItem6, NULL);
	FunGunMenu->AddStaticItem("Rock", true, FunGunItem7, NULL);
	FunGunMenu->AddStaticItem("Cash", true, FunGunItem8, NULL);
	FunGunMenu->AddStaticItem("Porn Mag", true, FunGunItem9, NULL);
	FunGunMenu->AddStaticItem("Tube Gun", true, FunGunItem10, NULL);


	// Weapon Tints Sub Menu
	weptints->SetMenuTitle("Weapon Tins");
	weptints->AddStaticItem("Gold Tint", false, goldtint, NULL);
	weptints->AddStaticItem("Green Tint", false, greentint, NULL);
	weptints->AddStaticItem("Pink Tint", false, pinktint, NULL);
	weptints->AddStaticItem("Army Tint", false, armytint, NULL);
	weptints->AddStaticItem("LSPD Tint", false, lspdtint, NULL);
	weptints->AddStaticItem("Orange Tint", false, orangetint, NULL);
	weptints->AddStaticItem("Platinum Tint", false, plattint, NULL);
	weptints->AddStaticItem("Rainbow", true, rainbowzgun, NULL);
	// Online Players Sub Menu
	onlinePlayersSubMenu->SetMenuTitle("Online Player Options");
	onlinePlayersSubMenu->AddStaticItem("Give $100 Million", false, Give100MillionOnlinePlayer, NULL);
	onlinePlayersSubMenu->AddSubMenu("Teleport Options", OnlinePlayerTeleport);
	onlinePlayersSubMenu->AddSubMenu("Vehicle Options", OnlinePlayerVehicleOptions);
	onlinePlayersSubMenu->AddSubMenu("Vehicle Spawner", CarSpawner1);
	onlinePlayersSubMenu->AddStaticItem("Give Tracker", false, givetracker, NULL); 
	onlinePlayersSubMenu->AddSubMenu("Give Options", OnlinePlayersGiveMenu);
	onlinePlayersSubMenu->AddSubMenu("Attach Options", ObjectAttachments);
	onlinePlayersSubMenu->AddStaticItem("Clone Player", false, ClonePedOnline1, NULL);
	onlinePlayersSubMenu->AddStaticItem("Steal Outfit", false, stealoutfit, NULL);
	onlinePlayersSubMenu->AddSubMenu("Cash Options", CashDropMenu);
	onlinePlayersSubMenu->AddStaticItem("Fix Vehicle", false, FixVehicleOnline, NULL);
	onlinePlayersSubMenu->AddStaticItem("ESP Loop", true, ToggleESP2, NULL);
	onlinePlayersSubMenu->AddStaticItem("Player Protection", true, Protection69, NULL);
	onlinePlayersSubMenu->AddStaticItem("Send Text Message", false, SendText, NULL);
	onlinePlayersSubMenu->AddSubMenu("Bad Stuff", NaughtyStuff);

	//Particle Fx Menu
	particlemenu->AddStaticItem("Clown Smoke", true, ParticleFx1, NULL);
	particlemenu->AddStaticItem("Player Fart", true, ParticleFx14, NULL);
	particlemenu->AddStaticItem("Alien Disintegrate", false, ParticleFx3, NULL);
	particlemenu->AddStaticItem("Water Splash", false, ParticleFx4, NULL);
	particlemenu->AddStaticItem("Sparks", false, ParticleFx5, NULL);
	particlemenu->AddStaticItem("Flames", false, ParticleFx6, NULL);
	particlemenu->AddStaticItem("Burnout", false, ParticleFx7, NULL);
	particlemenu->AddStaticItem("Flash", false, ParticleFx8, NULL);
	particlemenu->AddStaticItem("Spikes", false, ParticleFx9, NULL);
	particlemenu->AddStaticItem("Clown", false, ParticleFx10, NULL);
	particlemenu->AddStaticItem("Blood Impact", false, ParticleFx11, NULL);
	particlemenu->AddStaticItem("Train Sparks", false, ParticleFx12, NULL);
	particlemenu->AddStaticItem("Bank Notes", false, ParticleFx13, NULL);
	particlemenu->AddStaticItem("Big Clown Smoke", false, ParticleFx15, NULL);

	//Cash Drop Menu
	CashDropMenu->SetMenuTitle("Cash Drop Menu");
	CashDropMenu->AddStaticItem("Toggle Drop Rain", true, InsaneCash, NULL);
	CashDropMenu->AddStaticItem("Toggle Drop Troll", true, InsaneCash1, NULL);
	CashDropMenu->AddStaticItem("Toggle Drop Rain 2", true, InsaneCash2, NULL);
	CashDropMenu->AddStaticItem("Cash Drop 40K", false, swagbags, NULL);
	CashDropMenu->AddStaticItem("Set Dildo 2K", false, Dildo, NULL);
	CashDropMenu->AddStaticItem("Set Weed 2K", false, WeedDrop, NULL);
	CashDropMenu->AddStaticItem("Set XMAS Tree 2K", false, XMAS1, NULL);
	CashDropMenu->AddStaticItem("Set Pool Table 2K", false, PoolTable, NULL);
	CashDropMenu->AddStaticItem("Set Air Hockey 2K", false, Pumpkin, NULL);
	CashDropMenu->AddStaticItem("Set Sword 2K", false, SwordDrop, NULL);
	CashDropMenu->AddStaticItem("Set Coffin 2K", false, CoffinDrop, NULL);
	CashDropMenu->AddStaticItem("Set Alien Egg 2K", false, EggDrop, NULL);
	CashDropMenu->AddStaticItem("Soda Drop 2K", false, OneDollarCashDrop, NULL);
	CashDropMenu->AddStaticItem("Money Table 2K", false, MoneyTableDrop, NULL);
	CashDropMenu->AddStaticItem("Brief Case 2K", false, MachineDrop, NULL);
	CashDropMenu->AddStaticItem("Snowman 2K", false, Snowmanbg, NULL);

	OnlinePlayersGiveMenu->SetMenuTitle("Give Options");
	OnlinePlayersGiveMenu->AddStaticItem("Give Weapons", false, GiveWeaponsOnline, NULL);
	OnlinePlayersGiveMenu->AddStaticItem("Give Pickup Weapons", false, GiveOnlinePickupGuns, NULL);
	OnlinePlayersGiveMenu->AddStaticItem("Drop Ammo", false, GiveOnlineAmmo, NULL);
	OnlinePlayersGiveMenu->AddStaticItem("Give Parachute", false, GiveOnlineParachute, NULL);
	OnlinePlayersGiveMenu->AddStaticItem("Drop Health", false, GiveHealth, NULL);
	OnlinePlayersGiveMenu->AddStaticItem("Drop Armour", false, GiveArmour, NULL);
	OnlinePlayersGiveMenu->AddStaticItem("Give Stun Gun", false, GivePlayerStun, NULL); 
	OnlinePlayersGiveMenu->AddStaticItem("Give Freeze Gun", false, GiveFreezeGun, NULL); 
	OnlinePlayersGiveMenu->AddStaticItem("Give Boot Gun", false, GiveBootGun, NULL);

	// Online Players Attach Options
	ObjectAttachments->SetMenuTitle("Attach Object Menu");
	ObjectAttachments->AddSubMenu("Attach To Player", AttachPlayer);
	ObjectAttachments->AddStaticItem("Fuck Player", true, FuckPlayer, NULL);
	ObjectAttachments->AddStaticItem("Attach Creator Object", false, AttachCreator, NULL);
	ObjectAttachments->AddStaticItem("Attach Active TV", false, AttachTV2, NULL);
	ObjectAttachments->AddStaticItem("Attach Air Hockey", false, AttachGame2, NULL);
	ObjectAttachments->AddStaticItem("Attach Alien Egg", false, AttachBouy2, NULL);
	ObjectAttachments->AddStaticItem("Attach Arcade Game", false, AttachGame, NULL);
	ObjectAttachments->AddStaticItem("Attach Asteroid", false, AttachAsteroid, NULL);
	ObjectAttachments->AddStaticItem("Attach Barrel", false, AttachBarrel, NULL);
	ObjectAttachments->AddStaticItem("Attach Beach Bench", false, AttachBeachBench, NULL);
	ObjectAttachments->AddStaticItem("Attach Beer Neon", false, AttachNeon, NULL);
	ObjectAttachments->AddStaticItem("Attach Big Foot", false, AttachBig2, NULL);
	ObjectAttachments->AddStaticItem("Attach Big Orange Ball", false, AttachOrangeBall, NULL);
	ObjectAttachments->AddSubMenu("Attach Big Tree", TreeOptions);
	ObjectAttachments->AddStaticItem("Attach Bong", false, BongHand, NULL);
	ObjectAttachments->AddSubMenu("Page 2", ObjectAttachments2);

	// Attach To Player Menu
	AttachPlayer->SetMenuTitle("Attach To Player Menu");
	AttachPlayer->AddStaticItem("Attach To Player", true, AttachBouy, NULL);
	AttachPlayer->AddStaticItem("Attach To Head", true, AttachPedHead, NULL);
	AttachPlayer->AddStaticItem("Attach To Left", true, AttachPedLeft, NULL);
	AttachPlayer->AddStaticItem("Attach To Right", true, AttachPedRight, NULL);
	AttachPlayer->AddStaticItem("Attach To Front", true, AttachPedFront, NULL);



	// Online Players Attach Options Page 2
	ObjectAttachments2->SetMenuTitle("Attach Object Menu (Page 2)");
	ObjectAttachments2->AddStaticItem("Attach Bank Vault Door", false, AttachBankVaultDoor, NULL);
	ObjectAttachments2->AddStaticItem("Attach Bad Donuts", false, AttachDonut5, NULL);
	ObjectAttachments2->AddStaticItem("Attach Bottle", false, Bottle, NULL);
	ObjectAttachments2->AddStaticItem("Attach Bottle2", false, Bottle2, NULL);
	ObjectAttachments2->AddStaticItem("Attach Cactus", false, AttachCactus, NULL);
	ObjectAttachments2->AddStaticItem("Attach Cage", false, AttachCage, NULL);
	ObjectAttachments2->AddSubMenu("Attach Campfire", CampfireOptions);
	ObjectAttachments2->AddStaticItem("Attach Cash Register", false, AttachCashRegister, NULL);
	ObjectAttachments2->AddStaticItem("Attach Chandelier", false, Attachchandelier, NULL);
	ObjectAttachments2->AddStaticItem("Attach Clown Chair", false, AttachClownChair, NULL);
	ObjectAttachments2->AddStaticItem("Attach Clock", false, AttachClock, NULL);
	ObjectAttachments2->AddStaticItem("Attach Coffin", false, AttachCoffin, NULL);
	ObjectAttachments2->AddStaticItem("Attach Cola Float", false, AttachJacked2, NULL);
	ObjectAttachments2->AddStaticItem("Attach Cone", false, Cone2, NULL);
	ObjectAttachments2->AddStaticItem("Attach Construction Barrel", false, AttachConstBarrel, NULL);
	ObjectAttachments2->AddSubMenu("Page 3", ObjectAttachments3);

	// Tree Options
	TreeOptions->SetMenuTitle("Tree Menu");
	TreeOptions->AddStaticItem("Attach Hand", false, AttachHandR1, NULL);
	TreeOptions->AddStaticItem("Attach Head", false, AttachHandH1, NULL);
	TreeOptions->AddStaticItem("Attach Feet", false, AttachFootL1, NULL);
	TreeOptions->AddStaticItem("Attach Elbow", false, AttachElL1, NULL);
	TreeOptions->AddStaticItem("Attach Knee", false, AttachNeeL1, NULL);
	TreeOptions->AddStaticItem("Attach Waist", false, AttachBelt1, NULL);
	TreeOptions->AddStaticItem("Attach Neck", false, AttachNeck1, NULL);
	TreeOptions->AddStaticItem("Attach Shoulders", false, AttachShl1, NULL);

	// Mill Options
	MillOptions->SetMenuTitle("Mill Menu");
	MillOptions->AddStaticItem("Attach Hand", false, AttachHandR2, NULL);
	MillOptions->AddStaticItem("Attach Head", false, AttachHandH2, NULL);
	MillOptions->AddStaticItem("Attach Feet", false, AttachFootL2, NULL);
	MillOptions->AddStaticItem("Attach Elbow", false, AttachElL2, NULL);
	MillOptions->AddStaticItem("Attach Knee", false, AttachNeeL2, NULL);
	MillOptions->AddStaticItem("Attach Waist", false, AttachBelt2, NULL);
	MillOptions->AddStaticItem("Attach Neck", false, AttachNeck2, NULL);
	MillOptions->AddStaticItem("Attach Shoulders", false, AttachShl2, NULL);


	// Campfire Options
	CampfireOptions->SetMenuTitle("Campfire Menu");
	CampfireOptions->AddStaticItem("Attach Hand", false, AttachHandR, NULL);
	CampfireOptions->AddStaticItem("Attach Head", false, AttachHandH, NULL);
	CampfireOptions->AddStaticItem("Attach Feet", false, AttachFootL, NULL);
	CampfireOptions->AddStaticItem("Attach Elbow", false, AttachElL, NULL);
	CampfireOptions->AddStaticItem("Attach Knee", false, AttachNeeL, NULL);
	CampfireOptions->AddStaticItem("Attach Waist", false, AttachBelt, NULL);
	CampfireOptions->AddStaticItem("Attach Neck", false, AttachNeck, NULL);
	CampfireOptions->AddStaticItem("Attach Shoulders", false, AttachShl, NULL);


	// Online Players Attach Options Page 3
	ObjectAttachments3->SetMenuTitle("Attach Object Menu (Page 3)");
	ObjectAttachments3->AddStaticItem("Attach Cube", false, AttachDummyCar, NULL);
	ObjectAttachments3->AddStaticItem("Attach Dick Burger", false, Attachweiner1, NULL);
	ObjectAttachments3->AddStaticItem("Attach Dick Burger 2", false, Attachweiner2, NULL);
	ObjectAttachments3->AddStaticItem("Attach Dick (Classy)", false, Attachweiner3, NULL);
	ObjectAttachments3->AddStaticItem("Attach Dumpster", false, AttachDumpster, NULL);
	ObjectAttachments3->AddStaticItem("Attach Dick Head", false, AttachHead, NULL);
	ObjectAttachments3->AddStaticItem("Attach Dick Body", false, HugeDick, NULL);
	ObjectAttachments3->AddStaticItem("Attach Door", false, AttachDoor, NULL);
	ObjectAttachments3->AddStaticItem("Attach Ferris Cart", false, AttachCart1, NULL);
	ObjectAttachments3->AddStaticItem("Attach Ferris Wheel", false, AttachFerrisWheel, NULL);
	ObjectAttachments3->AddStaticItem("Attach Fishing Pole", false, GiveFishingPole, NULL);
	ObjectAttachments3->AddStaticItem("Attach Flamingo", false, Flamingo, NULL);
	ObjectAttachments3->AddStaticItem("Attach Flare", false, flare2, NULL);
	ObjectAttachments3->AddStaticItem("Attach Food Van", false, AttachFoodVan, NULL);
	ObjectAttachments3->AddStaticItem("Attach Food Van2", false, AttachFoodVan2, NULL);
	ObjectAttachments3->AddSubMenu("Page 4", ObjectAttachments4);

	// Online Players Attach Options Page 4
	ObjectAttachments4->SetMenuTitle("Attach Object Menu (Page 4)");
	ObjectAttachments4->AddStaticItem("Attach Gas Mask", false, AttachGass, NULL);
	ObjectAttachments4->AddStaticItem("Attach Glass Door", false, AttachDoor2, NULL);
	ObjectAttachments4->AddStaticItem("Attach Gnome", false, flare3, NULL);
	ObjectAttachments4->AddStaticItem("Attach Hat", false, AttachHat2, NULL);
	ObjectAttachments4->AddStaticItem("Attach Hotdog 1", false, AttachDickLog2, NULL);
	ObjectAttachments4->AddStaticItem("Attach Hotdog 2", false, AttachDickLog3, NULL);
	ObjectAttachments4->AddStaticItem("Attach Huge Propane", false, AttachRon, NULL);
	ObjectAttachments4->AddStaticItem("Attach Kayak", false, AttachKayak, NULL);
	ObjectAttachments4->AddStaticItem("Attach Knife", false, GiveKnife, NULL);
	ObjectAttachments4->AddStaticItem("Attach Lawn Mower", false, MowerHand, NULL);
	ObjectAttachments4->AddStaticItem("Attach LightPole", false, Lighthand2, NULL);
	ObjectAttachments4->AddStaticItem("Attach Mushroom", false, flare4, NULL);
	ObjectAttachments4->AddStaticItem("Attach No Go Vodka", false, AttachNoGoVodka, NULL);
	ObjectAttachments4->AddStaticItem("Attach Neon Shield", false, neonhand, NULL);
	ObjectAttachments4->AddStaticItem("Attach Old Boat", false, AttachOldBoat, NULL);
	ObjectAttachments4->AddSubMenu("Page 5", ObjectAttachments5);

	// Online Players Attach Options Page 5
	ObjectAttachments5->SetMenuTitle("Attach Object Menu (Page 5)");
	ObjectAttachments5->AddStaticItem("Attach Pan", false, GivePan, NULL);
	ObjectAttachments5->AddStaticItem("Attach Plant", false, AttachPlant, NULL);
	ObjectAttachments5->AddStaticItem("Attach Panty", false, GivePanty, NULL);
	ObjectAttachments5->AddStaticItem("Attach Plant", false, AttachPlant, NULL);
	ObjectAttachments5->AddStaticItem("Attach Pool Bed", false, PoolHand, NULL);
	ObjectAttachments5->AddStaticItem("Attach Pool Table", false, AttachTable1, NULL);
	ObjectAttachments5->AddStaticItem("Attach Pool Tube", false, AttachTable2, NULL);
	ObjectAttachments5->AddStaticItem("Attach Radar", false, AttachRadar, NULL);
	ObjectAttachments5->AddStaticItem("Attach Riot Shield", false, RiotHand, NULL);
	ObjectAttachments5->AddStaticItem("Attach Roof Spin", false, AttachSpin, NULL);
	ObjectAttachments5->AddStaticItem("Attach Snow Bucket", false, AttachSnowBucket, NULL);
	ObjectAttachments5->AddStaticItem("Attach Slushi", false, AttachSlushi, NULL);
	ObjectAttachments5->AddStaticItem("Attach Snowman", false, Snowman, NULL);
	ObjectAttachments5->AddStaticItem("Attach Snow Sign", false, AttachSnow, NULL);
	ObjectAttachments5->AddStaticItem("Attach Soda Machine", false, AttachSoda, NULL);
	ObjectAttachments6->AddStaticItem("Attach Space Rifle", false, AttachRif, NULL);
	ObjectAttachments5->AddSubMenu("Page 6", ObjectAttachments6);

	// Online Players Attach Options Page 6
	ObjectAttachments6->SetMenuTitle("Attach Object Menu (Page 6)");
	ObjectAttachments6->AddStaticItem("Attach Sprinkler NIGHT", false, AttachSprinkler, NULL);
	ObjectAttachments6->AddStaticItem("Attach Stair case", false, AttachStair, NULL);
	ObjectAttachments6->AddStaticItem("Attach Statue", false, AttachStatue, NULL);
	ObjectAttachments6->AddStaticItem("Attach Straw Hat", false, AttachHat6, NULL);
	ObjectAttachments6->AddStaticItem("Attach Street Lamp", false, AttachStreetLamp, NULL);
	ObjectAttachments6->AddStaticItem("Attach Street Light", false, AttachStreet, NULL);
	ObjectAttachments6->AddStaticItem("Attach Swing", false, AttachSwing, NULL);
	ObjectAttachments6->AddStaticItem("Attach Sword", false, SwordHand, NULL);
	ObjectAttachments6->AddStaticItem("Attach Sword Head", false, SwordHand1, NULL);
	ObjectAttachments6->AddStaticItem("Attach Toy Plane", false, AttachDummyPlane, NULL);
	ObjectAttachments6->AddStaticItem("Attach Toy", false, GiveToy, NULL);
	ObjectAttachments6->AddStaticItem("Attach Traffic Cone", false, AttachCone, NULL);
	ObjectAttachments6->AddStaticItem("Attach Train Crate", false, AttachTrain, NULL);
	ObjectAttachments6->AddStaticItem("Attach Train", false, AttachTrain1, NULL);
	ObjectAttachments6->AddSubMenu("Page 7", ObjectAttachments7);

	// Online Players Attach Options Page 7
	ObjectAttachments7->SetMenuTitle("Attach Object Menu (Page 7)");
	ObjectAttachments7->AddStaticItem("Attach Trash Can", false, AttachTrashCan, NULL);
	ObjectAttachments7->AddStaticItem("Attach TV", false, AttachTV, NULL);
	ObjectAttachments7->AddStaticItem("Attach UFO", false, Attachufonhead, NULL);
	ObjectAttachments7->AddStaticItem("Attach MiniGuns", false, AttachMinugunCannons, NULL);
	ObjectAttachments7->AddStaticItem("Attach Umbrella", false, AttachUmbrella, NULL);
	ObjectAttachments7->AddStaticItem("Attach Warheads", false, AttachWarheads, NULL);
	ObjectAttachments7->AddStaticItem("Attach Weed", false, AttachWeed, NULL);
	ObjectAttachments7->AddStaticItem("Attach White Arrow", false, AttachArrow, NULL);
	ObjectAttachments7->AddStaticItem("Attach White Elevator", false, AttachEle, NULL);
	ObjectAttachments7->AddStaticItem("Attach Wild Axe", false, AttachAxe, NULL);
	ObjectAttachments7->AddSubMenu("Attach WindMill", MillOptions);
	ObjectAttachments7->AddStaticItem("Attach Water Cone", false, AttachJacked, NULL);
	ObjectAttachments7->AddStaticItem("Attach Zultar Machine", false, AttachZultar, NULL);
	ObjectAttachments7->AddSubMenu("Attach Number", AttachNumbers);

	// Number Options
	AttachNumbers->SetMenuTitle("Number Menu");
	AttachNumbers->AddStaticItem("Number 0", false, AttachN0, NULL);
	AttachNumbers->AddStaticItem("Number 1", false, AttachN1, NULL);
	AttachNumbers->AddStaticItem("Number 2", false, AttachN2, NULL);
	AttachNumbers->AddStaticItem("Number 3", false, AttachN3, NULL);
	AttachNumbers->AddStaticItem("Number 4", false, AttachN4, NULL);
	AttachNumbers->AddStaticItem("Number 5", false, AttachN5, NULL);
	AttachNumbers->AddStaticItem("Number 6", false, AttachN6, NULL);
	AttachNumbers->AddStaticItem("Number 7", false, AttachN7, NULL);
	AttachNumbers->AddStaticItem("Number 8", false, AttachN8, NULL);
	AttachNumbers->AddStaticItem("Number 9", false, AttachN9, NULL);

	// Police Models
	ModelChanger2->SetMenuTitle("Police Models Menu");
	ModelChanger2->AddStaticItem("CIA", false, CIA, NULL);
	ModelChanger2->AddStaticItem("Female Cop", false, COPF, NULL);
	ModelChanger2->AddStaticItem("FIB", false, FBI, NULL);
	ModelChanger2->AddStaticItem("Highway Cop", false, COPHW, NULL);
	ModelChanger2->AddStaticItem("Male Cop", false, COPM, NULL);
	ModelChanger2->AddStaticItem("Male Sheriff", false, COPSH, NULL);
	ModelChanger2->AddStaticItem("Mercenary", false, MERC, NULL);
	ModelChanger2->AddStaticItem("Mercenary2", false, MercModel, NULL);
	ModelChanger2->AddStaticItem("Prisoner", false, PrisonnModel, NULL);
	ModelChanger2->AddStaticItem("Security", false, SEC, NULL);
	ModelChanger2->AddStaticItem("Security2", false, SEC2, NULL);
	ModelChanger2->AddStaticItem("Snow Cop", false, COPSW, NULL);
	ModelChanger2->AddStaticItem("Swat", false, SwatModel, NULL);

	//Military Models
	ModelChanger100->SetMenuTitle("Military Models Menu");
	ModelChanger100->AddStaticItem("Male BlackOps", false, MBO, NULL);
	ModelChanger100->AddStaticItem("Male Military", false, MMM, NULL);
	ModelChanger100->AddStaticItem("Mercenary", false, MercModel, NULL);
	ModelChanger100->AddStaticItem("Pilot", false, PilotModel, NULL);

	//Model Changer303
	ModelChanger303->SetMenuTitle("Animals Models Menu");
	ModelChanger303->AddStaticItem("Activate Animal Attack", false, AnimalAttack, NULL);
	ModelChanger303->AddStaticItem("Boar", false, BoarModel, NULL);
	ModelChanger303->AddStaticItem("Chimp", false, ChimpModel, NULL);
	ModelChanger303->AddStaticItem("Chop", false, ChopModel, NULL);
	ModelChanger303->AddStaticItem("Coyote", false, CoyoteModel, NULL);
	ModelChanger303->AddStaticItem("Husky", false, HuskyModel, NULL);
	ModelChanger303->AddStaticItem("Monkey", false, MonkeyModel, NULL);
	ModelChanger303->AddStaticItem("Mountain Lion", false, MtLion, NULL);
	ModelChanger303->AddStaticItem("Pig", false, PigModel, NULL);
	ModelChanger303->AddStaticItem("Retriever", false, RetModel, NULL);
	ModelChanger303->AddStaticItem("Rottweiler", false, RotModel, NULL);
	ModelChanger303->AddStaticItem("Shepherd", false, ShepModel, NULL);

	// Model Changer
	ModelChanger->SetMenuTitle("Model Changer");
	ModelChanger->AddStaticItem("Random Clothes", false, Random, NULL);
	ModelChanger->AddStaticItem("Randomize Accessories", false, Random3, NULL);
	ModelChanger->AddSubMenu("Animal Models Menu", ModelChanger303);
	ModelChanger->AddSubMenu("Military Models Menu", ModelChanger100);
	ModelChanger->AddSubMenu("Police Models Menu", ModelChanger2);
	ModelChanger->AddStaticItem("Abigail", false, Abigal, NULL);
	ModelChanger->AddStaticItem("Alien", false, AlienModel, NULL);
	ModelChanger->AddStaticItem("Amanda", false, Amanda, NULL);
	ModelChanger->AddStaticItem("Anita", false, Anita, NULL);
	ModelChanger->AddStaticItem("Astronaut", false, SpaceMan, NULL);
	ModelChanger->AddStaticItem("Autopsy", false, Auto, NULL);
	ModelChanger->AddStaticItem("Baller", false, Baller, NULL);
	ModelChanger->AddStaticItem("Bartender", false, Bartender, NULL);
	ModelChanger->AddStaticItem("Beach Babe", false, babe, NULL);
	ModelChanger->AddStaticItem("Beach Babe 2", false, babe2, NULL);
	ModelChanger->AddSubMenu("Page 2", ModelChanger1);


	//Accesories
	PropCustom0->SetMenuTitle("Accesories");
	PropCustom0->AddStaticItem("Hats", true, propp0, NULL);
	PropCustom0->AddStaticItem("Masks", true, propp1, NULL);
	PropCustom0->AddStaticItem("Pants", true, propp2, NULL);
	PropCustom0->AddStaticItem("Shirt", true, propp3, NULL);
	PropCustom0->AddStaticItem("Shoes", true, propp4, NULL);
	PropCustom0->AddStaticItem("Shirt 2", true, propp5, NULL);

	// Models 2
	ModelChanger1->SetMenuTitle("Model Changer (Page 2)");
	ModelChanger1->AddStaticItem("Bigfoot/Yeti", false, FootModel, NULL);
	ModelChanger1->AddStaticItem("Black Dreads", false, BlackDreads, NULL);
	ModelChanger1->AddStaticItem("Bodybuilder", false, BuffDude, NULL);
	ModelChanger1->AddStaticItem("Bodybuilder 2", false, BuffDude2, NULL);
	ModelChanger1->AddStaticItem("Break Dancer", false, BreakDance, NULL);
	ModelChanger1->AddStaticItem("Bride", false, Bride, NULL);
	ModelChanger1->AddStaticItem("Bugstars", false, Bugstars, NULL);
	ModelChanger1->AddStaticItem("Burger Guy", false, Burger, NULL);
	ModelChanger1->AddStaticItem("Busker", false, Busk, NULL);
	ModelChanger1->AddStaticItem("Chef", false, Chef, NULL);
	ModelChanger1->AddStaticItem("Chin Goon", false, Goon, NULL);
	ModelChanger1->AddStaticItem("Classy Hoe", false, Hippy, NULL);
	ModelChanger1->AddStaticItem("Cletus", false, Cletus, NULL);
	ModelChanger1->AddStaticItem("Clown", false, ClownModel, NULL);
	ModelChanger1->AddStaticItem("Comjane", false, Com, NULL);
	ModelChanger1->AddSubMenu("Page 3", ModelChanger6);

	// Model Changer6
	ModelChanger6->SetMenuTitle("Model Changer (Page 3)");
	ModelChanger6->AddStaticItem("Dead Hoe", false, DeadHoe, NULL);
	ModelChanger6->AddStaticItem("Dead Hooker", false, DeadHoe2, NULL);
	ModelChanger6->AddStaticItem("Diaper Strapon Guy", false, Diper, NULL);
	ModelChanger6->AddStaticItem("DJ", false, DJ, NULL);
	ModelChanger6->AddStaticItem("Drunk Beaner", false, MexicanModel, NULL);
	ModelChanger6->AddStaticItem("Dude With No Dick", false, MalePants, NULL);
	ModelChanger6->AddStaticItem("Fatass Lady", false, Fatso, NULL);
	ModelChanger6->AddStaticItem("Fat Boy", false, FatBoy, NULL);
	ModelChanger6->AddStaticItem("FBI Suit", false, FBI, NULL);
	ModelChanger6->AddStaticItem("Femalebuilder", false, BuffGirl, NULL);
	ModelChanger6->AddStaticItem("Franklin", false, Franklin, NULL);
	ModelChanger6->AddStaticItem("Firefighter", false, FireModel, NULL);
	ModelChanger6->AddStaticItem("Gang Member", false, Gangster, NULL);
	ModelChanger6->AddStaticItem("Girl Juggalo", false, Girl2, NULL);
	ModelChanger6->AddStaticItem("Girl Skater", false, Girl1, NULL);
	ModelChanger6->AddSubMenu("Page 4", ModelChanger7);

	// Model Changer7
	ModelChanger7->SetMenuTitle("Model Changer (Page 4)");
	ModelChanger7->AddStaticItem("Gay Man", false, Gay, NULL);
	ModelChanger7->AddStaticItem("Gunman", false, GunmanModel, NULL);
	ModelChanger7->AddStaticItem("Hao", false, Hao, NULL);
	ModelChanger7->AddStaticItem("HillBilly", false, HillBilly, NULL);
	ModelChanger7->AddStaticItem("Hippie", false, Hippie, NULL);
	ModelChanger7->AddStaticItem("Hoe With Skirt Up", false, FemalePants, NULL);
	ModelChanger7->AddStaticItem("Hugh", false, Hugh, NULL);
	ModelChanger7->AddStaticItem("Impotenet Rage", false, RageModel, NULL);
	ModelChanger7->AddStaticItem("Indian Women", false, indianf, NULL);
	ModelChanger7->AddStaticItem("Jimmy", false, Jimmy, NULL);
	ModelChanger7->AddStaticItem("Jesus", false, JesusModel, NULL);
	ModelChanger7->AddStaticItem("Jetskier", false, Jetskier, NULL);
	ModelChanger7->AddStaticItem("Johhny", false, Johhny, NULL);
	ModelChanger7->AddStaticItem("Korean", false, Korean, NULL);
	ModelChanger7->AddStaticItem("Ktown", false, Ktown, NULL);
	ModelChanger7->AddSubMenu("Page 5", ModelChanger8);

	// Model Changer8
	ModelChanger8->SetMenuTitle("Model Changer (Page 5)");
	ModelChanger8->AddStaticItem("Lamar", false, Lamar, NULL);
	ModelChanger8->AddStaticItem("Lester", false, Lester, NULL);
	ModelChanger8->AddStaticItem("LifeGuard", false, Ltown, NULL);
	ModelChanger8->AddStaticItem("Maid", false, maid, NULL);
	ModelChanger8->AddStaticItem("Maude", false, maude, NULL);
	ModelChanger8->AddStaticItem("Micheal", false, Micheal, NULL);
	ModelChanger8->AddStaticItem("Mime", false, Mime, NULL);
	ModelChanger8->AddStaticItem("Motox", false, Motox, NULL);
	ModelChanger8->AddStaticItem("Naked Old Man", false, NakedMan, NULL);
	ModelChanger8->AddStaticItem("Ortega", false, Ortega, NULL);
	ModelChanger8->AddStaticItem("Oscar", false, Oscar, NULL);
	ModelChanger8->AddStaticItem("Paparazzi", false, Paparazzi, NULL);
	ModelChanger8->AddStaticItem("Priest", false, Priest, NULL);
	ModelChanger8->AddStaticItem("Porn Dude", false, Porn, NULL);
	ModelChanger8->AddStaticItem("Reporter", false, Port, NULL);
	ModelChanger8->AddSubMenu("Page 6", ModelChanger9);

	// Model Changer8
	ModelChanger9->SetMenuTitle("Model Changer (Page 6)");
	ModelChanger9->AddStaticItem("Russian", false, Rush, NULL);
	ModelChanger9->AddStaticItem("Scientist", false, Scientist, NULL);
	ModelChanger9->AddStaticItem("Scum Hoe", false, Hoee, NULL);
	ModelChanger9->AddStaticItem("Sexy Hoe", false, Hoe, NULL);
	ModelChanger9->AddStaticItem("Sexy Hoe 2", false, Hoe5, NULL);
	ModelChanger9->AddStaticItem("Sexy Hoe 3", false, Hoe2, NULL);
	ModelChanger9->AddStaticItem("Silver Man", false, Hoe3, NULL);
	ModelChanger9->AddStaticItem("Scarlet Nigguh", false, Hoe4, NULL);
	ModelChanger9->AddStaticItem("Skinny Man", false, Skinny, NULL);
	ModelChanger9->AddStaticItem("Slenderman", false, Slendy, NULL);
	ModelChanger9->AddStaticItem("Space Monkey", false, MonkeySpaceModel, NULL);
	ModelChanger9->AddStaticItem("Space Ranger", false, RangerModel, NULL);
	ModelChanger9->AddStaticItem("Stripper", false, OnlineStripper, NULL);
	ModelChanger9->AddStaticItem("Surfer", false, Surfer2, NULL);
	ModelChanger9->AddStaticItem("Tennis Hoe", false, Tennos, NULL);
	ModelChanger9->AddSubMenu("Page 7", ModelChanger10);

	// Model Changer8
	ModelChanger10->SetMenuTitle("Model Changer (Page 7)");
	ModelChanger10->AddStaticItem("Tomepsilon", false, Tome, NULL);
	ModelChanger10->AddStaticItem("Topless Stripper", false, StripperModel, NULL);
	ModelChanger10->AddStaticItem("Tracy", false, Tracy, NULL);
	ModelChanger10->AddStaticItem("Transvest", false, Tranny, NULL);
	ModelChanger10->AddStaticItem("Trevor", false, Trevor, NULL);
	ModelChanger10->AddStaticItem("Waiter", false, Waiter, NULL);
	ModelChanger10->AddStaticItem("Willy", false, Willy, NULL);
	ModelChanger10->AddStaticItem("Zombie", false, Zombie, NULL);
	ModelChanger10->AddStaticItem("Enter Custom Model", false, CustomModel, NULL);


	// Online Players Vehicle Options
	OnlinePlayerVehicleOptions->SetMenuTitle("Vehicle Options");
	OnlinePlayerVehicleOptions2->AddStaticItem("Give God Mode", false, givegmode, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Launch Up", false, SendPlayersCarToSpace, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Launch Forward", false, SendPlayersCarForward, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Launch Backwards", false, SendPlayersCarBackwards, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Oblivion Mod", false, oblivionmod23, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Space Mod", false, oblivionmod24, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Kick From Vehicle", false, KickFromVeh, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Flip 180", false, flipCar180Now, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Flip Upright", false, FlipOnlineVehicle, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Kick Player Out Of Personal", false, LMAO, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Lock Player Doors", false, LockPlayersDoors, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Unlock Player Doors", false, UnlockPlayersDoors, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Shut Down Car", false, StallVictomsCar, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Delete Vehicle", false, DeleteVehicle, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Pop Their Tyres", false, PopTheirTyres, NULL);
	OnlinePlayerVehicleOptions->AddSubMenu("Page 2", OnlinePlayerVehicleOptions2);

	OnlinePlayerVehicleOptions2->SetMenuTitle("Page 2");
	OnlinePlayerVehicleOptions2->AddStaticItem("Paint Blue Angels", false, PaintOnlinePlayersCarAngels, NULL);
	OnlinePlayerVehicleOptions2->AddStaticItem("Paint Chrome", false, PaintOnlinePlayersCarChrome, NULL);
	OnlinePlayerVehicleOptions2->AddStaticItem("Paint Pink", false, PaintOnlinePlayersCarPink, NULL);
	OnlinePlayerVehicleOptions2->AddStaticItem("Strip Car", false, Remove1Now, NULL);
	OnlinePlayerVehicleOptions2->AddStaticItem("Smash Windows", false, SmasCar1Now, NULL);
	OnlinePlayerVehicleOptions2->AddStaticItem("Smash Windows and Strip", false, SmasCar2Now, NULL);
	OnlinePlayerVehicleOptions2->AddStaticItem("Fuck Up Car ", false, SmasCar5Now, NULL);
	OnlinePlayerVehicleOptions2->AddStaticItem("No Gravity", false, playergravity, NULL);
	OnlinePlayerVehicleOptions2->AddStaticItem("Crush", false, oblivionmod25, NULL);
	OnlinePlayerVehicleOptions2->AddSubMenu("Tow Menu", towplayer);

	towplayer->SetMenuTitle("Tow My Car");
	towplayer->AddStaticItem("My Car Back", true, TowMyCar, NULL);
	towplayer->AddStaticItem("My Car Front", true, TowMyCar1, NULL);
	towplayer->AddStaticItem("My Car Right", true, TowMyCar2, NULL);
	towplayer->AddStaticItem("My Car Left", true, TowMyCar3, NULL);
	towplayer->AddStaticItem("Tow Player Back", true, TowTruck7, NULL);
	towplayer->AddStaticItem("Tow Player Front", true, TowMyCar4, NULL);
	towplayer->AddStaticItem("Tow Player Right", true, TowMyCar5, NULL);
	towplayer->AddStaticItem("Tow Player Left", true, TowMyCar6, NULL);
	towplayer->AddStaticItem("RC Car", true, TowTruck2, NULL);



	//Online Players Teleport Options
	OnlinePlayerTeleport->SetMenuTitle("Teleport Options");
	OnlinePlayerTeleport->AddStaticItem("Teleport To Player", false, TeleportToOnlinePlayer, NULL);
	OnlinePlayerTeleport->AddStaticItem("Teleport To Player (No FX)", false, TeleportToOnlinePlayer1, NULL);
	OnlinePlayerTeleport->AddStaticItem("Teleport Into Vehicle", false, TeleportInToCar, NULL);
	OnlinePlayerTeleport->AddStaticItem("Teleport Players Car To You", false, TeleportPlayerToMe, NULL);

	// Explosions
	NaughtyStuff->SetMenuTitle("Bad Stuff");
	NaughtyStuff->AddSubMenu("Explosion List", ExplosionSet);
	NaughtyStuff->AddSubMenu("FireWork Menu", FireWorkMenu);
	NaughtyStuff->AddSubMenu("Particle FX", particlemenu);
	NaughtyStuff->AddStaticItem("Remove All Weapons", false, TakeOnlineWeapons, NULL);
	NaughtyStuff->AddStaticItem("Remove All Melee", false, NoWeps, NULL);
	NaughtyStuff->AddStaticItem("Remove All Ars", false, NoWeps2, NULL);
	NaughtyStuff->AddStaticItem("Remove Heavy Weapons", false, NoWeps3, NULL);
	NaughtyStuff->AddStaticItem("Massive Bounty", false, Mass, NULL);
	NaughtyStuff->AddStaticItem("Kill The Jew", false, AttachCreator2, NULL);
	NaughtyStuff->AddStaticItem("Cage Player", false, AttachCreator5, NULL);
	NaughtyStuff->AddStaticItem("Prison Player", false, AttachCreator6, NULL);
	NaughtyStuff->AddStaticItem("Tank Attack", false, tankgaurds1, NULL);
	NaughtyStuff->AddStaticItem("Aimed Guard Attack", false, GuardAttack, NULL);
	NaughtyStuff->AddStaticItem("Spawn Guard On Player(Attack)", false, CIASpawn0, NULL);
	NaughtyStuff->AddStaticItem("Kick Online Player", false, KickOnlinePlayer, NULL);
	NaughtyStuff->AddStaticItem("Lag Online Player", true, FreezeOnlinePlayer, NULL);
	NaughtyStuff->AddStaticItem("Cam Shake", true, camshakeplayer, NULL);
	NaughtyStuff->AddStaticItem("Mercenaries Attack", false, tankgaurds2, NULL);

	//Explosion Menu
	ExplosionSet->AddStaticItem("Nuke", true, BlowUpOnlinePlayer, NULL);
	ExplosionSet->AddStaticItem("Alien Bomb", true, BlowUpOnlinePlayer1, NULL);
	ExplosionSet->AddStaticItem("Burn In Hell", true, BlowUpOnlinePlayer2, NULL);
	ExplosionSet->AddStaticItem("Gas Can", true, BlowUpOnlinePlayer3, NULL);
	ExplosionSet->AddStaticItem("Extinguish", true, BlowUpOnlinePlayer4, NULL);
	ExplosionSet->AddStaticItem("Molotov", true, Togglemolotov, NULL);
	ExplosionSet->AddStaticItem("Smoke", true, BlowUpOnlinePlayer5, NULL);
	ExplosionSet->AddStaticItem("Firework", true, BlowUpOnlinePlayer6, NULL);
	ExplosionSet->AddStaticItem("Grenades", true, BlowUpOnlinePlayer7, NULL);
	ExplosionSet->AddStaticItem("Water Hydrant", true, BlowUpOnlinePlayer8, NULL);
	ExplosionSet->AddStaticItem("AirStrike", false, Airstrikepl, NULL);
	ExplosionSet->AddStaticItem("Lazer", false, PortableLazer, NULL);
	ExplosionSet->AddStaticItem("Tank", false, PortableTank, NULL);
	ExplosionSet->AddStaticItem("Invisble Nuke", false, BlowUpOnlinePlayerInvisible, NULL);
	ExplosionSet->AddStaticItem("Kill Passive Instant", false, TogKiller, NULL);
	ExplosionSet->AddStaticItem("Cargo Spawn", false, tankgaurds4, NULL);
	ExplosionSet->AddStaticItem("Crash Spawn 2", false, crashtester, NULL);

	//FireWork Menu
	FireWorkMenu->SetMenuTitle("FireWork Menu");
	FireWorkMenu->AddStaticItem("Fountain Firework", false, FireWorkExp, NULL);
	FireWorkMenu->AddStaticItem("Shortburst Firework", false, FireWorkExp1, NULL);
	FireWorkMenu->AddStaticItem("Starburst Firework", false, FireWorkExp2, NULL);
	FireWorkMenu->AddStaticItem("Trailburst Firework", false, FireWorkExp3, NULL);

	// Teleport Menu Page 1
	TeleMenu->SetMenuTitle("Teleport Menu");
	TeleMenu->AddStaticItem("Waypoint", false, TeleWay, NULL);
	TeleMenu->AddSubMenu("Misc Cash Options", MoneyOptions);
	TeleMenu->AddStaticItem("10 In Front", false, TeleportInFront, NULL);
	TeleMenu->AddStaticItem("Airfield", false, TeleTrevorField, NULL);
	TeleMenu->AddStaticItem("Airport ", false, TeleAirport, NULL);
	TeleMenu->AddStaticItem("Airport Glitch", false, DatGlitch, NULL);
	TeleMenu->AddStaticItem("Airport Office", false, TeleAirOffice, NULL);
	TeleMenu->AddStaticItem("Maze Tower (Helipad)", false, TeleMazeTower, NULL);
	TeleMenu->AddStaticItem("Ammunation ", false, TeleImpoundLot, NULL);
	TeleMenu->AddStaticItem("Bank Vault", false, TeleBankVault, NULL);
	TeleMenu->AddStaticItem("Bridge Top", false, TeleBridge, NULL);
	TeleMenu->AddStaticItem("Chill Lake", false, ChillLakeTele, NULL);
	TeleMenu->AddStaticItem("Chill Place", false, DatChill, NULL);
	TeleMenu->AddStaticItem("Chill Place 2", false, DatChill2, NULL);
	TeleMenu->AddStaticItem("Chumash Plaza", false, DatPlaza, NULL);
	TeleMenu->AddStaticItem("Clock Tower", false, TeleClock, NULL);
	TeleMenu->AddSubMenu("Page 2", TeleMenu2);

	// Teleport Menu Page 2
	TeleMenu2->SetMenuTitle("Teleport Menu (Page 2)");
	TeleMenu2->AddStaticItem("Construction Tower", false, TeleConstructionTower, NULL);
	TeleMenu2->AddStaticItem("Dat Cave", false, DatCave, NULL);
	TeleMenu2->AddStaticItem("Desert Night Club", false, TeleDesertClub, NULL);
	TeleMenu2->AddStaticItem("Eclipse Tower Apartment", false, TeleEclipse, NULL);
	TeleMenu2->AddStaticItem("FIB Building", false, TeleFIB, NULL);
	TeleMenu2->AddStaticItem("Fleeca Bank", false, DatFleek, NULL);
	TeleMenu2->AddStaticItem("Franklins Crib", false, TeleFranklinsCrib, NULL);
	TeleMenu2->AddStaticItem("Hippie Camp", false, HippieCamp, NULL);
	TeleMenu2->AddStaticItem("Humane Lab", false, TeleLabUpper, NULL);
	TeleMenu2->AddStaticItem("Humane Lab", false, TeleLabLower, NULL);
	TeleMenu2->AddStaticItem("IAA Building", false, TeleIAA, NULL);
	TeleMenu2->AddStaticItem("Lester's House", false, TeleLesterx, NULL);
	TeleMenu2->AddStaticItem("Light House", false, LightHouseTele, NULL);
	TeleMenu2->AddStaticItem("LS Customs", false, TeleLsCustoms, NULL);
	TeleMenu2->AddStaticItem("LSPD Station", false, TelePolice, NULL);
	TeleMenu2->AddStaticItem("Get Coords", false, TeleCoords, NULL);
	TeleMenu2->AddSubMenu("Page 3", TeleMenu3);

	// Teleport Menu Page 3
	TeleMenu3->SetMenuTitle("Teleport Menu (Page 3)");
	TeleMenu3->AddStaticItem("Mask Shop", false, TeleMask, NULL);
	TeleMenu3->AddStaticItem("Maze Tower", false, TeleMazeTower, NULL);
	TeleMenu3->AddStaticItem("Mercenary Glitch", false, DatMerc, NULL);
	TeleMenu3->AddStaticItem("Merryweather", false, TeleMerry, NULL);
	TeleMenu3->AddStaticItem("Micheals Crib", false, TeleMicsCrib, NULL);
	TeleMenu3->AddStaticItem("Military Base", false, TeleJetSpawn1, NULL);
	TeleMenu3->AddStaticItem("Mount Chilliad", false, TeleMountChill, NULL);
	TeleMenu3->AddStaticItem("Mountain Grave Site", false, TeleMntGraveSite, NULL);
	TeleMenu3->AddStaticItem("Paleto Bank", false, TelePaletoBank, NULL);
	TeleMenu3->AddStaticItem("Paleto Barn", false, DatPb1, NULL);
	TeleMenu3->AddStaticItem("Paleto Factory", false, DatPb, NULL);
	TeleMenu3->AddStaticItem("Phat Mansion", false, DatPhat, NULL);
	TeleMenu3->AddStaticItem("Pier", false, PierSpawn, NULL);
	TeleMenu3->AddStaticItem("PillBox Tower", false, PillBoxSpawn, NULL);
	TeleMenu3->AddStaticItem("Ponsonbys", false, TelePonsonbys, NULL);
	TeleMenu3->AddSubMenu("Page 4", TeleMenu4);

	// Teleport Menu Page 4
	TeleMenu4->SetMenuTitle("Teleport Menu (Page 4)");
	TeleMenu4->AddStaticItem("Train Cave", false, DatTop2, NULL);
	TeleMenu4->AddStaticItem("Random Island", false, DatPb2, NULL);
	TeleMenu4->AddStaticItem("Secret Army Tower", false, TeleArmyTower, NULL);
	TeleMenu4->AddStaticItem("Secret Island", false, TeleSecretIsland, NULL);
	TeleMenu4->AddStaticItem("Sniper Tower", false, TeleSniper, NULL);
	TeleMenu4->AddStaticItem("Strip Club", false, StripClub, NULL);
	TeleMenu4->AddStaticItem("Sub Spawn", false, TeleSubSpawn, NULL);
	TeleMenu4->AddStaticItem("Tinsel Tower Apartment", false, TeleTinsel, NULL);
	TeleMenu4->AddStaticItem("Top Of Eclipse Tower", false, DatTop, NULL);
	TeleMenu4->AddStaticItem("Trevor's Torture Room", false, TeleTorture, NULL);
	TeleMenu4->AddStaticItem("Trevor's Trailer", false, TeleTrailer, NULL);
	TeleMenu4->AddStaticItem("Union Depository", false, TeleUnionDepository, NULL);
	TeleMenu4->AddStaticItem("Vagina Cave", false, TeleVaginaCove, NULL);
	TeleMenu4->AddStaticItem("VineWood Sign", false, VineWoodSpawn, NULL);
	TeleMenu4->AddStaticItem("Weasel Tower Garage", false, TeleWeaselTower, NULL);
	TeleMenu4->AddSubMenu("Page 5", TeleMenu5);


	// Teleport Menu Page 5
	TeleMenu5->SetMenuTitle("Teleport Menu (Page 5)");
	TeleMenu5->AddSubMenu("Load", LoadLocationMenu);
	TeleMenu5->AddSubMenu("Save", SaveLocationMenu);

	SaveLocationMenu->SetMenuTitle("Save Locations");
	SaveLocationMenu->AddStaticItem("Save Location 1", false, SaveTeleLocation, NULL);
	SaveLocationMenu->AddStaticItem("Save Location 2", false, SaveTeleLocation2, NULL);
	SaveLocationMenu->AddStaticItem("Save Location 3", false, SaveTeleLocation3, NULL);
	SaveLocationMenu->AddStaticItem("Save Location 4", false, SaveTeleLocation4, NULL);
	SaveLocationMenu->AddStaticItem("Save Location 5", false, SaveTeleLocation5, NULL);
	SaveLocationMenu->AddStaticItem("Save Location 6", false, SaveTeleLocation6, NULL);
	SaveLocationMenu->AddStaticItem("Save Location 7", false, SaveTeleLocation7, NULL);
	SaveLocationMenu->AddStaticItem("Save Location 8", false, SaveTeleLocation8, NULL);
	SaveLocationMenu->AddStaticItem("Save Location 9", false, SaveTeleLocation9, NULL);
	SaveLocationMenu->AddStaticItem("Save Location 10", false, SaveTeleLocation10, NULL);

	LoadLocationMenu->SetMenuTitle("Load Locations");
	LoadLocationMenu->AddStaticItem("Load Location 1", false, TeleToSave, NULL);
	LoadLocationMenu->AddStaticItem("Load Location 2", false, TeleToSave2, NULL);
	LoadLocationMenu->AddStaticItem("Load Location 3", false, TeleToSave3, NULL);
	LoadLocationMenu->AddStaticItem("Load Location 4", false, TeleToSave4, NULL);
	LoadLocationMenu->AddStaticItem("Load Location 5", false, TeleToSave5, NULL);
	LoadLocationMenu->AddStaticItem("Load Location 6", false, TeleToSave6, NULL);
	LoadLocationMenu->AddStaticItem("Load Location 7", false, TeleToSave7, NULL);
	LoadLocationMenu->AddStaticItem("Load Location 8", false, TeleToSave8, NULL);
	LoadLocationMenu->AddStaticItem("Load Location 9", false, TeleToSave9, NULL);
	LoadLocationMenu->AddStaticItem("Load Location 10", false, TeleToSav10, NULL);

	// All Online Players
	AllOnlinePlayers->SetMenuTitle("All These Hoes");
	AllOnlinePlayers->AddSubMenu("Total Players", onlinePlayersList);
	AllOnlinePlayers->AddStaticItem("Take Dem Weapons", false, TakeOnlineAllWeapons, NULL);
	AllOnlinePlayers->AddStaticItem("Give Weapons", false, GiveOnlineAllWeapons, NULL);
	AllOnlinePlayers->AddStaticItem("Give Parachute", false, GiveOnlineAllchute, NULL);
	AllOnlinePlayers->AddStaticItem("Take Away ARs and Heavy", false, GiveOnlineAllWeapons4, NULL);
	AllOnlinePlayers->AddStaticItem("Kick All Hoes From Vehicles", false, AllKickedFromVeh, NULL);
	AllOnlinePlayers->AddStaticItem("Cash Drop", true, AllCashDrop, NULL);
	AllOnlinePlayers->AddStaticItem("Freeze All Players", true, FreezeAllMessage, NULL);
	AllOnlinePlayers->AddStaticItem("Cage All Players", false, Allcage, NULL);
	AllOnlinePlayers->AddStaticItem("Kill The Jews", false, Allcage1, NULL);
	AllOnlinePlayers->AddSubMenu("Blame Player List", blamePlayers);//who you want to choose
	AllOnlinePlayers->AddSubMenu("Blame Single Player", blamePlayers2);//just one
	AllOnlinePlayers->AddStaticItem("Blame Dat Hoe", true, blameExplosion, NULL);//all players
	AllOnlinePlayers->AddStaticItem("Invisible Nuke Loop", true, StealthSwag, NULL);
	AllOnlinePlayers->AddStaticItem("Nuke Loop", true, NotStealthSwag, NULL);
	AllOnlinePlayers->AddStaticItem("Fire Explode Loop", true, PassiveKiller, NULL);
	AllOnlinePlayers->AddStaticItem("Water Explode Loop", true, WaterSwagMessage, NULL);
	AllOnlinePlayers->AddStaticItem("Mass Suicide Loop", true, blameExplosion420, NULL);
	AllOnlinePlayers->AddSubMenu("All Attach Objects", AllAttach);

	//Attachments All Players
	AllAttach->AddStaticItem("Attach Bball To Everyone", false, GiveBballGame, NULL);
	AllAttach->AddStaticItem("Attach BigFoot To Everyone", false, BigFootAll, NULL);
	AllAttach->AddStaticItem("All Players Cola Float", false, AllWaterShit2, NULL);
	AllAttach->AddStaticItem("All Players Chandelier", false, AllWaterShit3, NULL);
	AllAttach->AddStaticItem("All Sword Head", false, DickToAll, NULL);
	AllAttach->AddStaticItem("Attach Fishing Poles", false, GiveFishingPoles, NULL);
	AllAttach->AddStaticItem("Attach Fire To Everyone", false, GiveCampFire, NULL);
	AllAttach->AddStaticItem("Attach Ferris Wheel To Everyone", false, GiveFerrisWheel, NULL);
	AllAttach->AddStaticItem("Attach Food Van To Everyone", false, GiveFoodVan, NULL);
	AllAttach->AddStaticItem("Attach Hard Hat To Everyone", false, HardHatAll, NULL);
	AllAttach->AddStaticItem("All Innertube to Players", false, Innertube, NULL);
	AllAttach->AddStaticItem("Attach Orange to Everyone", false, GiveOrangeShit, NULL);
	AllAttach->AddStaticItem("Attach Straw Hat To Everyone", false, HatAll, NULL);
	AllAttach->AddStaticItem("All Players Hotdog", false, AttachDickToAll25, NULL);
	AllAttach->AddStaticItem("All Players MiniGuns", false, Allguns, NULL);
	AllAttach->AddStaticItem("All Players UFO Head", false, Allufohead, NULL);
	AllAttach->AddStaticItem("All Players Water Cone", false, AllWaterShit, NULL);


	blamePlayers2->AddStaticItem("Blame Explode", false, blame1, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame2, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame3, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame4, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame5, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame6, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame7, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame8, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame9, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame10, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame11, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame12, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame13, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame14, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame15, NULL);
	blamePlayers2->AddStaticItem("Player", false, blame16, NULL);
	blamePlayers2->AddStaticItem("CCTV", false, blame17, NULL);
	blamePlayers2->AddStaticItem("CCTV", false, blame18, NULL);

	blamePlayers->SetMenuTitle("Player To Blame");
	blamePlayers->AddStaticItem("Player", false, blameExplosion1, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion2, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion3, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion4, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion5, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion6, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion7, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion8, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion9, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion10, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion11, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion12, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion13, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion14, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion15, NULL);
	blamePlayers->AddStaticItem("Player", false, blameExplosion16, NULL);
	blamePlayers->AddStaticItem("CCTV", false, blameExplosion17, NULL);
	blamePlayers->AddStaticItem("CCTV", false, blameExplosion18, NULL);


	// Vehicle Spawner Menu
	CarSpawner->SetMenuTitle("Vehicle Spawner");
	CarSpawner->AddSubMenu("Heist Vehicles", CarSpawnerMenu23);
	CarSpawner->AddSubMenu("Ill Gotten Gains Vehicles", CarSpawnerMenu24);
	CarSpawner->AddSubMenu("Bicycles", CarSpawnerMenu21);
	CarSpawner->AddSubMenu("Boats", CarSpawnerMenu22);
	CarSpawner->AddSubMenu("Commercial", CarSpawnerMenu12);
	CarSpawner->AddSubMenu("Compacts", CarSpawnerMenu16);
	CarSpawner->AddSubMenu("Coupes", CarSpawnerMenu3);
	CarSpawner->AddSubMenu("Emergency", CarSpawnerMenu5);
	CarSpawner->AddSubMenu("Helicopters", CarSpawnerMenu10);
	CarSpawner->AddSubMenu("Industrial", CarSpawnerMenu13);
	CarSpawner->AddSubMenu("Military", CarSpawnerMenu17);
	CarSpawner->AddSubMenu("Motorcycles", CarSpawnerMenu9);
	CarSpawner->AddSubMenu("Muscle", CarSpawnerMenu7);
	CarSpawner->AddSubMenu("Off Road", CarSpawnerMenu6);
	CarSpawner->AddSubMenu("Planes", CarSpawnerMenu11);
	CarSpawner->AddSubMenu("Page 2", CarSpawner2);

	// Vehicle Spawner Menu Page 2
	CarSpawner2->SetMenuTitle("Vehicle Spawner (Page 2)");
	CarSpawner2->AddSubMenu("Sedans", CarSpawnerMenu4);
	CarSpawner2->AddSubMenu("Service", CarSpawnerMenu18);
	CarSpawner2->AddSubMenu("Sports", CarSpawnerMenu2P2);
	CarSpawner2->AddSubMenu("Sports Classics", CarSpawnerMenu19);
	CarSpawner2->AddSubMenu("Super", CarSpawnerMenu1);
	CarSpawner2->AddSubMenu("SUVs", CarSpawnerMenu8);
	CarSpawner2->AddSubMenu("Trailers", CarSpawnerMenu15);
	CarSpawner2->AddSubMenu("Utility", CarSpawnerMenu14);
	CarSpawner2->AddSubMenu("Vans", CarSpawnerMenu20);

	//Ill Gotten Gains Vehicles
	CarSpawnerMenu24->SetMenuTitle("Ill Gotten Gains");
	CarSpawnerMenu24->AddStaticItem("Osiris", false, GainsOsiris, NULL);
	CarSpawnerMenu24->AddStaticItem("T20", false, GainsT20, NULL);
	CarSpawnerMenu24->AddStaticItem("Stirling GT", false, GainsStirling, NULL);
	CarSpawnerMenu24->AddStaticItem("Virgo", false, GainsVirgo, NULL);
	CarSpawnerMenu24->AddStaticItem("Windsor", false, GainsWindsor, NULL);
	CarSpawnerMenu24->AddStaticItem("Coil Brawler", false, GainsCoil, NULL);
	CarSpawnerMenu24->AddStaticItem("Toro Boat", false, GainsToro, NULL);
	CarSpawnerMenu24->AddStaticItem("Vapid Chino", false, GainsChino, NULL);
	CarSpawnerMenu24->AddStaticItem("Invetero Coquette", false, GainsCoq, NULL);
	CarSpawnerMenu24->AddStaticItem("Vindicator", false, GainsVin, NULL);
	CarSpawnerMenu24->AddStaticItem("Gold Luxor", false, GainsLuxor, NULL);
	CarSpawnerMenu24->AddStaticItem("Gold Swift", false, GainsSwift, NULL);

	// Favorites
	CarSpawnerMenu0->SetMenuTitle("Favorites");
	CarSpawnerMenu0->AddStaticItem("Lazer", false, SpawnLazer, NULL);
	CarSpawnerMenu0->AddStaticItem("Hakuchou", false, SpawnHakuchou, NULL);
	CarSpawnerMenu0->AddStaticItem("Buzzard", false, SpawnBuzzard, NULL);
	CarSpawnerMenu0->AddStaticItem("Tank", false, SpawnTank, NULL);
	CarSpawnerMenu0->AddStaticItem("FIB", false, SpawnFIB, NULL);
	CarSpawnerMenu0->AddStaticItem("FIB2", false, SpawnFIB2, NULL);
	CarSpawnerMenu0->AddStaticItem("Police", false, SpawnPolice, NULL);
	CarSpawnerMenu0->AddStaticItem("Police Buffalo", false, SpawnPolice3, NULL);
	CarSpawnerMenu0->AddStaticItem("Unmarked", false, SpawnUnmarked, NULL);
	CarSpawnerMenu0->AddStaticItem("Jester2", false, SpawnJester2, NULL);
	CarSpawnerMenu0->AddSubMenu("Page 2", CarSpawnerMenu0P2);

	// Favorites Page 2
	CarSpawnerMenu0P2->SetMenuTitle("Favorites (Page 2)");
	CarSpawnerMenu0P2->AddStaticItem("Dubsta 6x6", false, Spawn6x6, NULL);
	CarSpawnerMenu0P2->AddStaticItem("Monster", false, SpawnMonster, NULL);
	CarSpawnerMenu0P2->AddStaticItem("Mesa(Mercs)", false, SpawnMesa3, NULL);
	CarSpawnerMenu0P2->AddStaticItem("Phantom", false, SpawnPhantom, NULL);
	CarSpawnerMenu0P2->AddStaticItem("Bus", false, SpawnBus, NULL);
	CarSpawnerMenu0P2->AddStaticItem("Speeder", false, SpawnSpeeder, NULL);
	CarSpawnerMenu0P2->AddStaticItem("Blimp", false, SpawnBlimp, NULL);
	CarSpawnerMenu0P2->AddStaticItem("Jumbo Jet", false, SpawnJumbo, NULL);
	CarSpawnerMenu0P2->AddStaticItem("Cargo Plane", false, SpawnCargo, NULL);
	CarSpawnerMenu0P2->AddStaticItem("Dozer", false, SpawnDozer, NULL);

	// Heist Vehicles
	CarSpawnerMenu23->SetMenuTitle("Heist Vehicles");
	CarSpawnerMenu23->AddStaticItem("Hydra", false, SpawnHydra, NULL);
	CarSpawnerMenu23->AddStaticItem("Mule", false, SpawnMule3, NULL);
	CarSpawnerMenu23->AddStaticItem("Tanker", false, SpawnTanker2, NULL);
	CarSpawnerMenu23->AddStaticItem("Casco", false, SpawnCasco, NULL);
	CarSpawnerMenu23->AddStaticItem("Boxville", false, SpawnBoxville4, NULL);
	CarSpawnerMenu23->AddStaticItem("Insurgent", false, SpawnInsurgent, NULL);
	CarSpawnerMenu23->AddStaticItem("Insurgent 2", false, SpawnInsurgent2, NULL);
	CarSpawnerMenu23->AddStaticItem("Gang Burrito 2", false, SpawnGBurrito2, NULL);
	CarSpawnerMenu23->AddStaticItem("Technical", false, SpawnTechnical, NULL);
	CarSpawnerMenu23->AddStaticItem("Dinghy", false, SpawnDinghy3, NULL);
	CarSpawnerMenu23->AddStaticItem("Savage", false, SpawnSavage, NULL);
	CarSpawnerMenu23->AddStaticItem("Enduro", false, SpawnEnduro, NULL);
	CarSpawnerMenu23->AddStaticItem("Guardian", false, SpawnGuardian, NULL);
	CarSpawnerMenu23->AddStaticItem("Lectro", false, SpawnLectro, NULL);
	CarSpawnerMenu23->AddStaticItem("Karuma", false, SpawnKumura, NULL);
	CarSpawnerMenu23->AddSubMenu("Page 2", CarSpawnerMenu69);


	CarSpawnerMenu69->AddStaticItem("Karuma 2", false, SpawnKumura2, NULL);
	CarSpawnerMenu69->AddStaticItem("Trash2", false, SpawnTrash2, NULL);
	CarSpawnerMenu69->AddStaticItem("Barracks", false, SpawnBarracks3, NULL);
	CarSpawnerMenu69->AddStaticItem("Valkyrie", false, SpawnValkyrie, NULL);
	CarSpawnerMenu69->AddStaticItem("Velum", false, SpawnVelum2, NULL);
	CarSpawnerMenu69->AddStaticItem("Slamvan", false, SpawnSlamvan2, NULL);

	// Super
	CarSpawnerMenu1->SetMenuTitle("Super");
	CarSpawnerMenu1->AddStaticItem("Adder", false, SpawnAdder, NULL);
	CarSpawnerMenu1->AddStaticItem("Bullet", false, SpawnBullet, NULL);
	CarSpawnerMenu1->AddStaticItem("Cheetah", false, SpawnCheetah, NULL);
	CarSpawnerMenu1->AddStaticItem("EntityXF", false, SpawnEntityXF, NULL);
	CarSpawnerMenu1->AddStaticItem("Infernus", false, SpawnInfernus, NULL);
	CarSpawnerMenu1->AddStaticItem("TurismoR", false, SpawnTurismoR, NULL);
	CarSpawnerMenu1->AddStaticItem("Vacca", false, SpawnVacca, NULL);
	CarSpawnerMenu1->AddStaticItem("Voltic", false, SpawnVoltic, NULL);
	CarSpawnerMenu1->AddStaticItem("Zentorno", false, SpawnZentorno, NULL);

	// Sports
	CarSpawnerMenu2P2->SetMenuTitle("Sports");
	CarSpawnerMenu2P2->AddStaticItem("9F", false, Spawn9F, NULL);
	CarSpawnerMenu2P2->AddStaticItem("9F Convertible", false, Spawn9F2, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Alpha", false, SpawnAlpha, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Banshee", false, SpawnBanshee, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Buffalo", false, SpawnBuffalo, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Franklins Buffalo", false, SpawnBuffalo2, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Carbonizzare", false, SpawnCarbonizzare, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Comet", false, SpawnComet, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Coquette", false, SpawnCoquette, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Elegy", false, SpawnElegy, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Feltzer", false, SpawnFeltzer, NULL);
	CarSpawnerMenu2P2->AddStaticItem("FuroreGT", false, SpawnFuroreGT, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Fusilade", false, SpawnFusilade, NULL);
	CarSpawnerMenu2P2->AddSubMenu("Page 2", CarSpawnerMenu2P2);

	// Sports Page 2
	CarSpawnerMenu2P2->SetMenuTitle("Sports (Page 2)");
	CarSpawnerMenu2P2->AddStaticItem("Futo", false, SpawnFuto, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Jester", false, SpawnJester, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Jester2", false, SpawnJester2, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Khamelion", false, SpawnKhamelion, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Massacro", false, SpawnMassacro, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Massacro2", false, SpawnMassacro2, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Penumbra", false, SpawnPenumbra, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Rapid GT", false, SpawnRapidGT, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Rapid GT Convertible", false, SpawnRapidGT2, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Schwartzer", false, SpawnSchwartzer, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Sultan", false, SpawnSultan, NULL);
	CarSpawnerMenu2P2->AddStaticItem("Surano", false, SpawnSurano, NULL);

	// Coupes
	CarSpawnerMenu3->SetMenuTitle("Coupes");
	CarSpawnerMenu3->AddStaticItem("Cognoscenti", false, SpawnCognoscenti, NULL);
	CarSpawnerMenu3->AddStaticItem("Exemplar", false, SpawnExemplar, NULL);
	CarSpawnerMenu3->AddStaticItem("F620", false, SpawnF620, NULL);
	CarSpawnerMenu3->AddStaticItem("Felon", false, SpawnFelon, NULL);
	CarSpawnerMenu3->AddStaticItem("Felon2", false, SpawnFelon2, NULL);
	CarSpawnerMenu3->AddStaticItem("Jackal", false, SpawnJackal, NULL);
	CarSpawnerMenu3->AddStaticItem("Oracle", false, SpawnOracle, NULL);
	CarSpawnerMenu3->AddStaticItem("Oracle2", false, SpawnOracle2, NULL);
	CarSpawnerMenu3->AddStaticItem("Sentinel", false, SpawnSentinel, NULL);
	CarSpawnerMenu3->AddStaticItem("Sentinel2", false, SpawnSentinel2, NULL);
	CarSpawnerMenu3->AddStaticItem("Zion", false, SpawnZion, NULL);
	CarSpawnerMenu3->AddStaticItem("Zion2", false, SpawnZion2, NULL);

	// Sedans
	CarSpawnerMenu4->SetMenuTitle("Sedans");
	CarSpawnerMenu4->AddStaticItem("Asea", false, SpawnAsea, NULL);
	CarSpawnerMenu4->AddStaticItem("Snow Asea", false, SpawnAsea2, NULL);
	CarSpawnerMenu4->AddStaticItem("Asterope", false, SpawnAsterope, NULL);
	CarSpawnerMenu4->AddStaticItem("Emperor", false, SpawnEmperor, NULL);
	CarSpawnerMenu4->AddStaticItem("Rusty Emperor", false, SpawnEmperor2, NULL);
	CarSpawnerMenu4->AddStaticItem("Snow Emperor", false, SpawnEmperor3, NULL);
	CarSpawnerMenu4->AddStaticItem("Fugitive", false, SpawnFugitive, NULL);
	CarSpawnerMenu4->AddStaticItem("Glendale", false, SpawnGlendale, NULL);
	CarSpawnerMenu4->AddStaticItem("Ingot", false, SpawnIngot, NULL);
	CarSpawnerMenu4->AddStaticItem("Intruder", false, SpawnIntruder, NULL);
	CarSpawnerMenu4->AddStaticItem("Premier", false, SpawnPremier, NULL);
	CarSpawnerMenu4->AddSubMenu("Page 2", CarSpawnerMenu4P2);

	// Sedans Page 2
	CarSpawnerMenu4P2->SetMenuTitle("Sedans (Page 2)");
	CarSpawnerMenu4P2->AddStaticItem("Primo", false, SpawnPrimo, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Regina", false, SpawnRegina, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Romero Hearse", false, SpawnRomero, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Schafter", false, SpawnSchafter, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Stanier", false, SpawnStanier, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Stratum", false, SpawnStratum, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Stretch", false, SpawnStretch, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Super Diamond", false, SpawnSuperDiamond, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Surge", false, SpawnSurge, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Tailgater", false, SpawnTailgater, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Warrener", false, SpawnWarrener, NULL);
	CarSpawnerMenu4P2->AddStaticItem("Washington", false, SpawnWashington, NULL);

	// Emergency
	CarSpawnerMenu5->SetMenuTitle("Emergency");
	CarSpawnerMenu5->AddStaticItem("Ambulance", false, SpawnAmbulance, NULL);
	CarSpawnerMenu5->AddStaticItem("FIB", false, SpawnFIB, NULL);
	CarSpawnerMenu5->AddStaticItem("FIB2", false, SpawnFIB2, NULL);
	CarSpawnerMenu5->AddStaticItem("Fire Truck", false, SpawnFireTruck, NULL);
	CarSpawnerMenu5->AddStaticItem("Life Guard", false, SpawnLGuard, NULL);
	CarSpawnerMenu5->AddStaticItem("Park Ranger", false, SpawnPRanger, NULL);
	CarSpawnerMenu5->AddStaticItem("Police Bike", false, SpawnPBike, NULL);
	CarSpawnerMenu5->AddStaticItem("Police Cruiser", false, SpawnPolice2, NULL);
	CarSpawnerMenu5->AddStaticItem("Police", false, SpawnPolice, NULL);
	CarSpawnerMenu5->AddStaticItem("Police Buffalo", false, SpawnPolice3, NULL);
	CarSpawnerMenu5->AddStaticItem("Prison Bus", false, SpawnPBus, NULL);
	CarSpawnerMenu5->AddStaticItem("Riot", false, SpawnRiot, NULL);
	CarSpawnerMenu5->AddStaticItem("Police Van", false, SpawnPVan, NULL);
	CarSpawnerMenu5->AddStaticItem("Sheriff Cruiser", false, SpawnSheriff, NULL);
	CarSpawnerMenu5->AddStaticItem("Sheriff SUV", false, SpawnSheriff2, NULL);
	CarSpawnerMenu5->AddStaticItem("Snow Police Rancher", false, SpawnRancherSP, NULL);
	CarSpawnerMenu5->AddStaticItem("Snow Police Esperanto", false, SpawnEsperantoSP, NULL);
	CarSpawnerMenu5->AddStaticItem("Unmarked", false, SpawnUnmarked, NULL);

	// Off Road
	CarSpawnerMenu6->SetMenuTitle("Off Road");
	CarSpawnerMenu6->AddStaticItem("Bifta", false, SpawnBifta, NULL);
	CarSpawnerMenu6->AddStaticItem("Blazer", false, SpawnBlazer, NULL);
	CarSpawnerMenu6->AddStaticItem("Lifeguard Blazer", false, SpawnBlazer2, NULL);
	CarSpawnerMenu6->AddStaticItem("Trevors Blazer", false, SpawnBlazer3, NULL);
	CarSpawnerMenu6->AddStaticItem("Bodhi", false, SpawnBodhi, NULL);
	CarSpawnerMenu6->AddStaticItem("Dubsta 6x6", false, Spawn6x6, NULL);
	CarSpawnerMenu6->AddStaticItem("Dune", false, SpawnDune, NULL);
	CarSpawnerMenu6->AddStaticItem("Duneloader", false, SpawnDuneloader, NULL);
	CarSpawnerMenu6->AddStaticItem("Injection", false, SpawnInjection, NULL);
	CarSpawnerMenu6->AddStaticItem("Kalahari", false, SpawnKalahari, NULL);
	CarSpawnerMenu6->AddStaticItem("Monster", false, SpawnMonster, NULL);
	CarSpawnerMenu6->AddStaticItem("Mesa(Mercs)", false, SpawnMesa3, NULL);
	CarSpawnerMenu6->AddStaticItem("RancherXL", false, SpawnRancherXL, NULL);
	CarSpawnerMenu6->AddStaticItem("Rusty Rebel", false, SpawnRebel, NULL);
	CarSpawnerMenu6->AddStaticItem("Clean Rebel", false, SpawnRebel2, NULL);
	CarSpawnerMenu6->AddStaticItem("SandkingSWB", false, SpawnSandkingSWB, NULL);
	CarSpawnerMenu6->AddStaticItem("SandkingXL", false, SpawnSandkingXL, NULL);
	CarSpawnerMenu6->AddStaticItem("Snow Rancher", false, SpawnRancherSnow, NULL);
	CarSpawnerMenu6->AddStaticItem("Space Docker", false, SpawnSpace, NULL);

	// Muscle
	CarSpawnerMenu7->SetMenuTitle("Muscle");
	CarSpawnerMenu7->AddStaticItem("Blade", false, SpawnBlade, NULL);
	CarSpawnerMenu7->AddStaticItem("Buccaneer", false, SpawnBuccaneer, NULL);
	CarSpawnerMenu7->AddStaticItem("Dominator", false, SpawnDominator, NULL);
	CarSpawnerMenu7->AddStaticItem("Gauntlet", false, SpawnGauntlet, NULL);
	CarSpawnerMenu7->AddStaticItem("Hotknife", false, SpawnHotknife, NULL);
	CarSpawnerMenu7->AddStaticItem("Phoenix", false, SpawnPhoenix, NULL);
	CarSpawnerMenu7->AddStaticItem("Picador", false, SpawnPicador, NULL);
	CarSpawnerMenu7->AddStaticItem("Rat Loader", false, SpawnRatLoader, NULL);
	CarSpawnerMenu7->AddStaticItem("Rat Loader2", false, SpawnRatLoader2, NULL);
	CarSpawnerMenu7->AddStaticItem("Ruiner", false, SpawnRuiner, NULL);
	CarSpawnerMenu7->AddStaticItem("SabreGT", false, SpawnSabreGT, NULL);
	CarSpawnerMenu7->AddStaticItem("SlamVan", false, SpawnSlamVan, NULL);
	CarSpawnerMenu7->AddStaticItem("Vigero", false, SpawnVigero, NULL);
	CarSpawnerMenu7->AddStaticItem("Voodoo", false, SpawnVoodoo, NULL);

	// SUVs
	CarSpawnerMenu8->SetMenuTitle("SUVs");
	CarSpawnerMenu8->AddStaticItem("Baller", false, SpawnBaller, NULL);
	CarSpawnerMenu8->AddStaticItem("Baller2", false, SpawnBaller2, NULL);
	CarSpawnerMenu8->AddStaticItem("BeeJayXL", false, SpawnBeeJayXL, NULL);
	CarSpawnerMenu8->AddStaticItem("Old Cavalcade", false, SpawnCavalcade, NULL);
	CarSpawnerMenu8->AddStaticItem("New Cavalcade", false, SpawnCavalcade2, NULL);
	CarSpawnerMenu8->AddStaticItem("Dubsta", false, SpawnDubsta, NULL);
	CarSpawnerMenu8->AddStaticItem("Dubsta2", false, SpawnDubsta2, NULL);
	CarSpawnerMenu8->AddStaticItem("FQ2", false, SpawnFQ2, NULL);
	CarSpawnerMenu8->AddStaticItem("Granger", false, SpawnGranger, NULL);
	CarSpawnerMenu8->AddStaticItem("Gresley", false, SpawnGresley, NULL);
	CarSpawnerMenu8->AddSubMenu("Page 2", CarSpawnerMenu8P2);

	// SUVs Page 2
	CarSpawnerMenu8P2->SetMenuTitle("SUVs (Page 2)");
	CarSpawnerMenu8P2->AddStaticItem("Habanero", false, SpawnHabanero, NULL);
	CarSpawnerMenu8P2->AddStaticItem("HuntleyS", false, SpawnHuntleyS, NULL);
	CarSpawnerMenu8P2->AddStaticItem("Landstalker", false, SpawnLandstalker, NULL);
	CarSpawnerMenu8P2->AddStaticItem("Mesa", false, SpawnMesa, NULL);
	CarSpawnerMenu8P2->AddStaticItem("Snow Mesa", false, SpawnMesa2, NULL);
	CarSpawnerMenu8P2->AddStaticItem("Patriot", false, SpawnPatriot, NULL);
	CarSpawnerMenu8P2->AddStaticItem("Radius", false, SpawnRadius, NULL);
	CarSpawnerMenu8P2->AddStaticItem("Rocoto", false, SpawnRocoto, NULL);
	CarSpawnerMenu8P2->AddStaticItem("Seminole", false, SpawnSeminole, NULL);
	CarSpawnerMenu8P2->AddStaticItem("Serrano", false, SpawnSerrano, NULL);

	// Motorcycles
	CarSpawnerMenu9->SetMenuTitle("Motorcycles");
	CarSpawnerMenu9->AddStaticItem("Akuma", false, SpawnAkuma, NULL);
	CarSpawnerMenu9->AddStaticItem("Bagger", false, SpawnBagger, NULL);
	CarSpawnerMenu9->AddStaticItem("Bati801", false, SpawnBati801, NULL);
	CarSpawnerMenu9->AddStaticItem("Bati801RR", false, SpawnBati801RR, NULL);
	CarSpawnerMenu9->AddStaticItem("Carbon RS", false, SpawnCarbonRS, NULL);
	CarSpawnerMenu9->AddStaticItem("Daemon", false, SpawnDaemon, NULL);
	CarSpawnerMenu9->AddStaticItem("DoubleT", false, SpawnDoubleT, NULL);
	CarSpawnerMenu9->AddStaticItem("Faggio", false, SpawnFaggio, NULL);
	CarSpawnerMenu9->AddStaticItem("Hakuchou", false, SpawnHakuchou, NULL);
	CarSpawnerMenu9->AddStaticItem("Hexer", false, SpawnHexer, NULL);
	CarSpawnerMenu9->AddSubMenu("Page 2", CarSpawnerMenu9P2);

	// Motorcycles Page 2
	CarSpawnerMenu9P2->SetMenuTitle("Motorcycles (Page 2)");
	CarSpawnerMenu9P2->AddStaticItem("Innovation", false, SpawnInnovation, NULL);
	CarSpawnerMenu9P2->AddStaticItem("Nemesis", false, SpawnNemesis, NULL);
	CarSpawnerMenu9P2->AddStaticItem("PCJ600", false, SpawnPCJ600, NULL);
	CarSpawnerMenu9P2->AddStaticItem("Ruffian", false, SpawnRuffian, NULL);
	CarSpawnerMenu9P2->AddStaticItem("Sanchez", false, SpawnSanchez, NULL);
	CarSpawnerMenu9P2->AddStaticItem("Sanchez2", false, SpawnSanchez2, NULL);
	CarSpawnerMenu9P2->AddStaticItem("Sovereign", false, SpawnSovereign, NULL);
	CarSpawnerMenu9P2->AddStaticItem("Thrust", false, SpawnThrust, NULL);
	CarSpawnerMenu9P2->AddStaticItem("Vader", false, SpawnVader, NULL);

	// Helicopters
	CarSpawnerMenu10->SetMenuTitle("Helicopters");
	CarSpawnerMenu10->AddStaticItem("Annihilator", false, SpawnAnnihilator, NULL);
	CarSpawnerMenu10->AddStaticItem("Buzzard No Guns", false, SpawnBuzzard2, NULL);
	CarSpawnerMenu10->AddStaticItem("Buzzard", false, SpawnBuzzard, NULL);
	CarSpawnerMenu10->AddStaticItem("Cargobob", false, SpawnCargobob, NULL);
	CarSpawnerMenu10->AddStaticItem("Medic Cargobob", false, SpawnCargobob2, NULL);
	CarSpawnerMenu10->AddStaticItem("Trevors CargoBob", false, SpawnCargobob3, NULL);
	CarSpawnerMenu10->AddStaticItem("Frogger", false, SpawnFrogger, NULL);
	CarSpawnerMenu10->AddStaticItem("FIB/Trevors Frogger", false, SpawnFrogger2, NULL);
	CarSpawnerMenu10->AddStaticItem("Maverick", false, SpawnMaverick, NULL);
	CarSpawnerMenu10->AddStaticItem("Police Maverick", false, SpawnPMav, NULL);
	CarSpawnerMenu10->AddStaticItem("Skylift", false, SpawnSkylift, NULL);
	CarSpawnerMenu10->AddStaticItem("Swift", false, SpawnSwift, NULL);

	// Planes
	CarSpawnerMenu11->SetMenuTitle("Planes");
	CarSpawnerMenu11->AddStaticItem("Blimp", false, SpawnBlimp, NULL);
	CarSpawnerMenu11->AddStaticItem("Besra", false, SpawnBesra, NULL);
	CarSpawnerMenu11->AddStaticItem("Cargo Plane", false, SpawnCargo, NULL);
	CarSpawnerMenu11->AddStaticItem("Cuban 800", false, SpawnCuban800, NULL);
	CarSpawnerMenu11->AddStaticItem("Duster", false, SpawnDuster, NULL);
	CarSpawnerMenu11->AddStaticItem("Jumbo Jet", false, SpawnJumbo, NULL);
	CarSpawnerMenu11->AddStaticItem("Luxor", false, SpawnLuxor, NULL);
	CarSpawnerMenu11->AddStaticItem("Mallard", false, SpawnMallard, NULL);
	CarSpawnerMenu11->AddStaticItem("Mammatus", false, SpawnMammatus, NULL);
	CarSpawnerMenu11->AddStaticItem("MilJet", false, SpawnMilJet, NULL);
	CarSpawnerMenu11->AddStaticItem("Lazer", false, SpawnLazer, NULL);
	CarSpawnerMenu11->AddStaticItem("Shamal", false, SpawnShamal, NULL);
	CarSpawnerMenu11->AddStaticItem("Titan", false, SpawnTitan, NULL);
	CarSpawnerMenu11->AddStaticItem("Velum", false, SpawnVelum, NULL);
	CarSpawnerMenu11->AddStaticItem("Vestra", false, SpawnVestra, NULL);

	// Commercial
	CarSpawnerMenu12->SetMenuTitle("Commercial");
	CarSpawnerMenu12->AddStaticItem("Benson", false, SpawnBenson, NULL);
	CarSpawnerMenu12->AddStaticItem("Biff", false, SpawnBiff, NULL);
	CarSpawnerMenu12->AddStaticItem("Hauler", false, SpawnHauler, NULL);
	CarSpawnerMenu12->AddStaticItem("Mule", false, SpawnMule, NULL);
	CarSpawnerMenu12->AddStaticItem("Packer", false, SpawnPacker, NULL);
	CarSpawnerMenu12->AddStaticItem("Phantom", false, SpawnPhantom, NULL);
	CarSpawnerMenu12->AddStaticItem("Pounder", false, SpawnPounder, NULL);
	CarSpawnerMenu12->AddStaticItem("Stockade", false, SpawnStockade, NULL);
	CarSpawnerMenu12->AddStaticItem("Snow Stockade", false, SpawnStockadeSnow, NULL);

	// Industrial
	CarSpawnerMenu13->SetMenuTitle("Industrial");
	CarSpawnerMenu13->AddStaticItem("Dock Handler", false, SpawnDHandler, NULL);
	CarSpawnerMenu13->AddStaticItem("Dozer", false, SpawnDozer, NULL);
	CarSpawnerMenu13->AddStaticItem("Dump", false, SpawnDump, NULL);
	CarSpawnerMenu13->AddStaticItem("Flatbed", false, SpawnFlatbed, NULL);
	CarSpawnerMenu13->AddStaticItem("Mixer", false, SpawnMixer, NULL);
	CarSpawnerMenu13->AddStaticItem("Mixer2", false, SpawnMixer2, NULL);
	CarSpawnerMenu13->AddStaticItem("Rubble", false, SpawnRubble, NULL);
	CarSpawnerMenu13->AddStaticItem("Tipper", false, SpawnTipper, NULL);
	CarSpawnerMenu13->AddStaticItem("Tipper2", false, SpawnTipper2, NULL);

	// Utility
	CarSpawnerMenu14->SetMenuTitle("Utility");
	CarSpawnerMenu14->AddStaticItem("Airtug", false, SpawnAirtug, NULL);
	CarSpawnerMenu14->AddStaticItem("Bison", false, SpawnBison, NULL);
	CarSpawnerMenu14->AddStaticItem("Bison2", false, SpawnBison2, NULL);
	CarSpawnerMenu14->AddStaticItem("Bison3", false, SpawnBison3, NULL);
	CarSpawnerMenu14->AddStaticItem("BobcatXL", false, SpawnBobcatXL, NULL);
	CarSpawnerMenu14->AddStaticItem("Caddy", false, SpawnCaddy, NULL);
	CarSpawnerMenu14->AddStaticItem("Caddy2", false, SpawnCaddy2, NULL);
	CarSpawnerMenu14->AddStaticItem("Cutter", false, SpawnCutter, NULL);
	CarSpawnerMenu14->AddStaticItem("Docktug", false, SpawnDocktug, NULL);
	CarSpawnerMenu14->AddStaticItem("Fieldmaster", false, SpawnFieldmaster, NULL);
	CarSpawnerMenu14->AddStaticItem("Forklift", false, SpawnForklift, NULL);
	CarSpawnerMenu14->AddStaticItem("Lawn Mower", false, SpawnMower, NULL);
	CarSpawnerMenu14->AddSubMenu("Page 2", CarSpawnerMenu14P2);

	// Utility Page 2
	CarSpawnerMenu14P2->SetMenuTitle("Utility (Page 2)");
	CarSpawnerMenu14P2->AddStaticItem("Ripley", false, SpawnRipley, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Sadler", false, SpawnSadler, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Snow Sadler", false, SpawnSadler2, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Scrap Truck", false, SpawnScrap, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Small Tow Truck", false, SpawnTow2, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Big Tow Truck", false, SpawnTow, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Tractor", false, SpawnTractor, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Snow Tractor", false, SpawnTractor2, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Utility Truck", false, SpawnUtility, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Utility Truck2", false, SpawnUtility2, NULL);
	CarSpawnerMenu14P2->AddStaticItem("Utility Truck3", false, SpawnUtility3, NULL);

	// Trailers
	CarSpawnerMenu15->SetMenuTitle("Trailers");
	CarSpawnerMenu15->AddStaticItem("Car Carrier", false, SpawnTR2, NULL);
	CarSpawnerMenu15->AddStaticItem("Marquis Trailer", false, SpawnTR3, NULL);
	CarSpawnerMenu15->AddStaticItem("Super Car Carrier", false, SpawnTR4, NULL);
	CarSpawnerMenu15->AddStaticItem("Log Trailer", false, SpawnLog, NULL);
	CarSpawnerMenu15->AddStaticItem("Metal Trailer", false, SpawnMetal, NULL);
	CarSpawnerMenu15->AddStaticItem("Random Ad Trailer", false, SpawnRandom, NULL);
	CarSpawnerMenu15->AddStaticItem("Big Goods Trailer", false, SpawnBig, NULL);
	CarSpawnerMenu15->AddStaticItem("Flatbed Trailer", false, SpawnFlat, NULL);
	CarSpawnerMenu15->AddStaticItem("Fame Or Shame Trailer", false, SpawnFame, NULL);
	CarSpawnerMenu15->AddStaticItem("Army Trailer", false, SpawnArmyT1, NULL);
	CarSpawnerMenu15->AddStaticItem("Army Trailer2", false, SpawnArmyT2, NULL);
	CarSpawnerMenu15->AddStaticItem("Army Trailer3", false, SpawnArmyT3, NULL);
	CarSpawnerMenu15->AddStaticItem("Boat Trailer", false, SpawnBoatT, NULL);
	CarSpawnerMenu15->AddStaticItem("Dock Trailer", false, SpawnDockT, NULL);
	CarSpawnerMenu15->AddStaticItem("Freight Trailer", false, SpawnFreightT, NULL);
	CarSpawnerMenu15->AddStaticItem("Tanker Trailer", false, SpawnTanker, NULL);
	CarSpawnerMenu15->AddStaticItem("Construction Trailer", false, SpawnConstruct, NULL);

	// Compacts
	CarSpawnerMenu16->SetMenuTitle("Compacts");
	CarSpawnerMenu16->AddStaticItem("Blista", false, SpawnBlista, NULL);
	CarSpawnerMenu16->AddStaticItem("Dilettante", false, SpawnDilettante, NULL);
	CarSpawnerMenu16->AddStaticItem("Issi", false, SpawnIssi, NULL);
	CarSpawnerMenu16->AddStaticItem("Panto", false, SpawnPanto, NULL);
	CarSpawnerMenu16->AddStaticItem("Prairie", false, SpawnPrairie, NULL);
	CarSpawnerMenu16->AddStaticItem("Rhapsody", false, SpawnRhapsody, NULL);

	// Military
	CarSpawnerMenu17->SetMenuTitle("Military");
	CarSpawnerMenu17->AddStaticItem("Barracks", false, SpawnBarracks, NULL);
	CarSpawnerMenu17->AddStaticItem("Barracks Semi", false, SpawnBarracks2, NULL);
	CarSpawnerMenu17->AddStaticItem("Crusader", false, SpawnCrusader, NULL);
	CarSpawnerMenu17->AddStaticItem("Tank", false, SpawnTank, NULL);

	// Service
	CarSpawnerMenu18->SetMenuTitle("Service");
	CarSpawnerMenu18->AddStaticItem("Airport Bus", false, SpawnAirportBus, NULL);
	CarSpawnerMenu18->AddStaticItem("Bus", false, SpawnBus, NULL);
	CarSpawnerMenu18->AddStaticItem("Dashound", false, SpawnDashound, NULL);
	CarSpawnerMenu18->AddStaticItem("Shuttle", false, SpawnShuttle, NULL);
	CarSpawnerMenu18->AddStaticItem("Taxi", false, SpawnTaxi, NULL);
	CarSpawnerMenu18->AddStaticItem("Tourbus", false, SpawnTourbus, NULL);
	CarSpawnerMenu18->AddStaticItem("Trashmaster", false, SpawnTrashmaster, NULL);

	// Sports Classics
	CarSpawnerMenu19->SetMenuTitle("Sports Classics");
	CarSpawnerMenu19->AddStaticItem("Coquette Classic", false, SpawnCoquette2, NULL);
	CarSpawnerMenu19->AddStaticItem("JB700", false, SpawnJB700, NULL);
	CarSpawnerMenu19->AddStaticItem("Manana", false, SpawnManana, NULL);
	CarSpawnerMenu19->AddStaticItem("Monroe", false, SpawnMonroe, NULL);
	CarSpawnerMenu19->AddStaticItem("Peyote", false, SpawnPeyote, NULL);
	CarSpawnerMenu19->AddStaticItem("Pigalle", false, SpawnPigalle, NULL);
	CarSpawnerMenu19->AddStaticItem("Roosevelt", false, SpawnBType, NULL);
	CarSpawnerMenu19->AddStaticItem("Stinger", false, SpawnStinger, NULL);
	CarSpawnerMenu19->AddStaticItem("StingerGT", false, SpawnStingerGT, NULL);
	CarSpawnerMenu19->AddStaticItem("Tornado", false, SpawnTornado, NULL);
	CarSpawnerMenu19->AddStaticItem("Tornado2", false, SpawnTornado2, NULL);
	CarSpawnerMenu19->AddStaticItem("Tornado3", false, SpawnTornado3, NULL);
	CarSpawnerMenu19->AddStaticItem("Tornado4", false, SpawnTornado4, NULL);
	CarSpawnerMenu19->AddStaticItem("ZType", false, SpawnZType, NULL);

	// Vans
	CarSpawnerMenu20->SetMenuTitle("Vans");
	CarSpawnerMenu20->AddStaticItem("Boxville", false, SpawnBoxville, NULL);
	CarSpawnerMenu20->AddStaticItem("Boxville2", false, SpawnBoxville2, NULL);
	CarSpawnerMenu20->AddStaticItem("Boxville3", false, SpawnBoxville3, NULL);
	CarSpawnerMenu20->AddStaticItem("Burrito", false, SpawnBurrito, NULL);
	CarSpawnerMenu20->AddStaticItem("Burrito2", false, SpawnBurrito2, NULL);
	CarSpawnerMenu20->AddStaticItem("Burrito3", false, SpawnBurrito3, NULL);
	CarSpawnerMenu20->AddStaticItem("Burrito4", false, SpawnBurrito4, NULL);
	CarSpawnerMenu20->AddStaticItem("Snow Burrito", false, SpawnBurrito5, NULL);
	CarSpawnerMenu20->AddStaticItem("Camper", false, SpawnCamper, NULL);
	CarSpawnerMenu20->AddStaticItem("Gang Burrito", false, SpawnGBurrito, NULL);
	CarSpawnerMenu20->AddStaticItem("Journey", false, SpawnJourney, NULL);
	CarSpawnerMenu20->AddSubMenu("Page 2", CarSpawnerMenu20P2);

	// Vans Page 2
	CarSpawnerMenu20P2->SetMenuTitle("Vans (Page 2)");
	CarSpawnerMenu20P2->AddStaticItem("Minivan", false, SpawnMinivan, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Paradise", false, SpawnParadise, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Pony", false, SpawnPony, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Weed Van", false, SpawnWeedVan, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Weazel News", false, SpawnRumpo, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Deludamol", false, SpawnRumpo2, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Speedo", false, SpawnSpeedo, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Clown Van", false, SpawnClown, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Surfer", false, SpawnSurfer, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Surfer2", false, SpawnSurfer2, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Taco Van", false, SpawnTacoVan, NULL);
	CarSpawnerMenu20P2->AddStaticItem("Youga", false, SpawnYouga, NULL);

	// Bicycles
	CarSpawnerMenu21->SetMenuTitle("Bicycles");
	CarSpawnerMenu21->AddStaticItem("BMX", false, SpawnBMX, NULL);
	CarSpawnerMenu21->AddStaticItem("Scorcher", false, SpawnScorcher, NULL);
	CarSpawnerMenu21->AddStaticItem("Cruiser", false, SpawnCruiser, NULL);
	CarSpawnerMenu21->AddStaticItem("Fixter", false, SpawnFixter, NULL);
	CarSpawnerMenu21->AddStaticItem("TriCycles", false, SpawnTriCycles, NULL);
	CarSpawnerMenu21->AddStaticItem("Whippet", false, SpawnWhippet, NULL);
	CarSpawnerMenu21->AddStaticItem("Endurex", false, SpawnEndurex, NULL);

	// Boats
	CarSpawnerMenu22->SetMenuTitle("Boats");
	CarSpawnerMenu22->AddStaticItem("Jetmax", false, SpawnJetmax, NULL);
	CarSpawnerMenu22->AddStaticItem("Marquis", false, SpawnMarquis, NULL);
	CarSpawnerMenu22->AddStaticItem("Seashark", false, SpawnSeashark, NULL);
	CarSpawnerMenu22->AddStaticItem("Lifeguard Seashark", false, SpawnSeasharkLG, NULL);
	CarSpawnerMenu22->AddStaticItem("Squalo", false, SpawnSqualo, NULL);
	CarSpawnerMenu22->AddStaticItem("Suntrap", false, SpawnSuntrap, NULL);
	CarSpawnerMenu22->AddStaticItem("Tropic", false, SpawnTropic, NULL);
	CarSpawnerMenu22->AddStaticItem("Speeder", false, SpawnSpeeder, NULL);
	CarSpawnerMenu22->AddStaticItem("Police Boat", false, SpawnPredator, NULL);
	CarSpawnerMenu22->AddStaticItem("Submersible", false, SpawnSub, NULL);



	//players cars
	// Vehicle Spawner Menu
	CarSpawner1->SetMenuTitle("Vehicle Spawner");
	CarSpawner1->AddSubMenu("Heist Vehicles", CarSpawnerMenu233);
	CarSpawner1->AddSubMenu("Ill Gotten Gains Vehicles", CarSpawnerMenu244);
	CarSpawner1->AddSubMenu("Bicycles", CarSpawnerMenu211);
	CarSpawner1->AddSubMenu("Boats", CarSpawnerMenu222);
	CarSpawner1->AddSubMenu("Commercial", CarSpawnerMenu122);
	CarSpawner1->AddSubMenu("Compacts", CarSpawnerMenu166);
	CarSpawner1->AddSubMenu("Coupes", CarSpawnerMenu33);
	CarSpawner1->AddSubMenu("Emergency", CarSpawnerMenu55);
	CarSpawner1->AddSubMenu("Helicopters", CarSpawnerMenu100);
	CarSpawner1->AddSubMenu("Industrial", CarSpawnerMenu133);
	CarSpawner1->AddSubMenu("Military", CarSpawnerMenu177);
	CarSpawner1->AddSubMenu("Motorcycles", CarSpawnerMenu99);
	CarSpawner1->AddSubMenu("Muscle", CarSpawnerMenu77);
	CarSpawner1->AddSubMenu("Off Road", CarSpawnerMenu66);
	CarSpawner1->AddSubMenu("Planes", CarSpawnerMenu111);
	CarSpawner1->AddSubMenu("Page 2", CarSpawner22);

	// Vehicle Spawner Menu Page 2
	CarSpawner22->SetMenuTitle("Vehicle Spawner (Page 2)");
	CarSpawner22->AddSubMenu("Sedans", CarSpawnerMenu44);
	CarSpawner22->AddSubMenu("Service", CarSpawnerMenu188);
	CarSpawner22->AddSubMenu("Sports", CarSpawnerMenu2P22);
	CarSpawner22->AddSubMenu("Sports Classics", CarSpawnerMenu199);
	CarSpawner22->AddSubMenu("Super", CarSpawnerMenu110);
	CarSpawner22->AddSubMenu("SUVs", CarSpawnerMenu88);
	CarSpawner22->AddSubMenu("Trailers", CarSpawnerMenu155);
	CarSpawner22->AddSubMenu("Utility", CarSpawnerMenu144);
	CarSpawner22->AddSubMenu("Vans", CarSpawnerMenu200);

	//Ill Gotten Gains Vehicles
	CarSpawnerMenu244->SetMenuTitle("Ill Gotten Gains");
	CarSpawnerMenu244->AddStaticItem("Osiris", false, GainsOsiris1, NULL);
	CarSpawnerMenu244->AddStaticItem("T20", false, GainsT201, NULL);
	CarSpawnerMenu244->AddStaticItem("Stirling GT", false, GainsStirling1, NULL);
	CarSpawnerMenu244->AddStaticItem("Virgo", false, GainsVirgo1, NULL);
	CarSpawnerMenu244->AddStaticItem("Windsor", false, GainsWindsor1, NULL);
	CarSpawnerMenu244->AddStaticItem("Coil Brawler", false, GainsCoil1, NULL);
	CarSpawnerMenu244->AddStaticItem("Toro Boat", false, GainsToro1, NULL);
	CarSpawnerMenu244->AddStaticItem("Vapid Chino", false, GainsChino1, NULL);
	CarSpawnerMenu244->AddStaticItem("Invetero Coquette", false, GainsCoq1, NULL);
	CarSpawnerMenu244->AddStaticItem("Vindicator", false, GainsVin1, NULL);
	CarSpawnerMenu244->AddStaticItem("Gold Luxor", false, GainsLuxor1, NULL);
	CarSpawnerMenu244->AddStaticItem("Gold Swift", false, GainsSwift1, NULL);

	// Favorites
	CarSpawnerMenu00->SetMenuTitle("Favorites");
	CarSpawnerMenu00->AddStaticItem("Lazer", false, SpawnLazer1, NULL);
	CarSpawnerMenu00->AddStaticItem("Hakuchou", false, SpawnHakuchou1, NULL);
	CarSpawnerMenu00->AddStaticItem("Buzzard", false, SpawnBuzzard, NULL);
	CarSpawnerMenu00->AddStaticItem("Tank", false, SpawnTank1, NULL);
	CarSpawnerMenu00->AddStaticItem("FIB", false, SpawnFIB1, NULL);
	CarSpawnerMenu00->AddStaticItem("FIB2", false, SpawnFIB22, NULL);
	CarSpawnerMenu00->AddStaticItem("Police", false, SpawnPolice1, NULL);
	CarSpawnerMenu00->AddStaticItem("Police Buffalo", false, SpawnPolice33, NULL);
	CarSpawnerMenu00->AddStaticItem("Unmarked", false, SpawnUnmarked1, NULL);
	CarSpawnerMenu00->AddStaticItem("Jester2", false, SpawnJester22, NULL);
	CarSpawnerMenu00->AddSubMenu("Page 2", CarSpawnerMenu0P22);

	// Favorites Page 2
	CarSpawnerMenu0P22->SetMenuTitle("Favorites (Page 2)");
	CarSpawnerMenu0P22->AddStaticItem("Dubsta 6x6", false, Spawn6x66, NULL);
	CarSpawnerMenu0P22->AddStaticItem("Monster", false, SpawnMonster1, NULL);
	CarSpawnerMenu0P22->AddStaticItem("Mesa(Mercs)", false, SpawnMesa33, NULL);
	CarSpawnerMenu0P22->AddStaticItem("Phantom", false, SpawnPhantom1, NULL);
	CarSpawnerMenu0P22->AddStaticItem("Bus", false, SpawnBus1, NULL);
	CarSpawnerMenu0P22->AddStaticItem("Speeder", false, SpawnSpeeder1, NULL);
	CarSpawnerMenu0P22->AddStaticItem("Blimp", false, SpawnBlimp1, NULL);
	CarSpawnerMenu0P22->AddStaticItem("Jumbo Jet", false, SpawnJumbo1, NULL);
	CarSpawnerMenu0P22->AddStaticItem("Cargo Plane", false, SpawnCargo1, NULL);
	CarSpawnerMenu0P22->AddStaticItem("Dozer", false, SpawnDozer1, NULL);

	// Heist Vehicles
	CarSpawnerMenu233->SetMenuTitle("Heist Vehicles");
	CarSpawnerMenu233->AddStaticItem("Hydra", false, SpawnHydra1, NULL);
	CarSpawnerMenu233->AddStaticItem("Mule", false, SpawnMule33, NULL);
	CarSpawnerMenu233->AddStaticItem("Tanker", false, SpawnTanker22, NULL);
	CarSpawnerMenu233->AddStaticItem("Casco", false, SpawnCasco1, NULL);
	CarSpawnerMenu233->AddStaticItem("Boxville", false, SpawnBoxville44, NULL);
	CarSpawnerMenu233->AddStaticItem("Insurgent", false, SpawnInsurgent1, NULL);
	CarSpawnerMenu233->AddStaticItem("Insurgent 2", false, SpawnInsurgent22, NULL);
	CarSpawnerMenu233->AddStaticItem("Gang Burrito 2", false, SpawnGBurrito22, NULL);
	CarSpawnerMenu233->AddStaticItem("Technical", false, SpawnTechnical1, NULL);
	CarSpawnerMenu233->AddStaticItem("Dinghy", false, SpawnDinghy33, NULL);
	CarSpawnerMenu233->AddStaticItem("Savage", false, SpawnSavage1, NULL);
	CarSpawnerMenu233->AddStaticItem("Enduro", false, SpawnEnduro1, NULL);
	CarSpawnerMenu233->AddStaticItem("Guardian", false, SpawnGuardian1, NULL);
	CarSpawnerMenu233->AddStaticItem("Lectro", false, SpawnLectro1, NULL);
	CarSpawnerMenu233->AddStaticItem("Karuma", false, SpawnKumura1, NULL);
	CarSpawnerMenu233->AddSubMenu("Page 2", CarSpawnerMenu699);


	CarSpawnerMenu699->AddStaticItem("Karuma 2", false, SpawnKumura22, NULL);
	CarSpawnerMenu699->AddStaticItem("Trash2", false, SpawnTrash22, NULL);
	CarSpawnerMenu699->AddStaticItem("Barracks", false, SpawnBarracks33, NULL);
	CarSpawnerMenu699->AddStaticItem("Valkyrie", false, SpawnValkyrie1, NULL);
	CarSpawnerMenu699->AddStaticItem("Velum", false, SpawnVelum22, NULL);
	CarSpawnerMenu699->AddStaticItem("Slamvan", false, SpawnSlamvan22, NULL);

	// Super
	CarSpawnerMenu110->SetMenuTitle("Super");
	CarSpawnerMenu110->AddStaticItem("Adder", false, SpawnAdder1, NULL);
	CarSpawnerMenu110->AddStaticItem("Bullet", false, SpawnBullet1, NULL);
	CarSpawnerMenu110->AddStaticItem("Cheetah", false, SpawnCheetah1, NULL);
	CarSpawnerMenu110->AddStaticItem("EntityXF", false, SpawnEntityXF1, NULL);
	CarSpawnerMenu110->AddStaticItem("Infernus", false, SpawnInfernus1, NULL);
	CarSpawnerMenu110->AddStaticItem("TurismoR", false, SpawnTurismoR1, NULL);
	CarSpawnerMenu110->AddStaticItem("Vacca", false, SpawnVacca1, NULL);
	CarSpawnerMenu110->AddStaticItem("Voltic", false, SpawnVoltic1, NULL);
	CarSpawnerMenu110->AddStaticItem("Zentorno", false, SpawnZentorno1, NULL);

	// Sports
	CarSpawnerMenu2P22->SetMenuTitle("Sports");
	CarSpawnerMenu2P22->AddStaticItem("9F", false, Spawn9F1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("9F Convertible", false, Spawn9F22, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Alpha", false, SpawnAlpha1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Banshee", false, SpawnBanshee1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Buffalo", false, SpawnBuffalo1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Franklins Buffalo", false, SpawnBuffalo22, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Carbonizzare", false, SpawnCarbonizzare1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Comet", false, SpawnComet1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Coquette", false, SpawnCoquette1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Elegy", false, SpawnElegy1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Feltzer", false, SpawnFeltzer1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("FuroreGT", false, SpawnFuroreGT1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Fusilade", false, SpawnFusilade1, NULL);
	CarSpawnerMenu2P22->AddSubMenu("Page 2", CarSpawnerMenu2P2);

	// Sports Page 2
	CarSpawnerMenu2P22->SetMenuTitle("Sports (Page 2)");
	CarSpawnerMenu2P22->AddStaticItem("Futo", false, SpawnFuto1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Jester", false, SpawnJester1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Jester2", false, SpawnJester22, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Khamelion", false, SpawnKhamelion1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Massacro", false, SpawnMassacro1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Massacro2", false, SpawnMassacro22, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Penumbra", false, SpawnPenumbra1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Rapid GT", false, SpawnRapidGT1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Rapid GT Convertible", false, SpawnRapidGT22, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Schwartzer", false, SpawnSchwartzer1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Sultan", false, SpawnSultan1, NULL);
	CarSpawnerMenu2P22->AddStaticItem("Surano", false, SpawnSurano1, NULL);

	// Coupes
	CarSpawnerMenu33->SetMenuTitle("Coupes");
	CarSpawnerMenu33->AddStaticItem("Cognoscenti", false, SpawnCognoscenti1, NULL);
	CarSpawnerMenu33->AddStaticItem("Exemplar", false, SpawnExemplar1, NULL);
	CarSpawnerMenu33->AddStaticItem("F620", false, SpawnF6200, NULL);
	CarSpawnerMenu33->AddStaticItem("Felon", false, SpawnFelon1, NULL);
	CarSpawnerMenu33->AddStaticItem("Felon2", false, SpawnFelon22, NULL);
	CarSpawnerMenu33->AddStaticItem("Jackal", false, SpawnJackal1, NULL);
	CarSpawnerMenu33->AddStaticItem("Oracle", false, SpawnOracle1, NULL);
	CarSpawnerMenu33->AddStaticItem("Oracle2", false, SpawnOracle22, NULL);
	CarSpawnerMenu33->AddStaticItem("Sentinel", false, SpawnSentinel1, NULL);
	CarSpawnerMenu33->AddStaticItem("Sentinel2", false, SpawnSentinel22, NULL);
	CarSpawnerMenu33->AddStaticItem("Zion", false, SpawnZion1, NULL);
	CarSpawnerMenu33->AddStaticItem("Zion2", false, SpawnZion22, NULL);

	// Sedans
	CarSpawnerMenu44->SetMenuTitle("Sedans");
	CarSpawnerMenu44->AddStaticItem("Asea", false, SpawnAsea1, NULL);
	CarSpawnerMenu44->AddStaticItem("Snow Asea", false, SpawnAsea22, NULL);
	CarSpawnerMenu44->AddStaticItem("Asterope", false, SpawnAsterope1, NULL);
	CarSpawnerMenu44->AddStaticItem("Emperor", false, SpawnEmperor1, NULL);
	CarSpawnerMenu44->AddStaticItem("Rusty Emperor", false, SpawnEmperor22, NULL);
	CarSpawnerMenu44->AddStaticItem("Snow Emperor", false, SpawnEmperor33, NULL);
	CarSpawnerMenu44->AddStaticItem("Fugitive", false, SpawnFugitive1, NULL);
	CarSpawnerMenu44->AddStaticItem("Glendale", false, SpawnGlendale1, NULL);
	CarSpawnerMenu44->AddStaticItem("Ingot", false, SpawnIngot1, NULL);
	CarSpawnerMenu44->AddStaticItem("Intruder", false, SpawnIntruder1, NULL);
	CarSpawnerMenu44->AddStaticItem("Premier", false, SpawnPremier1, NULL);
	CarSpawnerMenu44->AddSubMenu("Page 2", CarSpawnerMenu4P22);

	// Sedans Page 2
	CarSpawnerMenu4P22->SetMenuTitle("Sedans (Page 2)");
	CarSpawnerMenu4P22->AddStaticItem("Primo", false, SpawnPrimo1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Regina", false, SpawnRegina1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Romero Hearse", false, SpawnRomero1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Schafter", false, SpawnSchafter1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Stanier", false, SpawnStanier1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Stratum", false, SpawnStratum1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Stretch", false, SpawnStretch1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Super Diamond", false, SpawnSuperDiamond1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Surge", false, SpawnSurge1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Tailgater", false, SpawnTailgater1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Warrener", false, SpawnWarrener1, NULL);
	CarSpawnerMenu4P22->AddStaticItem("Washington", false, SpawnWashington1, NULL);

	// Emergency
	CarSpawnerMenu55->SetMenuTitle("Emergency");
	CarSpawnerMenu55->AddStaticItem("Ambulance", false, SpawnAmbulance1, NULL);
	CarSpawnerMenu55->AddStaticItem("FIB", false, SpawnFIB1, NULL);
	CarSpawnerMenu55->AddStaticItem("FIB2", false, SpawnFIB22, NULL);
	CarSpawnerMenu55->AddStaticItem("Fire Truck", false, SpawnFireTruck1, NULL);
	CarSpawnerMenu55->AddStaticItem("Life Guard", false, SpawnLGuard1, NULL);
	CarSpawnerMenu55->AddStaticItem("Park Ranger", false, SpawnPRanger1, NULL);
	CarSpawnerMenu55->AddStaticItem("Police Bike", false, SpawnPBike1, NULL);
	CarSpawnerMenu55->AddStaticItem("Police Cruiser", false, SpawnPolice22, NULL);
	CarSpawnerMenu55->AddStaticItem("Police", false, SpawnPolice1, NULL);
	CarSpawnerMenu55->AddStaticItem("Police Buffalo", false, SpawnPolice33, NULL);
	CarSpawnerMenu55->AddStaticItem("Prison Bus", false, SpawnPBus1, NULL);
	CarSpawnerMenu55->AddStaticItem("Riot", false, SpawnRiot1, NULL);
	CarSpawnerMenu55->AddStaticItem("Police Van", false, SpawnPVan1, NULL);
	CarSpawnerMenu55->AddStaticItem("Sheriff Cruiser", false, SpawnSheriff1, NULL);
	CarSpawnerMenu55->AddStaticItem("Sheriff SUV", false, SpawnSheriff22, NULL);
	CarSpawnerMenu55->AddStaticItem("Snow Police Rancher", false, SpawnRancherSPP, NULL);
	CarSpawnerMenu55->AddStaticItem("Snow Police Esperanto", false, SpawnEsperantoSPP, NULL);
	CarSpawnerMenu55->AddStaticItem("Unmarked", false, SpawnUnmarked, NULL);

	// Off Road
	CarSpawnerMenu66->SetMenuTitle("Off Road");
	CarSpawnerMenu66->AddStaticItem("Bifta", false, SpawnBifta1, NULL);
	CarSpawnerMenu66->AddStaticItem("Blazer", false, SpawnBlazer1, NULL);
	CarSpawnerMenu66->AddStaticItem("Lifeguard Blazer", false, SpawnBlazer22, NULL);
	CarSpawnerMenu66->AddStaticItem("Trevors Blazer", false, SpawnBlazer3, NULL);
	CarSpawnerMenu66->AddStaticItem("Bodhi", false, SpawnBodhi1, NULL);
	CarSpawnerMenu66->AddStaticItem("Dubsta 6x6", false, Spawn6x66, NULL);
	CarSpawnerMenu66->AddStaticItem("Dune", false, SpawnDune1, NULL);
	CarSpawnerMenu66->AddStaticItem("Duneloader", false, SpawnDuneloader1, NULL);
	CarSpawnerMenu66->AddStaticItem("Injection", false, SpawnInjection1, NULL);
	CarSpawnerMenu66->AddStaticItem("Kalahari", false, SpawnKalahari1, NULL);
	CarSpawnerMenu66->AddStaticItem("Monster", false, SpawnMonster1, NULL);
	CarSpawnerMenu66->AddStaticItem("Mesa(Mercs)", false, SpawnMesa33, NULL);
	CarSpawnerMenu66->AddStaticItem("RancherXL", false, SpawnRancherXL1, NULL);
	CarSpawnerMenu66->AddStaticItem("Rusty Rebel", false, SpawnRebel1, NULL);
	CarSpawnerMenu66->AddStaticItem("Clean Rebel", false, SpawnRebel22, NULL);
	CarSpawnerMenu66->AddStaticItem("SandkingSWB", false, SpawnSandkingSWB1, NULL);
	CarSpawnerMenu66->AddStaticItem("SandkingXL", false, SpawnSandkingXL1, NULL);
	CarSpawnerMenu66->AddStaticItem("Snow Rancher", false, SpawnRancherSnow1, NULL);
	CarSpawnerMenu66->AddStaticItem("Space Docker", false, SpawnSpace1, NULL);

	// Muscle
	CarSpawnerMenu77->SetMenuTitle("Muscle");
	CarSpawnerMenu77->AddStaticItem("Blade", false, SpawnBlade1, NULL);
	CarSpawnerMenu77->AddStaticItem("Buccaneer", false, SpawnBuccaneer1, NULL);
	CarSpawnerMenu77->AddStaticItem("Dominator", false, SpawnDominator1, NULL);
	CarSpawnerMenu77->AddStaticItem("Gauntlet", false, SpawnGauntlet1, NULL);
	CarSpawnerMenu77->AddStaticItem("Hotknife", false, SpawnHotknife1, NULL);
	CarSpawnerMenu77->AddStaticItem("Phoenix", false, SpawnPhoenix1, NULL);
	CarSpawnerMenu77->AddStaticItem("Picador", false, SpawnPicador1, NULL);
	CarSpawnerMenu77->AddStaticItem("Rat Loader", false, SpawnRatLoader1, NULL);
	CarSpawnerMenu77->AddStaticItem("Rat Loader2", false, SpawnRatLoader22, NULL);
	CarSpawnerMenu77->AddStaticItem("Ruiner", false, SpawnRuiner1, NULL);
	CarSpawnerMenu77->AddStaticItem("SabreGT", false, SpawnSabreGT1, NULL);
	CarSpawnerMenu77->AddStaticItem("SlamVan", false, SpawnSlamVan1, NULL);
	CarSpawnerMenu77->AddStaticItem("Vigero", false, SpawnVigero1, NULL);
	CarSpawnerMenu77->AddStaticItem("Voodoo", false, SpawnVoodoo1, NULL);

	// SUVs
	CarSpawnerMenu88->SetMenuTitle("SUVs");
	CarSpawnerMenu88->AddStaticItem("Baller", false, SpawnBaller1, NULL);
	CarSpawnerMenu88->AddStaticItem("Baller2", false, SpawnBaller22, NULL);
	CarSpawnerMenu88->AddStaticItem("BeeJayXL", false, SpawnBeeJayXL1, NULL);
	CarSpawnerMenu88->AddStaticItem("Old Cavalcade", false, SpawnCavalcade1, NULL);
	CarSpawnerMenu88->AddStaticItem("New Cavalcade", false, SpawnCavalcade22, NULL);
	CarSpawnerMenu88->AddStaticItem("Dubsta", false, SpawnDubsta1, NULL);
	CarSpawnerMenu88->AddStaticItem("Dubsta2", false, SpawnDubsta22, NULL);
	CarSpawnerMenu88->AddStaticItem("FQ2", false, SpawnFQ22, NULL);
	CarSpawnerMenu88->AddStaticItem("Granger", false, SpawnGranger1, NULL);
	CarSpawnerMenu88->AddStaticItem("Gresley", false, SpawnGresley1, NULL);
	CarSpawnerMenu88->AddSubMenu("Page 2", CarSpawnerMenu8P22);

	// SUVs Page 2
	CarSpawnerMenu8P22->SetMenuTitle("SUVs (Page 2)");
	CarSpawnerMenu8P22->AddStaticItem("Habanero", false, SpawnHabanero1, NULL);
	CarSpawnerMenu8P22->AddStaticItem("HuntleyS", false, SpawnHuntleySS, NULL);
	CarSpawnerMenu8P22->AddStaticItem("Landstalker", false, SpawnLandstalker1, NULL);
	CarSpawnerMenu8P22->AddStaticItem("Mesa", false, SpawnMesa1, NULL);
	CarSpawnerMenu8P22->AddStaticItem("Snow Mesa", false, SpawnMesa22, NULL);
	CarSpawnerMenu8P22->AddStaticItem("Patriot", false, SpawnPatriot1, NULL);
	CarSpawnerMenu8P22->AddStaticItem("Radius", false, SpawnRadius1, NULL);
	CarSpawnerMenu8P22->AddStaticItem("Rocoto", false, SpawnRocoto1, NULL);
	CarSpawnerMenu8P22->AddStaticItem("Seminole", false, SpawnSeminole1, NULL);
	CarSpawnerMenu8P22->AddStaticItem("Serrano", false, SpawnSerrano1, NULL);

	// Motorcycles
	CarSpawnerMenu99->SetMenuTitle("Motorcycles");
	CarSpawnerMenu99->AddStaticItem("Akuma", false, SpawnAkuma1, NULL);
	CarSpawnerMenu99->AddStaticItem("Bagger", false, SpawnBagger1, NULL);
	CarSpawnerMenu99->AddStaticItem("Bati801", false, SpawnBati8011, NULL);
	CarSpawnerMenu99->AddStaticItem("Bati801RR", false, SpawnBati801RR1, NULL);
	CarSpawnerMenu99->AddStaticItem("Carbon RS", false, SpawnCarbonRS1, NULL);
	CarSpawnerMenu99->AddStaticItem("Daemon", false, SpawnDaemon1, NULL);
	CarSpawnerMenu99->AddStaticItem("DoubleT", false, SpawnDoubleT1, NULL);
	CarSpawnerMenu99->AddStaticItem("Faggio", false, SpawnFaggio1, NULL);
	CarSpawnerMenu99->AddStaticItem("Hakuchou", false, SpawnHakuchou1, NULL);
	CarSpawnerMenu99->AddStaticItem("Hexer", false, SpawnHexer1, NULL);
	CarSpawnerMenu99->AddSubMenu("Page 2", CarSpawnerMenu9P22);

	// Motorcycles Page 2
	CarSpawnerMenu9P22->SetMenuTitle("Motorcycles (Page 2)");
	CarSpawnerMenu9P22->AddStaticItem("Innovation", false, SpawnInnovation1, NULL);
	CarSpawnerMenu9P22->AddStaticItem("Nemesis", false, SpawnNemesis1, NULL);
	CarSpawnerMenu9P22->AddStaticItem("PCJ600", false, SpawnPCJ6000, NULL);
	CarSpawnerMenu9P22->AddStaticItem("Ruffian", false, SpawnRuffian1, NULL);
	CarSpawnerMenu9P22->AddStaticItem("Sanchez", false, SpawnSanchez1, NULL);
	CarSpawnerMenu9P22->AddStaticItem("Sanchez2", false, SpawnSanchez22, NULL);
	CarSpawnerMenu9P22->AddStaticItem("Sovereign", false, SpawnSovereign1, NULL);
	CarSpawnerMenu9P22->AddStaticItem("Thrust", false, SpawnThrust1, NULL);
	CarSpawnerMenu9P22->AddStaticItem("Vader", false, SpawnVader1, NULL);

	// Helicopters
	CarSpawnerMenu100->SetMenuTitle("Helicopters");
	CarSpawnerMenu100->AddStaticItem("Annihilator", false, SpawnAnnihilator1, NULL);
	CarSpawnerMenu100->AddStaticItem("Buzzard No Guns", false, SpawnBuzzard22, NULL);
	CarSpawnerMenu100->AddStaticItem("Buzzard", false, SpawnBuzzard1, NULL);
	CarSpawnerMenu100->AddStaticItem("Cargobob", false, SpawnCargobob1, NULL);
	CarSpawnerMenu100->AddStaticItem("Medic Cargobob", false, SpawnCargobob22, NULL);
	CarSpawnerMenu100->AddStaticItem("Trevors CargoBob", false, SpawnCargobob33, NULL);
	CarSpawnerMenu100->AddStaticItem("Frogger", false, SpawnFrogger1, NULL);
	CarSpawnerMenu100->AddStaticItem("FIB/Trevors Frogger", false, SpawnFrogger22, NULL);
	CarSpawnerMenu100->AddStaticItem("Maverick", false, SpawnMaverick1, NULL);
	CarSpawnerMenu100->AddStaticItem("Police Maverick", false, SpawnPMav1, NULL);
	CarSpawnerMenu100->AddStaticItem("Skylift", false, SpawnSkylift1, NULL);
	CarSpawnerMenu100->AddStaticItem("Swift", false, SpawnSwift1, NULL);

	// Planes
	CarSpawnerMenu111->SetMenuTitle("Planes");
	CarSpawnerMenu111->AddStaticItem("Blimp", false, SpawnBlimp1, NULL);
	CarSpawnerMenu111->AddStaticItem("Besra", false, SpawnBesra1, NULL);
	CarSpawnerMenu111->AddStaticItem("Cargo Plane", false, SpawnCargo1, NULL);
	CarSpawnerMenu111->AddStaticItem("Cuban 800", false, SpawnCuban8000, NULL);
	CarSpawnerMenu111->AddStaticItem("Duster", false, SpawnDuster1, NULL);
	CarSpawnerMenu111->AddStaticItem("Jumbo Jet", false, SpawnJumbo1, NULL);
	CarSpawnerMenu111->AddStaticItem("Luxor", false, SpawnLuxor1, NULL);
	CarSpawnerMenu111->AddStaticItem("Mallard", false, SpawnMallard1, NULL);
	CarSpawnerMenu111->AddStaticItem("Mammatus", false, SpawnMammatus1, NULL);
	CarSpawnerMenu111->AddStaticItem("MilJet", false, SpawnMilJet1, NULL);
	CarSpawnerMenu111->AddStaticItem("Lazer", false, SpawnLazer1, NULL);
	CarSpawnerMenu111->AddStaticItem("Shamal", false, SpawnShamal1, NULL);
	CarSpawnerMenu111->AddStaticItem("Titan", false, SpawnTitan1, NULL);
	CarSpawnerMenu111->AddStaticItem("Velum", false, SpawnVelum1, NULL);
	CarSpawnerMenu111->AddStaticItem("Vestra", false, SpawnVestra1, NULL);

	// Commercial
	CarSpawnerMenu122->SetMenuTitle("Commercial");
	//CarSpawnerMenu12->AddStaticItem("Benson", false, SpawnBenson, NULL);
	CarSpawnerMenu122->AddStaticItem("Biff", false, SpawnBiff1, NULL);
	CarSpawnerMenu122->AddStaticItem("Hauler", false, SpawnHauler1, NULL);
	CarSpawnerMenu122->AddStaticItem("Mule", false, SpawnMule1, NULL);
	CarSpawnerMenu122->AddStaticItem("Packer", false, SpawnPacker1, NULL);
	CarSpawnerMenu122->AddStaticItem("Phantom", false, SpawnPhantom1, NULL);
	CarSpawnerMenu122->AddStaticItem("Pounder", false, SpawnPounder1, NULL);
	CarSpawnerMenu122->AddStaticItem("Stockade", false, SpawnStockade1, NULL);
	CarSpawnerMenu122->AddStaticItem("Snow Stockade", false, SpawnStockadeSnow1, NULL);

	// Industrial
	CarSpawnerMenu133->SetMenuTitle("Industrial");
	CarSpawnerMenu133->AddStaticItem("Dock Handler", false, SpawnDHandler1, NULL);
	CarSpawnerMenu133->AddStaticItem("Dozer", false, SpawnDozer1, NULL);
	CarSpawnerMenu133->AddStaticItem("Dump", false, SpawnDump1, NULL);
	CarSpawnerMenu133->AddStaticItem("Flatbed", false, SpawnFlatbed1, NULL);
	CarSpawnerMenu133->AddStaticItem("Mixer", false, SpawnMixer1, NULL);
	CarSpawnerMenu133->AddStaticItem("Mixer2", false, SpawnMixer22, NULL);
	CarSpawnerMenu133->AddStaticItem("Rubble", false, SpawnRubble1, NULL);
	CarSpawnerMenu133->AddStaticItem("Tipper", false, SpawnTipper1, NULL);
	CarSpawnerMenu133->AddStaticItem("Tipper2", false, SpawnTipper22, NULL);

	// Utility
	CarSpawnerMenu144->SetMenuTitle("Utility");
	CarSpawnerMenu144->AddStaticItem("Airtug", false, SpawnAirtug1, NULL);
	CarSpawnerMenu144->AddStaticItem("Bison", false, SpawnBison1, NULL);
	CarSpawnerMenu144->AddStaticItem("Bison2", false, SpawnBison22, NULL);
	CarSpawnerMenu144->AddStaticItem("Bison3", false, SpawnBison33, NULL);
	CarSpawnerMenu144->AddStaticItem("BobcatXL", false, SpawnBobcatXL1, NULL);
	CarSpawnerMenu144->AddStaticItem("Caddy", false, SpawnCaddy1, NULL);
	CarSpawnerMenu144->AddStaticItem("Caddy2", false, SpawnCaddy22, NULL);
	CarSpawnerMenu144->AddStaticItem("Cutter", false, SpawnCutter1, NULL);
	CarSpawnerMenu144->AddStaticItem("Docktug", false, SpawnDocktug1, NULL);
	CarSpawnerMenu144->AddStaticItem("Fieldmaster", false, SpawnFieldmaster1, NULL);
	CarSpawnerMenu144->AddStaticItem("Forklift", false, SpawnForklift1, NULL);
	CarSpawnerMenu144->AddStaticItem("Lawn Mower", false, SpawnMower1, NULL);
	CarSpawnerMenu144->AddSubMenu("Page 2", CarSpawnerMenu14P22);

	// Utility Page 2
	CarSpawnerMenu14P22->SetMenuTitle("Utility (Page 2)");
	CarSpawnerMenu14P22->AddStaticItem("Ripley", false, SpawnRipley1, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Sadler", false, SpawnSadler1, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Snow Sadler", false, SpawnSadler22, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Scrap Truck", false, SpawnScrap1, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Small Tow Truck", false, SpawnTow22, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Big Tow Truck", false, SpawnTow1, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Tractor", false, SpawnTractor1, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Snow Tractor", false, SpawnTractor22, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Utility Truck", false, SpawnUtility1, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Utility Truck2", false, SpawnUtility22, NULL);
	CarSpawnerMenu14P22->AddStaticItem("Utility Truck3", false, SpawnUtility33, NULL);

	// Trailers
	CarSpawnerMenu155->SetMenuTitle("Trailers");
	CarSpawnerMenu155->AddStaticItem("Car Carrier", false, SpawnTR22, NULL);
	CarSpawnerMenu155->AddStaticItem("Marquis Trailer", false, SpawnTR33, NULL);
	CarSpawnerMenu155->AddStaticItem("Super Car Carrier", false, SpawnTR44, NULL);
	CarSpawnerMenu155->AddStaticItem("Log Trailer", false, SpawnLog1, NULL);
	CarSpawnerMenu155->AddStaticItem("Metal Trailer", false, SpawnMetal1, NULL);
	CarSpawnerMenu155->AddStaticItem("Random Ad Trailer", false, SpawnRandom1, NULL);
	CarSpawnerMenu155->AddStaticItem("Big Goods Trailer", false, SpawnBig1, NULL);
	CarSpawnerMenu155->AddStaticItem("Flatbed Trailer", false, SpawnFlat1, NULL);
	CarSpawnerMenu155->AddStaticItem("Fame Or Shame Trailer", false, SpawnFame1, NULL);
	CarSpawnerMenu155->AddStaticItem("Army Trailer", false, SpawnArmyT11, NULL);
	CarSpawnerMenu155->AddStaticItem("Army Trailer2", false, SpawnArmyT22, NULL);
	CarSpawnerMenu155->AddStaticItem("Army Trailer3", false, SpawnArmyT33, NULL);
	CarSpawnerMenu155->AddStaticItem("Boat Trailer", false, SpawnBoatT1, NULL);
	CarSpawnerMenu155->AddStaticItem("Dock Trailer", false, SpawnDockT1, NULL);
	CarSpawnerMenu155->AddStaticItem("Freight Trailer", false, SpawnFreightT1, NULL);
	CarSpawnerMenu155->AddStaticItem("Tanker Trailer", false, SpawnTanker1, NULL);
	CarSpawnerMenu155->AddStaticItem("Construction Trailer", false, SpawnConstruct1, NULL);

	// Compacts
	CarSpawnerMenu166->SetMenuTitle("Compacts");
	CarSpawnerMenu166->AddStaticItem("Blista", false, SpawnBlista1, NULL);
	CarSpawnerMenu166->AddStaticItem("Dilettante", false, SpawnDilettante1, NULL);
	CarSpawnerMenu166->AddStaticItem("Issi", false, SpawnIssi1, NULL);
	CarSpawnerMenu166->AddStaticItem("Panto", false, SpawnPanto1, NULL);
	CarSpawnerMenu166->AddStaticItem("Prairie", false, SpawnPrairie1, NULL);
	CarSpawnerMenu166->AddStaticItem("Rhapsody", false, SpawnRhapsody1, NULL);

	// Military
	CarSpawnerMenu177->SetMenuTitle("Military");
	CarSpawnerMenu177->AddStaticItem("Barracks", false, SpawnBarracks1, NULL);
	CarSpawnerMenu177->AddStaticItem("Barracks Semi", false, SpawnBarracks22, NULL);
	CarSpawnerMenu177->AddStaticItem("Crusader", false, SpawnCrusader1, NULL);
	CarSpawnerMenu177->AddStaticItem("Tank", false, SpawnTank1, NULL);

	// Service
	CarSpawnerMenu188->SetMenuTitle("Service");
	CarSpawnerMenu188->AddStaticItem("Airport Bus", false, SpawnAirportBus1, NULL);
	CarSpawnerMenu188->AddStaticItem("Bus", false, SpawnBus1, NULL);
	CarSpawnerMenu188->AddStaticItem("Dashound", false, SpawnDashound1, NULL);
	CarSpawnerMenu188->AddStaticItem("Shuttle", false, SpawnShuttle1, NULL);
	CarSpawnerMenu188->AddStaticItem("Taxi", false, SpawnTaxi1, NULL);
	CarSpawnerMenu188->AddStaticItem("Tourbus", false, SpawnTourbus1, NULL);
	CarSpawnerMenu188->AddStaticItem("Trashmaster", false, SpawnTrashmaster1, NULL);

	// Sports Classics
	CarSpawnerMenu199->SetMenuTitle("Sports Classics");
	CarSpawnerMenu199->AddStaticItem("Coquette Classic", false, SpawnCoquette22, NULL);
	CarSpawnerMenu199->AddStaticItem("JB700", false, SpawnJB7001, NULL);
	CarSpawnerMenu199->AddStaticItem("Manana", false, SpawnManana1, NULL);
	CarSpawnerMenu199->AddStaticItem("Monroe", false, SpawnMonroe1, NULL);
	CarSpawnerMenu199->AddStaticItem("Peyote", false, SpawnPeyote1, NULL);
	CarSpawnerMenu199->AddStaticItem("Pigalle", false, SpawnPigalle1, NULL);
	CarSpawnerMenu199->AddStaticItem("Roosevelt", false, SpawnBType1, NULL);
	CarSpawnerMenu199->AddStaticItem("Stinger", false, SpawnStinger1, NULL);
	CarSpawnerMenu199->AddStaticItem("StingerGT", false, SpawnStingerGTT, NULL);
	CarSpawnerMenu199->AddStaticItem("Tornado", false, SpawnTornado1, NULL);
	CarSpawnerMenu199->AddStaticItem("Tornado2", false, SpawnTornado22, NULL);
	CarSpawnerMenu199->AddStaticItem("Tornado3", false, SpawnTornado33, NULL);
	CarSpawnerMenu199->AddStaticItem("Tornado4", false, SpawnTornado44, NULL);
	CarSpawnerMenu199->AddStaticItem("ZType", false, SpawnZType1, NULL);

	// Vans
	CarSpawnerMenu200->SetMenuTitle("Vans");
	CarSpawnerMenu200->AddStaticItem("Boxville", false, SpawnBoxville1, NULL);
	CarSpawnerMenu200->AddStaticItem("Boxville2", false, SpawnBoxville22, NULL);
	CarSpawnerMenu200->AddStaticItem("Boxville3", false, SpawnBoxville33, NULL);
	CarSpawnerMenu200->AddStaticItem("Burrito", false, SpawnBurrito1, NULL);
	CarSpawnerMenu200->AddStaticItem("Burrito2", false, SpawnBurrito22, NULL);
	CarSpawnerMenu200->AddStaticItem("Burrito3", false, SpawnBurrito33, NULL);
	CarSpawnerMenu200->AddStaticItem("Burrito4", false, SpawnBurrito44, NULL);
	CarSpawnerMenu200->AddStaticItem("Snow Burrito", false, SpawnBurrito55, NULL);
	CarSpawnerMenu200->AddStaticItem("Camper", false, SpawnCamper1, NULL);
	CarSpawnerMenu200->AddStaticItem("Gang Burrito", false, SpawnGBurrito1, NULL);
	CarSpawnerMenu200->AddStaticItem("Journey", false, SpawnJourney1, NULL);
	CarSpawnerMenu200->AddSubMenu("Page 2", CarSpawnerMenu20P22);

	// Vans Page 2
	CarSpawnerMenu20P22->SetMenuTitle("Vans (Page 2)");
	CarSpawnerMenu20P22->AddStaticItem("Minivan", false, SpawnMinivan1, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Paradise", false, SpawnParadise1, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Pony", false, SpawnPony1, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Weed Van", false, SpawnWeedVan1, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Weazel News", false, SpawnRumpo1, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Deludamol", false, SpawnRumpo22, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Speedo", false, SpawnSpeedo1, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Clown Van", false, SpawnClown1, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Surfer", false, SpawnSurfer1, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Surfer2", false, SpawnSurfer22, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Taco Van", false, SpawnTacoVan1, NULL);
	CarSpawnerMenu20P22->AddStaticItem("Youga", false, SpawnYouga1, NULL);

	// Bicycles
	CarSpawnerMenu211->SetMenuTitle("Bicycles");
	CarSpawnerMenu211->AddStaticItem("BMX", false, SpawnBMX1, NULL);
	CarSpawnerMenu211->AddStaticItem("Scorcher", false, SpawnScorcher1, NULL);
	CarSpawnerMenu211->AddStaticItem("Cruiser", false, SpawnCruiser1, NULL);
	CarSpawnerMenu211->AddStaticItem("Fixter", false, SpawnFixter1, NULL);
	CarSpawnerMenu211->AddStaticItem("TriCycles", false, SpawnTriCycles1, NULL);
	CarSpawnerMenu211->AddStaticItem("Whippet", false, SpawnWhippet1, NULL);
	CarSpawnerMenu211->AddStaticItem("Endurex", false, SpawnEndurex1, NULL);

	// Boats
	CarSpawnerMenu222->SetMenuTitle("Boats");
	CarSpawnerMenu222->AddStaticItem("Jetmax", false, SpawnJetmax1, NULL);
	CarSpawnerMenu222->AddStaticItem("Marquis", false, SpawnMarquis1, NULL);
	CarSpawnerMenu222->AddStaticItem("Seashark", false, SpawnSeashark1, NULL);
	CarSpawnerMenu222->AddStaticItem("Lifeguard Seashark", false, SpawnSeasharkLG1, NULL);
	CarSpawnerMenu222->AddStaticItem("Squalo", false, SpawnSqualo1, NULL);
	CarSpawnerMenu222->AddStaticItem("Suntrap", false, SpawnSuntrap1, NULL);
	CarSpawnerMenu222->AddStaticItem("Tropic", false, SpawnTropic1, NULL);
	CarSpawnerMenu222->AddStaticItem("Speeder", false, SpawnSpeeder1, NULL);
	CarSpawnerMenu222->AddStaticItem("Police Boat", false, SpawnPredator1, NULL);
	CarSpawnerMenu222->AddStaticItem("Submersible", false, SpawnSub1, NULL);


	// Online Players
	onlinePlayers->SetMenuTitle("Players List");
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("All These Hoes", AllOnlinePlayers);

	//Scenarios
	gravopt2->AddStaticItem("Smoke Cig", false, s1, NULL);
	gravopt2->AddStaticItem("Smoke Pot", false, s2, NULL);
	gravopt2->AddStaticItem("Coffee", false, s3, NULL);
	gravopt2->AddStaticItem("Binoculars", false, s4, NULL);
	gravopt2->AddStaticItem("Cheering", false, s5, NULL);
	gravopt2->AddStaticItem("Drinking", false, s6, NULL);
	gravopt2->AddStaticItem("Drug Dealer", false, s7, NULL);
	gravopt2->AddStaticItem("Drug Dealer 2", false, s88, NULL);
	gravopt2->AddStaticItem("Leaf Blower", false, s9, NULL);
	gravopt2->AddStaticItem("Plant", false, s10, NULL);
	gravopt2->AddStaticItem("Patrol", false, s11, NULL);
	gravopt2->AddStaticItem("Hammering", false, s12, NULL);
	gravopt2->AddStaticItem("Hang Out Street", false, s13, NULL);
	gravopt2->AddStaticItem("Human Statue", false, s14, NULL);
	gravopt2->AddStaticItem("Leaning", false, s15, NULL);
	gravopt2->AddStaticItem("Maid", false, s166, NULL);
	gravopt2->AddStaticItem("Muscian", false, s17, NULL);
	gravopt2->AddSubMenu("Page 2", gravopt3);

	//Scenarios Page 2
	gravopt3->AddStaticItem("Partying", false, s18, NULL);
	gravopt3->AddStaticItem("Picnic", false, s19, NULL);
	gravopt3->AddStaticItem("Prostitute 1", false, s20, NULL);
	gravopt3->AddStaticItem("Prostitute 2", false, s21, NULL);
	gravopt3->AddStaticItem("Fishing", false, s22, NULL);
	gravopt3->AddStaticItem("Sunbathe 1", false, s23, NULL);
	gravopt3->AddStaticItem("Sunbathe 2", false, s24, NULL);
	gravopt3->AddStaticItem("Super Hero", false, s25, NULL);
	gravopt3->AddStaticItem("Swimming", false, s26, NULL);
	gravopt3->AddStaticItem("Tennis", false, s27, NULL);
	gravopt3->AddStaticItem("Welding", false, s28, NULL);
	gravopt3->AddStaticItem("Yoga", false, s29, NULL);
	gravopt3->AddStaticItem("Paparazzi", false, s30, NULL);
	gravopt3->AddStaticItem("Computer", false, s31, NULL);
	gravopt3->AddStaticItem("Stand By Fire", false, s322, NULL);
	gravopt3->AddStaticItem("Drink Beer In Char", false, s33, NULL);

	//Gravity Options
	gravopt->AddStaticItem("Level 0", false, g1, NULL);
	gravopt->AddStaticItem("Level 1", false, g2, NULL);
	gravopt->AddStaticItem("Level 2", false, g3, NULL);
	gravopt->AddStaticItem("Level 3", false, g4, NULL);

	//Misc Teleports
	RanTele->AddStaticItem("Load Cargo Ship", false, LoadCar, NULL);
	RanTele->AddStaticItem("Load Carrier", false, Airyat, NULL);
	RanTele->AddStaticItem("Load Chill House", false, LoadHouse6, NULL);
	RanTele->AddStaticItem("Load Chill House 2", false, LoadHouse7, NULL);
	RanTele->AddStaticItem("Load ClucknBell", false, cluckn, NULL);
	RanTele->AddStaticItem("Load Farm House", false, LoadHouse2, NULL);
	RanTele->AddStaticItem("Load Farm", false, LoadHouse5, NULL);
	RanTele->AddStaticItem("Load Hospital", false, LoadHouse8, NULL);
	RanTele->AddStaticItem("Load Invader Lobby", false, LoadInv, NULL);
	RanTele->AddStaticItem("Load Jewerly Heist", false, LoadJew, NULL);
	RanTele->AddStaticItem("Load Lesters factory", false, LoadHouse4, NULL);
	RanTele->AddStaticItem("Load Morgue", false, motgue, NULL);
	RanTele->AddStaticItem("Load North Yankton", false, LoadNY, NULL);
	RanTele->AddStaticItem("Load Stilt House", false, LoadHouse, NULL);
	RanTele->AddStaticItem("Load UFO 1", false, LoadHouse11, NULL);
	RanTele->AddStaticItem("Load UFO 2", false, LoadHouse12, NULL);
	RanTele->AddSubMenu("UnderWater Teleports", watermenu);
	RanTele->AddStaticItem("Load Yacht", false, Loadyat, NULL);
	RanTele->AddStaticItem("Load Yoga", false, Loadyat1, NULL);

	//UnderWater Teleports
	watermenu->SetMenuTitle("UnderWater Teleports");
	watermenu->AddStaticItem("Dead Sea Monster", false, water3, NULL);
	watermenu->AddStaticItem("Sunken Cargo Ship", false, water7, NULL);
	watermenu->AddStaticItem("Sunken Body", false, water1, NULL);
	watermenu->AddStaticItem("Sunken Plane", false, water6, NULL);
	watermenu->AddStaticItem("Underwater Hatch", false, water5, NULL);
	watermenu->AddStaticItem("Underwater UFO", false, water4, NULL);
	watermenu->AddStaticItem("Underwater WW2 Tank", false, water2, NULL);





	SecCamerasMenu->SetMenuTitle("Security Cameras");
	SecCamerasMenu->AddStaticItem("LSC Camera", true, LSCSecCam, NULL);
	SecCamerasMenu->AddStaticItem("Eclipse Tower Camera", true, EclipseSecCam, NULL);
	SecCamerasMenu->AddStaticItem("Tinsel Tower Camera", true, TinselSecCam, NULL);
	SecCamerasMenu->AddStaticItem("Beach Camera", true, BeachSecCam, NULL);
	SecCamerasMenu->AddStaticItem("Weasel Tower Camera", true, WeaselSecCam, NULL);
	SecCamerasMenu->AddStaticItem("Mt Chiliad Camera", true, MtSecCam, NULL);

	// Object Spawner
	ObjectOptions->SetMenuTitle("Object Spawner Menu");
	ObjectOptions->AddStaticItem("Spawn Weed", false, SpawnWeed, NULL);
	ObjectOptions->AddStaticItem("Spawn Tarp Body", false, SpawnBody, NULL);
	ObjectOptions->AddStaticItem("Spawn Ramp", false, SpawnRamp, NULL);
	ObjectOptions->AddStaticItem("Spawn Body Parts", false, SpawnBodyParts, NULL);
	ObjectOptions->AddStaticItem("Spawn Alien Egg", false, SpawnEgg, NULL);
	ObjectOptions->AddStaticItem("Spawn Big Asteroid", false, SpawnAsteroid, NULL);
	ObjectOptions->AddStaticItem("Spawn Big UFO", false, SpawnUfo, NULL);
	ObjectOptions->AddStaticItem("Spawn Ferris Wheel", false, SpawnFerris, NULL);
	ObjectOptions->AddStaticItem("Spawn Guard Building", false, SpawnGuardBuilding, NULL);
	ObjectOptions->AddStaticItem("Spawn Guard Building 2", false, SpawnGuardBuilding2, NULL);
	ObjectOptions->AddStaticItem("Spawn Zapper", false, SpawnElectrical, NULL);
	ObjectOptions->AddStaticItem("Spawn Shipping Container", false, SpawnContainer, NULL);
	ObjectOptions->AddStaticItem("Spawn WindMill", false, SpawnWindmill, NULL);
	ObjectOptions->AddStaticItem("Spawn Concrete Barrier Short", false, BarrierS, NULL);
	ObjectOptions->AddStaticItem("Spawn Concrete Barrier Long", false, BarrierL, NULL);
	ObjectOptions->AddSubMenu("Object Spawner Page 2", ObjectOptions3);

	ObjectOptions3->AddStaticItem("Spawn Wooden Barrier", false, WBarrier, NULL);
	ObjectOptions3->AddStaticItem("Spawn Wooden Arrow Barrier", false, AWBarrier, NULL);
	ObjectOptions3->AddStaticItem("Spawn Road Cone", false, RoadCone, NULL);
	ObjectOptions3->AddStaticItem("Spawn Big Turd", false, SpawnShit, NULL);
	ObjectOptions3->AddStaticItem("Spawn Metal Barrier", false, MBarrier, NULL);
	ObjectOptions3->AddStaticItem("Spawn Cage", false, MBarrier2, NULL);
	ObjectOptions3->AddStaticItem("Spawn Barge", false, mister1, NULL);
	ObjectOptions3->AddStaticItem("Spawn Noah Ark", false, mister2, NULL);
	ObjectOptions3->AddStaticItem("Spawn Tram", false, mister3, NULL);
	ObjectOptions3->AddStaticItem("Spawn Military Bunker", false, mister4, NULL);
	ObjectOptions3->AddStaticItem("Spawn Ladder", false, mister5, NULL);
	ObjectOptions3->AddStaticItem("Spawn Staircase", false, mister6, NULL);
	ObjectOptions3->AddStaticItem("Spawn Oil Pump", false, mister7, NULL);
	ObjectOptions3->AddStaticItem("Spawn Custom Object", false, CustomObject, NULL);
	ObjectOptions3->AddSubMenu("Map Mods", mapmods);
	//ObjectOptions3->AddStaticItem("Spawn Half Pipe", false, mister8, NULL);


	mapmods->SetMenuTitle("Map Mods");
	mapmods->AddStaticItem("Spawn Super Ramp", false, mister9, NULL);
	mapmods->AddStaticItem("Spawn Maze Ramp", false, mister99, NULL);

	Single2->SetMenuTitle("Object Movement");
	Single2->AddStaticItem("Move Object Up", false, MoveUp2, NULL);
	Single2->AddStaticItem("Move Object Down", false, MoveDown2, NULL);
	Single2->AddStaticItem("+ Y Axis", false, MoveForward2, NULL);
	Single2->AddStaticItem("- Y Axis", false, MoveBackward2, NULL);
	Single2->AddStaticItem("+ X Axis", false, MoveRight2, NULL);
	Single2->AddStaticItem("- X Axis ", false, MoveLeft2, NULL);
	Single2->AddStaticItem("+ Pitch", false, PlusPitch, NULL);
	Single2->AddStaticItem("- Pitch ", false, MinusPitch, NULL);
	Single2->AddStaticItem("+ Roll ", false, PlusRoll, NULL);
	Single2->AddStaticItem("- Roll ", false, MinusRoll, NULL);
	Single2->AddStaticItem("+ Yaw", false, HeadingLeft, NULL);
	Single2->AddStaticItem("- Yaw", false, HeadingRight, NULL);


	Toggle2->SetMenuTitle("Object Movement Toggle");
	Toggle2->AddStaticItem("Move Object Up", true, MoveUp, NULL);
	Toggle2->AddStaticItem("Move Object Down", true, MoveDown, NULL);
	Toggle2->AddStaticItem("+ Y Axis", true, MoveForward, NULL);
	Toggle2->AddStaticItem("- Y Axis", true, MoveBackward, NULL);
	Toggle2->AddStaticItem("+ X Axis", true, MoveRight, NULL);
	Toggle2->AddStaticItem("- X Axis ", true, MoveLeft, NULL);
	Toggle2->AddStaticItem("+ Yaw", true, creator180Loop, NULL);
	Toggle2->AddStaticItem("- Yaw", true, creato180Loop, NULL);
	Toggle2->AddStaticItem("Roll Loop", true, creator180Loop, NULL);
	Toggle2->AddStaticItem("Pitch Loop", true, creator360Mod, NULL);

	MovementMenu->SetMenuTitle("Object Movement");
	MovementMenu->AddStaticItem("Move Blockade Up", false, MoveBlockadeUp, NULL);
	MovementMenu->AddStaticItem("Move Blockade Down", false, MoveBlockadeDown, NULL);
	MovementMenu->AddStaticItem("Set Object Straight", false, ObjectFlat, NULL);
	MovementMenu->AddStaticItem("Freeze Entity", false, FreezeObject, NULL);
	MovementMenu->AddStaticItem("Unfreeze Object", false, UnfreezeObject, NULL);
	MovementMenu->AddStaticItem("Show Object Coords", true, ShowCoords, NULL);
	MovementMenu->AddStaticItem("Show Player Coords", true, ShowPlayerCoords, NULL);
	MovementMenu->AddStaticItem("Show Rotations", true, ShowPitch, NULL);
	MovementMenu->AddStaticItem("Show Object Hash", true, ShowObjHash, NULL);
	MovementMenu->AddStaticItem("Launch Backward", false, creatorLaunchBackward, NULL);
	MovementMenu->AddStaticItem("Launch Forward", false, creatorLaunchForward, NULL);
	MovementMenu->AddStaticItem("Launch Up", false, creatorLaunchUp, NULL);
	MovementMenu->AddSubMenu("Object Movement Single", Single2);
	MovementMenu->AddSubMenu("Object Movement Toggle", Toggle2);

	// Object Spawner Options
	ObjectOptions1->SetMenuTitle("Object Options");
	ObjectOptions1->AddStaticItem("Creator Mode", true, ToggleCreator, NULL);
	ObjectOptions1->AddStaticItem("Detach Object", false, ObjectDetach, NULL);
	ObjectOptions1->AddStaticItem("Object Cash Drop", true, ObjectCashDrop, NULL);
	ObjectOptions1->AddSubMenu("Object Spawner", ObjectOptions);
	ObjectOptions1->AddStaticItem("Copy Object", false, ObjectCopy, NULL);
	ObjectOptions1->AddSubMenu("Object Movement Menu", MovementMenu);
	ObjectOptions1->AddStaticItem("Attach To Object", true, AttachCreator1, NULL);
	ObjectOptions1->AddStaticItem("Attach Object To Car", false, AttachCreator0, NULL);
	ObjectOptions1->AddStaticItem("Set Ped Into Car", false, creatorTeleToObj2, NULL);
	ObjectOptions1->AddStaticItem("Teleport To Object", false, creatorTeleToObj, NULL);
	ObjectOptions1->AddStaticItem("Teleport Object To You", false, creatorTeleToObj2, NULL);
	ObjectOptions1->AddStaticItem("Object Invisibility", true, creatorInvisible, NULL);
	ObjectOptions1->AddStaticItem("Forcefield On Object", true, creatorFieldToggle, NULL);
	ObjectOptions1->AddStaticItem("Random Clothes For Peds", false, Random2, NULL);
	ObjectOptions1->AddSubMenu("Ped Animation Menu", Bodydancer);
	ObjectOptions1->AddStaticItem("Delete Object", false, ObjectDelete, NULL);
	ObjectOptions1->AddSubMenu("Vehicle Options", veh1);

	//Vehicle Options
	veh1->AddStaticItem("Teleport Into Vehicle", false, creatorTeleportVeh, NULL);
	veh1->AddStaticItem("Fix", false, creatorFixVeh, NULL);
	veh1->AddStaticItem("Delete", false, creatorDeleteVeh, NULL);
	veh1->AddStaticItem("Lock", false, creatorUnlock, NULL);
	veh1->AddStaticItem("Unlock", false, creatorLock, NULL);
	veh1->AddStaticItem("Set Alarm", false, creatorVehAlarm, NULL);
	veh1->AddStaticItem("Flip Upside Down", false, creatorFlipVeh, NULL);
	veh1->AddStaticItem("Pop All Tires", false, creatorPopAllTyres, NULL);
	veh1->AddStaticItem("Rotate 180 Loop Troll", true, creator180Loop3, NULL);
	veh1->AddStaticItem("Start Horn", false, creatorVehHorn, NULL);
	veh1->AddStaticItem("Smash All Windows", false, smashwindows, NULL);
	veh1->AddStaticItem("Strip Car", false, stripcar2, NULL);
	veh1->AddStaticItem("No Gravity", false, ToggleEntitiyGravity4, NULL);


	Bodydancer->SetMenuTitle("Ped Animation Menu");
	Bodydancer->AddSubMenu("Dance Animations", Poledancer);
	Bodydancer->AddSubMenu("Sport Animations", BodySport);
	Bodydancer->AddSubMenu("Sex Animations", BodySex);
	Bodydancer->AddSubMenu("Misc Animations", BodyMisc);
	Bodydancer->AddSubMenu("Mime Animations", BodyMimi);
	Bodydancer->AddSubMenu("Scenarios", Scenee);
	Bodydancer->AddStaticItem("Stop Animations", false, stop12, NULL);

	Scenee->SetMenuTitle("Scenarios");
	Scenee->AddStaticItem("Smoke Pot", false, ss2, NULL);
	Scenee->AddStaticItem("Coffee", false, ss3, NULL);
	Scenee->AddStaticItem("Binoculars", false, ss4, NULL);
	Scenee->AddStaticItem("Cheering", false, ss5, NULL);
	Scenee->AddStaticItem("Drinking", false, ss6, NULL);
	Scenee->AddStaticItem("Drug Dealer", false, ss7, NULL);
	Scenee->AddStaticItem("Drug Dealer 2", false, ss88, NULL);
	Scenee->AddStaticItem("Leaf Blower", false, ss9, NULL);
	Scenee->AddStaticItem("Plant", false, ss10, NULL);
	Scenee->AddStaticItem("Hammering", false, ss12, NULL);
	Scenee->AddStaticItem("Hang Out Street", false, ss13, NULL);
	Scenee->AddStaticItem("Human Statue", false, ss14, NULL);
	Scenee->AddStaticItem("Leaning", false, ss15, NULL);
	Scenee->AddStaticItem("Maid", false, ss166, NULL);
	Scenee->AddStaticItem("Muscian", false, ss17, NULL);
	Scenee->AddSubMenu("Page 2", Scenee2);

	//Scenarios Page 2
	Scenee2->AddStaticItem("Picnic", false, ss19, NULL);
	Scenee2->AddStaticItem("Prostitute 1", false, ss20, NULL);
	Scenee2->AddStaticItem("Prostitute 2", false, ss21, NULL);
	Scenee2->AddStaticItem("Fishing", false, ss22, NULL);
	Scenee2->AddStaticItem("Sunbathe 1", false, ss23, NULL);
	Scenee2->AddStaticItem("Sunbathe 2", false, ss24, NULL);
	Scenee2->AddStaticItem("Tennis", false, ss27, NULL);
	Scenee2->AddStaticItem("Welding", false, ss28, NULL);
	Scenee2->AddStaticItem("Yoga", false, ss29, NULL);
	Scenee2->AddStaticItem("Paparazzi", false, ss30, NULL);
	Scenee2->AddStaticItem("Stand By Fire", false, ss322, NULL);


	BodyMimi->SetMenuTitle("Mime Animations");
	BodyMimi->AddStaticItem("Wall", false, BodyMime, NULL);
	BodyMimi->AddStaticItem("Random", false, BodyMime2, NULL);
	BodyMimi->AddStaticItem("Walk", false, BodyMime3, NULL);
	BodyMimi->AddStaticItem("Run", false, BodyMime4, NULL);

	BodyMisc->SetMenuTitle("Misc Animations");
	BodyMisc->AddStaticItem("Celebrate", false, BodyCele, NULL);
	BodyMisc->AddStaticItem("Cop Kneeling Arrest", false, BodyKneel, NULL);
	BodyMisc->AddStaticItem("Booty Dance", false, BodyBooty, NULL);
	BodyMisc->AddStaticItem("Jog", false, BodyJog, NULL);
	BodyMisc->AddStaticItem("Meditating", false, BodyMedi, NULL);
	BodyMisc->AddStaticItem("Pee", false, BodyPee, NULL);
	BodyMisc->AddStaticItem("Plead", false, BodyPlead, NULL);
	BodyMisc->AddStaticItem("Sit", false, BodySit, NULL);
	BodyMisc->AddStaticItem("Swim", false, BodySwim, NULL);
	BodyMisc->AddStaticItem("Wave Arms", false, BodyWave, NULL);


	BodySex->SetMenuTitle("Sex Animations");
	BodySex->AddStaticItem("Fuck", false, BodyFuck, NULL);
	BodySex->AddStaticItem("Fuck 2", false, BodyFuck2, NULL);
	BodySex->AddStaticItem("Prostitue Male Sex", false, BodyFuck3, NULL);
	BodySex->AddStaticItem("Prostitue Female Sex", false, BodyFuck4, NULL);
	BodySex->AddStaticItem("Prostitue Male BJ", false, BodyFuck5, NULL);
	BodySex->AddStaticItem("Prostitue Female BJ", false, BodyFuck6, NULL);
	BodySex->AddStaticItem("Drunk Sex Male", false, BodyFuck7, NULL);
	BodySex->AddStaticItem("Drunk Sex Female", false, BodyFuck8, NULL);
	BodySex->AddStaticItem("Jack Off", false, BodyFuck9, NULL);


	BodySport->SetMenuTitle("Sport Animations");
	BodySport->AddStaticItem("Situps", false, BodySit1, NULL);
	BodySport->AddStaticItem("Pull Ups", false, BodyPull, NULL);
	BodySport->AddStaticItem("Push Ups", false, BodyPush, NULL);



	Bodydancer->SetMenuTitle("Dance Animations");
	Poledancer->AddStaticItem("Pole Dance 1", false, BodyDance1, NULL);
	Poledancer->AddStaticItem("Pole Dance 2", false, BodyDance2, NULL);
	Poledancer->AddStaticItem("Pole Dance 3", false, BodyDance3, NULL);
	Poledancer->AddStaticItem("Private Dance", false, BodyDance4, NULL);
	Poledancer->AddStaticItem("Tap Dance 1", false, BodyTap1, NULL);
	Poledancer->AddStaticItem("Tap Dance 2", false, BodyTap2, NULL);
	Poledancer->AddStaticItem("Tap Dance 3", false, BodyTap3, NULL);
	Poledancer->AddStaticItem("Tap Dance 4", false, BodyTap4, NULL);

	ChopAnims->SetMenuTitle("Dog Animations");
	ChopAnims->AddStaticItem("Set Model as Chop", false, ChopModel1, NULL);
	ChopAnims->AddStaticItem("Piss Right", false, ChopPiss1, NULL);
	ChopAnims->AddStaticItem("Piss Right Idle", false, ChopPiss2, NULL);
	ChopAnims->AddStaticItem("Piss Right Exit", false, ChopPiss3, NULL);
	ChopAnims->AddStaticItem("Piss Dump Loop", false, ChopDump, NULL);
	ChopAnims->AddStaticItem("Chop Attack 1", false, ChopAttack2, NULL);
	ChopAnims->AddStaticItem("Chop Attack 2", false, ChopAttack1, NULL);
	ChopAnims->AddStaticItem("Chop Sex (dog model)", false, Chop, NULL);
	ChopAnims->AddStaticItem("Chop Ladydog Sex", false, ChopF, NULL);
	ChopAnims->AddStaticItem("Chop Take A Dump", false, CopHands, NULL);
	ChopAnims->AddStaticItem("Sit", false, Ret2, NULL);
	ChopAnims->AddStaticItem("Sleep", false, Ret4, NULL);
	ChopAnims->AddStaticItem("Canter", false, Ret5, NULL);

	// Los Santos Customs
	ModShop->SetMenuTitle("Los Santos Customs");
	ModShop->AddSubMenu("Paint", VehPaintMenu);
	ModShop->AddSubMenu("RGB Colors", colorsmenu);
	ModShop->AddSubMenu("Performance", PerformanceMenu);
	ModShop->AddSubMenu("Armour", ArmourMenu);
	ModShop->AddSubMenu("Body", BodyMenu);
	ModShop->AddSubMenu("Wheels", WheelMenu);
	ModShop->AddSubMenu("Horns", HornMenu);
	ModShop->AddStaticItem("Edit License Plate", false, ChangePlate1, NULL);
	ModShop->AddSubMenu("Custome Plate Menu", PlateMenu);
	ModShop->AddSubMenu("Open/Remove Options", OpenMenu);
	ModShop->AddStaticItem("Lower Suspension", true, LowerVehicle, NULL);
	ModShop->AddSubMenu("Window Tint", TintMenu);
	ModShop->AddSubMenu("Tire Smoke", tiresmoke);
	ModShop->AddSubMenu("Neons", tiresmoke);
	ModShop->AddStaticItem("Install Max Upgrades", false, MaxLSCUpgrades, NULL);

	tiresmoke->SetMenuTitle("Tire Smoke Menu");
	tiresmoke->AddStaticItem("Red", false, Smoke0, NULL);
	tiresmoke->AddStaticItem("Green", false, Smoke1, NULL);
	tiresmoke->AddStaticItem("Blue", false, Smoke2, NULL);
	tiresmoke->AddStaticItem("Purple", false, Smoke3, NULL);
	tiresmoke->AddStaticItem("Pink", false, Smoke4, NULL);
	tiresmoke->AddStaticItem("Sky Blue", false, Smoke5, NULL);
	tiresmoke->AddStaticItem("Orange", false, Smoke6, NULL);
	tiresmoke->AddStaticItem("Yellow", false, Smoke7, NULL);
	tiresmoke->AddStaticItem("Cyan", false, Smoke8, NULL);
	tiresmoke->AddStaticItem("Patroit", false, Smoke9, NULL);
	tiresmoke->AddStaticItem("Rainbow Smoke", true, smoke11, NULL);
	tiresmoke->AddStaticItem("Custom Green", false, Smoke15, NULL);
	tiresmoke->AddStaticItem("Custom Blue", false, Smoke13, NULL);
	tiresmoke->AddStaticItem("Custom Violet", false, Smoke14, NULL);
	tiresmoke->AddStaticItem("Custom Turquoise", false, Smoke12, NULL);
	tiresmoke->AddSubMenu("Custom RGB", tiresmoke1);

	tiresmoke1->SetMenuTitle("Custom Tire Smoke");
	tiresmoke1->AddStaticItem("Custom R", false, CustomRGB426, NULL);
	tiresmoke1->AddStaticItem("Custom G", false, CustomRGB427, NULL);
	tiresmoke1->AddStaticItem("Custom B", false, CustomRGB428, NULL);

	PlateMenu->SetMenuTitle("Custom Plate Menu");
	PlateMenu->AddStaticItem("THEMAKER", false, License1, NULL);
	PlateMenu->AddStaticItem("SERENITY", false, License3, NULL);
	PlateMenu->AddStaticItem("EXTFORUM", false, License2, NULL);

	//Horn Menu
	HornMenu->SetMenuTitle("Horn Menu");
	HornMenu->AddStaticItem("Stock Horn", false, StockHorn, NULL);
	HornMenu->AddStaticItem("Truck Horn", false, Horn0, NULL);
	HornMenu->AddStaticItem("Police Horn", false, Horn1, NULL);
	HornMenu->AddStaticItem("Clown Horn", false, Horn2, NULL);
	HornMenu->AddStaticItem("Musical Horn 1", false, Horn3, NULL);
	HornMenu->AddStaticItem("Musical Horn 2", false, Horn4, NULL);
	HornMenu->AddStaticItem("Musical Horn 3", false, Horn5, NULL);
	HornMenu->AddStaticItem("Musical Horn 4", false, Horn6, NULL);
	HornMenu->AddStaticItem("Musical Horn 5", false, Horn7, NULL);
	HornMenu->AddStaticItem("Classical Horn 1", false, Horn8, NULL);
	HornMenu->AddStaticItem("Classical Horn 2", false, Horn9, NULL);
	HornMenu->AddSubMenu("Page 2", HornMenu2);

	//Horn Menu Page 2
	HornMenu2->SetMenuTitle("Horn Menu (Page 2)");
	HornMenu2->AddStaticItem("Classical Horn 3", false, Horn10, NULL);
	HornMenu2->AddStaticItem("Classical Horn 4", false, Horn11, NULL);
	HornMenu2->AddStaticItem("Classical Horn 5", false, Horn12, NULL);
	HornMenu2->AddStaticItem("Classical Horn 6", false, Horn13, NULL);
	HornMenu2->AddStaticItem("Classical Horn 7", false, Horn14, NULL);
	HornMenu2->AddStaticItem("Scale Do", false, Horn15, NULL);
	HornMenu2->AddStaticItem("Scale Re", false, Horn16, NULL);
	HornMenu2->AddStaticItem("Scale Mi", false, Horn17, NULL);
	HornMenu2->AddStaticItem("Scale Fa", false, Horn18, NULL);
	HornMenu2->AddStaticItem("Scale Sol", false, Horn19, NULL);
	HornMenu2->AddSubMenu("Page 3", HornMenu3);

	//Horn Menu Page 3
	HornMenu3->SetMenuTitle("Horn Menu (Page 3)");
	HornMenu3->AddStaticItem("Scale La", false, Horn20, NULL);
	HornMenu3->AddStaticItem("Scale Ti", false, Horn21, NULL);
	HornMenu3->AddStaticItem("Scale Do High", false, Horn22, NULL);
	HornMenu3->AddStaticItem("Jazz Horn 1", false, Horn23, NULL);
	HornMenu3->AddStaticItem("Jazz Horn 2", false, Horn24, NULL);
	HornMenu3->AddStaticItem("Jazz Horn 3", false, Horn25, NULL);
	HornMenu3->AddStaticItem("Jazz Horn Loop", false, Horn26, NULL);
	HornMenu3->AddStaticItem("Star Spangled Banner 1", false, Horn27, NULL);
	HornMenu3->AddStaticItem("Star Spangled Banner 2", false, Horn28, NULL);
	HornMenu3->AddStaticItem("Star Spangled Banner 3", false, Horn29, NULL);
	HornMenu3->AddStaticItem("Star Spangled Banner 4", false, Horn30, NULL);

	//Tint Menu
	TintMenu->SetMenuTitle("Window Tint");
	TintMenu->AddStaticItem("No Tint", false, Tint0, NULL);
	TintMenu->AddStaticItem("Light Tint", false, Tint1, NULL);
	TintMenu->AddStaticItem("Dark Tint", false, Tint2, NULL);
	TintMenu->AddStaticItem("Limo Tint", false, Tint4, NULL);
	TintMenu->AddStaticItem("Black Tint", false, Tint3, NULL);
	TintMenu->AddStaticItem("Green Tint", false, Tint5, NULL);

	//Open Menu
	OpenMenu->SetMenuTitle("Open/Remove Options");
	OpenMenu->AddStaticItem("Open Drivers Door", false, OpenDoor0, NULL);
	OpenMenu->AddStaticItem("Remove Drivers Door", false, RemoveDFDoor, NULL);
	OpenMenu->AddStaticItem("Open Passengers Door", false, OpenDoor1, NULL);
	OpenMenu->AddStaticItem("Remove Passengers Door", false, RemovePFDoor, NULL);
	OpenMenu->AddStaticItem("Open Drivers Rear Door", false, OpenDoor2, NULL);
	OpenMenu->AddStaticItem("Remove Drivers Rear Door", false, RemoveDRDoor, NULL);
	OpenMenu->AddStaticItem("Open Passengers Rear Door", false, OpenDoor3, NULL);
	OpenMenu->AddStaticItem("Remove Passengers Rear Door", false, RemovePRDoor, NULL);
	OpenMenu->AddStaticItem("Open Hood", false, OpenDoor4, NULL);
	OpenMenu->AddStaticItem("Remove Hood", false, RemoveHood, NULL);
	OpenMenu->AddStaticItem("Open Boot", false, OpenDoor5, NULL);
	OpenMenu->AddStaticItem("Remove All Doors Hood & Boot", false, RemoveEverything, NULL);

	//Armour Menu
	ArmourMenu->SetMenuTitle("Armour Upgrades");
	ArmourMenu->AddStaticItem("None", false, NoArmour, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 20%", false, Armour0, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 40%", false, Armour1, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 60%", false, Armour2, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 80%", false, Armour3, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 100%", false, Armour4, NULL);

	// Body Menu
	BodyMenu->SetMenuTitle("Body Upgrades");
	BodyMenu->AddSubMenu("Front Bumbers", FbMenu);
	BodyMenu->AddSubMenu("Rear Bumpers", RbMenu);
	BodyMenu->AddSubMenu("Side Skirts", SkMenu);
	BodyMenu->AddSubMenu("Interiors/Chassis", InteriorMenu);
	BodyMenu->AddSubMenu("Hoods", HoodMenu);
	BodyMenu->AddSubMenu("Left Fenders", LFenderMenu);
	BodyMenu->AddSubMenu("Right Fenders", RFenderMenu);
	BodyMenu->AddSubMenu("Roofs", RoofMenu);
	BodyMenu->AddSubMenu("Spoilers", SpoilerMenu);
	BodyMenu->AddSubMenu("Grills", GrillMenu);

	// front bumpers
	FbMenu->SetMenuTitle("Front Bumper Upgrades");
	FbMenu->AddStaticItem("Stock Front Bumper", false, StockFb, NULL);
	FbMenu->AddStaticItem("Front Bumper 1", false, Fb0, NULL);
	FbMenu->AddStaticItem("Front Bumper 2", false, Fb1, NULL);
	FbMenu->AddStaticItem("Front Bumper 3", false, Fb2, NULL);
	FbMenu->AddStaticItem("Front Bumper 4", false, Fb3, NULL);
	FbMenu->AddStaticItem("Front Bumper 5", false, Fb4, NULL);
	FbMenu->AddStaticItem("Front Bumper 6", false, Fb5, NULL);

	// rear bumpers
	RbMenu->SetMenuTitle("Rear Bumper Upgrades");
	RbMenu->AddStaticItem("Stock Rear Bumper", false, StockRb, NULL);
	RbMenu->AddStaticItem("Rear Bumper 1", false, Rb0, NULL);
	RbMenu->AddStaticItem("Rear Bumper 2", false, Rb1, NULL);
	RbMenu->AddStaticItem("Rear Bumper 3", false, Rb2, NULL);
	RbMenu->AddStaticItem("Rear Bumper 4", false, Rb3, NULL);

	// spoilers
	SpoilerMenu->SetMenuTitle("Spoiler Upgrades");
	SpoilerMenu->AddStaticItem("Stock Spoiler", false, StockSpoiler, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 1", false, Spoiler0, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 2", false, Spoiler1, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 3", false, Spoiler2, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 4", false, Spoiler3, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 5", false, Spoiler4, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 6", false, Spoiler5, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 7", false, Spoiler6, NULL);

	// side skirts
	SkMenu->SetMenuTitle("Side Skirts Upgrades");
	SkMenu->AddStaticItem("Stock Side Skirts", false, StockSk, NULL);
	SkMenu->AddStaticItem("Side Skirts 1", false, Sk0, NULL);
	SkMenu->AddStaticItem("Side Skirts 2", false, Sk1, NULL);
	SkMenu->AddStaticItem("Side Skirts 3", false, Sk2, NULL);
	SkMenu->AddStaticItem("Side Skirts 4", false, Sk3, NULL);

	// interiors
	InteriorMenu->SetMenuTitle("Interior Upgrades");
	InteriorMenu->AddStaticItem("Stock Interior/Chassis", false, StockInterior, NULL);
	InteriorMenu->AddStaticItem("Interior/Chassis 1", false, Interior0, NULL);
	InteriorMenu->AddStaticItem("Interior/Chassis 2", false, Interior1, NULL);
	InteriorMenu->AddStaticItem("Interior/Chassis 3", false, Interior2, NULL);
	InteriorMenu->AddStaticItem("Interior/Chassis 4", false, Interior3, NULL);

	// hoods 
	HoodMenu->SetMenuTitle("Hood Upgrades");
	HoodMenu->AddStaticItem("Stock Hood", false, StockHood, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 1", false, Hood0, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 2", false, Hood1, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 3", false, Hood2, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 4", false, Hood3, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 5", false, Hood4, NULL);

	// left fenders
	LFenderMenu->SetMenuTitle("Left Fender Upgrades");
	LFenderMenu->AddStaticItem("Stock Left Fender", false, StockLFender, NULL);
	LFenderMenu->AddStaticItem("Left Fender Upgrade 1", false, LFender0, NULL);
	LFenderMenu->AddStaticItem("Left Fender Upgrade 2", false, LFender1, NULL);
	LFenderMenu->AddStaticItem("Left Fender Upgrade 3", false, LFender2, NULL);

	// right fenders
	RFenderMenu->SetMenuTitle("Right Fender Upgrades");
	RFenderMenu->AddStaticItem("Stock Right Fender", false, StockRFender, NULL);
	RFenderMenu->AddStaticItem("Right Fender Upgrade 1", false, RFender0, NULL);
	RFenderMenu->AddStaticItem("Right Fender Upgrade 2", false, RFender1, NULL);
	RFenderMenu->AddStaticItem("Right Fender Upgrade 3", false, RFender2, NULL);

	// roofs 
	RoofMenu->SetMenuTitle("Roof Upgrades");
	RoofMenu->AddStaticItem("Stock Roof", false, StockRoof, NULL);
	RoofMenu->AddStaticItem("Roof Upgrade 1", false, Roof0, NULL);
	RoofMenu->AddStaticItem("Roof Upgrade 2", false, Roof1, NULL);
	RoofMenu->AddStaticItem("Roof Upgrade 3", false, Roof2, NULL);
	RoofMenu->AddStaticItem("Roof Upgrade 4", false, Roof3, NULL);

	// grills 
	GrillMenu->SetMenuTitle("Grille Upgrades");
	GrillMenu->AddStaticItem("Stock Grille", false, StockGrill, NULL);
	GrillMenu->AddStaticItem("Grille Upgrade 1", false, Grill0, NULL);
	GrillMenu->AddStaticItem("Grille Upgrade 2", false, Grill1, NULL);
	GrillMenu->AddStaticItem("Grille Upgrade 3", false, Grill2, NULL);
	GrillMenu->AddStaticItem("Grille Upgrade 4", false, Grill3, NULL);

	// performance menu
	PerformanceMenu->SetMenuTitle("Performance Upgrades");
	PerformanceMenu->AddSubMenu("Engine", EngineMenu);
	PerformanceMenu->AddSubMenu("Transmission", TransMenu);
	PerformanceMenu->AddSubMenu("Brakes", BrakesMenu);
	PerformanceMenu->AddSubMenu("Suspension", SuspMenu);
	PerformanceMenu->AddSubMenu("Exhaust", ExMenu);
	PerformanceMenu->AddStaticItem("Turbo", true, TurboToggle, NULL);

	// engine menu
	EngineMenu->SetMenuTitle("Engine Upgrades");
	EngineMenu->AddStaticItem("Stock Engine", false, EngineStock, NULL);
	EngineMenu->AddStaticItem("Engine Upgrade 1", false, Engine0, NULL);
	EngineMenu->AddStaticItem("Engine Upgrade 2", false, Engine1, NULL);
	EngineMenu->AddStaticItem("Engine Upgrade 3", false, Engine2, NULL);
	EngineMenu->AddStaticItem("Engine Upgrade 4", false, Engine3, NULL);
#ifdef PRIVATE
	EngineMenu->AddStaticItem("Custom Engine", false, TogglePerf, NULL);
#endif

	// trans menu
	TransMenu->SetMenuTitle("Transmission Upgrades");
	TransMenu->AddStaticItem("Stock Transmission", false, TranStock, NULL);
	TransMenu->AddStaticItem("Street Transmission", false, Tran0, NULL);
	TransMenu->AddStaticItem("Sports Transmission", false, Tran1, NULL);
	TransMenu->AddStaticItem("Race Transmission", false, Tran2, NULL);

	// brakes menu
	BrakesMenu->SetMenuTitle("Brake Upgrades");
	BrakesMenu->AddStaticItem("Stock Brakes", false, BrakeStock, NULL);
	BrakesMenu->AddStaticItem("Street Brakes", false, Brake0, NULL);
	BrakesMenu->AddStaticItem("Sports Brakes", false, Brake1, NULL);
	BrakesMenu->AddStaticItem("Race Brakes", false, Brake2, NULL);

	// suspension menu
	SuspMenu->SetMenuTitle("Suspension Upgrades");
	SuspMenu->AddStaticItem("Stock Suspension", false, SuspStock, NULL);
	SuspMenu->AddStaticItem("Lowered Suspension", false, Susp0, NULL);
	SuspMenu->AddStaticItem("Street Suspension", false, Susp1, NULL);
	SuspMenu->AddStaticItem("Sports Suspension", false, Susp2, NULL);
	SuspMenu->AddStaticItem("Competition Suspension", false, Susp3, NULL);

	// suspension menu
	ExMenu->SetMenuTitle("Exhaust Upgrades");
	ExMenu->AddStaticItem("Stock Exhaust", false, ExStock, NULL);
	ExMenu->AddStaticItem("Exhaust 1", false, Ex0, NULL);
	ExMenu->AddStaticItem("Exhaust 2", false, Ex1, NULL);
	ExMenu->AddStaticItem("Exhaust 3", false, Ex2, NULL);
	ExMenu->AddStaticItem("Exhaust 4", false, Ex3, NULL);


	// wheel menu
	WheelMenu->SetMenuTitle("Wheel Upgrades");
	WheelMenu->AddStaticItem("Stock Tires", false, StockTyres, NULL);
	WheelMenu->AddStaticItem("Stock Wheels", false, StockWheels, NULL);
	WheelMenu->AddStaticItem("Custom Tires", false, CustomTyres, NULL);
	WheelMenu->AddStaticItem("Bulletproof Tires", false, BpTyres, NULL);
	WheelMenu->AddSubMenu("High End", HighEnd);
	WheelMenu->AddSubMenu("Lowrider", Lowrider);
	WheelMenu->AddSubMenu("Muscle", Muscle);
	WheelMenu->AddSubMenu("Offroad", Offroad);
	WheelMenu->AddSubMenu("Sport", Sport);

	WheelMenu->AddSubMenu("SUV", SUV);
	WheelMenu->AddSubMenu("Tuner", Tuner);


	MoneyOptions->SetMenuTitle("Money Options");
	MoneyOptions->AddStaticItem("LS Customs Teleport", false, LSTeleport, NULL);
	MoneyOptions->AddStaticItem("LS Customs Drop", true, LS3, NULL);
	MoneyOptions->AddStaticItem("LS Pumpkin 1", false, Pumpl1, NULL);
	MoneyOptions->AddStaticItem("LS Pumpkin 2", false, Pumpl2, NULL);
	MoneyOptions->AddStaticItem("LS Pumpkin 3", false, Pumpl3, NULL);
	MoneyOptions->AddStaticItem("Pumpkin Drop 1", true, LS1, NULL);
	MoneyOptions->AddStaticItem("Pumpkin Drop 2", true, LS2, NULL);
	MoneyOptions->AddStaticItem("Pumpkin Drop 3", true, LS4, NULL);
	MoneyOptions->AddStaticItem("Mountain Teleport", false, MountTele, NULL);
	MoneyOptions->AddStaticItem("Mountain Money Drop 1", true, Mount, NULL);
	MoneyOptions->AddStaticItem("Mountain Money Drop 2", true, Mount2, NULL);
	MoneyOptions->AddStaticItem("Mountain Money Drop 3", true, Mount3, NULL);
	MoneyOptions->AddStaticItem("Mountain Money Drop 4", true, Mount4, NULL);
	MoneyOptions->AddStaticItem("Teleport HeliPad", false, HeliPadTele, NULL);
	MoneyOptions->AddStaticItem("Helipad Drop", true, HeliPadDrop, NULL);
	MoneyOptions->AddSubMenu("Page 2", MiscOption2Pag2);

	MiscOption2Pag2->SetMenuTitle("Misc Money Page 2");
	MiscOption2Pag2->AddStaticItem("Tee Pee Teleport", false, Teepeetele, NULL);
	MiscOption2Pag2->AddStaticItem("Tee Pee Drop", true, TeePee, NULL);
	MiscOption2Pag2->AddStaticItem("Airport Hangar Teleport", false, Hanger2, NULL);
	MiscOption2Pag2->AddStaticItem("Airport Hangar Drop", true, Hanger1, NULL);
	MiscOption2Pag2->AddStaticItem("Bank Vault Teleport", false, TeleVault, NULL);
	MiscOption2Pag2->AddStaticItem("Bank Vault Drop", true, Vault1, NULL);
	MiscOption2Pag2->AddStaticItem("Maze Bank Teleport", false, TeleMazeBank, NULL);
	MiscOption2Pag2->AddStaticItem("Maze Bank Drop", true, MazeBankDrop, NULL);

	// high end 
	HighEnd->SetMenuTitle("High End Wheels");
	HighEnd->AddStaticItem("GT Chrome", false, HighEnd8, NULL);
	HighEnd->AddStaticItem("Cheetah RR", false, HighEnd9, NULL);
	HighEnd->AddStaticItem("Shadow", false, HighEnd0, NULL);
	HighEnd->AddStaticItem("Hypher", false, HighEnd1, NULL);
	HighEnd->AddStaticItem("Blade", false, HighEnd2, NULL);
	HighEnd->AddStaticItem("Diamond", false, HighEnd3, NULL);
	HighEnd->AddStaticItem("Supa Gee", false, HighEnd4, NULL);
	HighEnd->AddStaticItem("Chromatic Z", false, HighEnd5, NULL);
	HighEnd->AddStaticItem("Merchie Ch.Lip", false, HighEnd6, NULL);
	HighEnd->AddStaticItem("Obey RS", false, HighEnd7, NULL);
	HighEnd->AddStaticItem("Solar", false, HighEnd10, NULL);
	HighEnd->AddStaticItem("Split Ten", false, HighEnd11, NULL);
	HighEnd->AddStaticItem("Dash VIP", false, HighEnd12, NULL);
	HighEnd->AddStaticItem("LozSpeed Ten", false, HighEnd13, NULL);
	HighEnd->AddStaticItem("Carbon Inferno", false, HighEnd14, NULL);
	HighEnd->AddStaticItem("Carbon Shadow", false, HighEnd15, NULL);
	HighEnd->AddStaticItem("Carbonic Z", false, HighEnd16, NULL);
	HighEnd->AddStaticItem("Carbon Solar", false, HighEnd17, NULL);
	HighEnd->AddSubMenu("Page 2", HighEnd42);

	HighEnd42->AddStaticItem("Cheetah Cobra R", false, HighEnd18, NULL);
	HighEnd42->AddStaticItem("Carbon S Racer", false, HighEnd19, NULL);

	// lowrider wheels
	Lowrider->SetMenuTitle("Lowrider Wheels");
	Lowrider->AddStaticItem("Flare", false, Lowrider0, NULL);
	Lowrider->AddStaticItem("Wired", false, Lowrider1, NULL);
	Lowrider->AddStaticItem("Triple Golds", false, Lowrider2, NULL);
	Lowrider->AddStaticItem("Big Worm", false, Lowrider3, NULL);
	Lowrider->AddStaticItem("Seven Fives", false, Lowrider4, NULL);
	Lowrider->AddStaticItem("Split Six", false, Lowrider5, NULL);
	Lowrider->AddStaticItem("Fresh Mesh", false, Lowrider6, NULL);
	Lowrider->AddStaticItem("Lead Sled", false, Lowrider7, NULL);
	Lowrider->AddStaticItem("Turbine", false, Lowrider8, NULL);
	Lowrider->AddStaticItem("Super Fin", false, Lowrider9, NULL);
	Lowrider->AddStaticItem("Classic Rod", false, Lowrider10, NULL);
	Lowrider->AddStaticItem("Dollar", false, Lowrider11, NULL);
	Lowrider->AddStaticItem("Dukes", false, Lowrider12, NULL);
	Lowrider->AddStaticItem("Low Five", false, Lowrider13, NULL);
	Lowrider->AddStaticItem("Gooch", false, Lowrider14, NULL);

	//Muscle 
	Muscle->SetMenuTitle("Muscle Wheels");
	Muscle->AddStaticItem("Classic Five", false, Muscle0, NULL);
	Muscle->AddStaticItem("Dukes", false, Muscle1, NULL);
	Muscle->AddStaticItem("Muscle Freak", false, Muscle2, NULL);
	Muscle->AddStaticItem("Kracka", false, Muscle3, NULL);
	Muscle->AddStaticItem("Azreal", false, Muscle4, NULL);
	Muscle->AddStaticItem("Mecha", false, Muscle5, NULL);
	Muscle->AddStaticItem("Black Top", false, Muscle6, NULL);
	Muscle->AddStaticItem("Drag SPL", false, Muscle7, NULL);
	Muscle->AddStaticItem("Revolver", false, Muscle8, NULL);
	Muscle->AddStaticItem("Classic Rod", false, Muscle9, NULL);
	Muscle->AddStaticItem("Fairlie", false, Muscle10, NULL);
	Muscle->AddStaticItem("Spooner", false, Muscle11, NULL);
	Muscle->AddStaticItem("Five Star", false, Muscle12, NULL);
	Muscle->AddStaticItem("Old School", false, Muscle13, NULL);
	Muscle->AddStaticItem("El Jefe", false, Muscle14, NULL);
	Muscle->AddStaticItem("Dodman", false, Muscle15, NULL);
	Muscle->AddStaticItem("Six Gun", false, Muscle16, NULL);
	Muscle->AddStaticItem("Mercenary", false, Muscle17, NULL);

	//Offroad 
	Offroad->SetMenuTitle("Offroad Wheels");
	Offroad->AddStaticItem("Raider", false, Offroad0, NULL);
	Offroad->AddStaticItem("Mudslinger", false, Offroad1, NULL);
	Offroad->AddStaticItem("Nevis", false, Offroad2, NULL);
	Offroad->AddStaticItem("Cairngorm", false, Offroad3, NULL);
	Offroad->AddStaticItem("Amazon", false, Offroad4, NULL);
	Offroad->AddStaticItem("Challenger", false, Offroad5, NULL);
	Offroad->AddStaticItem("Dune Basher", false, Offroad6, NULL);
	Offroad->AddStaticItem("Five Star", false, Offroad7, NULL);
	Offroad->AddStaticItem("Rock Crawler", false, Offroad8, NULL);
	Offroad->AddStaticItem("Mil Spec Steelie", false, Offroad9, NULL);

	// sport wheels

	Sport->SetMenuTitle("Sports Wheels");
	Sport->AddStaticItem("Inferno", false, Sport0, NULL);
	Sport->AddStaticItem("Deep Five", false, Sport1, NULL);
	Sport->AddStaticItem("Lozspeed Mk.V", false, Sport2, NULL);
	Sport->AddStaticItem("Diamond Cut", false, Sport3, NULL);
	Sport->AddStaticItem("Chrono", false, Sport4, NULL);
	Sport->AddStaticItem("Feroci RR", false, Sport5, NULL);
	Sport->AddStaticItem("FiftyNine", false, Sport6, NULL);
	Sport->AddStaticItem("Mercie", false, Sport7, NULL);
	Sport->AddStaticItem("Synthetic Z", false, Sport8, NULL);
	Sport->AddStaticItem("Organic Type 0", false, Sport9, NULL);
	Sport->AddStaticItem("Endo v.1", false, Sport10, NULL);
	Sport->AddStaticItem("GT One", false, Sport11, NULL);
	Sport->AddStaticItem("Duper 7", false, Sport12, NULL);
	Sport->AddStaticItem("Uzer", false, Sport13, NULL);
	Sport->AddStaticItem("Groundride", false, Sport14, NULL);
	Sport->AddStaticItem("S Racer", false, Sport15, NULL);
	Sport->AddStaticItem("Venum", false, Sport16, NULL);
	Sport->AddStaticItem("Cosmo", false, Sport17, NULL);
	Sport->AddSubMenu("Sports Page 2", SportMenu2);

	SportMenu2->SetMenuTitle("Sports Wheels Page 2");
	SportMenu2->AddStaticItem("Dash VIP", false, Sport18, NULL);
	SportMenu2->AddStaticItem("Ice Kid", false, Sport19, NULL);
	SportMenu2->AddStaticItem("Ruff Weld", false, Sport20, NULL);
	SportMenu2->AddStaticItem("Wangan Master", false, Sport21, NULL);
	SportMenu2->AddStaticItem("Super Five", false, Sport22, NULL);
	SportMenu2->AddStaticItem("Endo v.2", false, Sport23, NULL);
	SportMenu2->AddStaticItem("Split Six", false, Sport24, NULL);

	// SUV

	SUV->SetMenuTitle("SUV Wheels");
	SUV->AddStaticItem("VIP", false, SUV0, NULL);
	SUV->AddStaticItem("Benefactor", false, SUV1, NULL);
	SUV->AddStaticItem("Cosmo", false, SUV2, NULL);
	SUV->AddStaticItem("Bippu", false, SUV3, NULL);
	SUV->AddStaticItem("Royal Six", false, SUV4, NULL);
	SUV->AddStaticItem("Fagorme", false, SUV5, NULL);
	SUV->AddStaticItem("Deluxe", false, SUV6, NULL);
	SUV->AddStaticItem("Iced Out", false, SUV7, NULL);
	SUV->AddStaticItem("Congoscenti", false, SUV8, NULL);
	SUV->AddStaticItem("Lozspeed Ten", false, SUV9, NULL);
	SUV->AddStaticItem("Supernova", false, SUV10, NULL);
	SUV->AddStaticItem("Obey RS", false, SUV11, NULL);
	SUV->AddStaticItem("Lozspeed Baller", false, SUV12, NULL);
	SUV->AddStaticItem("Extravaganzo", false, SUV13, NULL);
	SUV->AddStaticItem("Split Six", false, SUV14, NULL);
	SUV->AddStaticItem("Empowered", false, SUV15, NULL);
	SUV->AddStaticItem("Sunrise", false, SUV16, NULL);
	SUV->AddStaticItem("Dash VIP", false, SUV17, NULL);
	SUV->AddStaticItem("Cutter", false, SUV18, NULL);

	//tuner wheels

	Tuner->SetMenuTitle("Tuner Wheels");
	Tuner->AddStaticItem("Cosmo", false, Tuner0, NULL);
	Tuner->AddStaticItem("Super Mesh", false, Tuner1, NULL);
	Tuner->AddStaticItem("Outsider", false, Tuner2, NULL);
	Tuner->AddStaticItem("Rollas", false, Tuner3, NULL);
	Tuner->AddStaticItem("Driftmeister", false, Tuner4, NULL);
	Tuner->AddStaticItem("Slicer", false, Tuner5, NULL);
	Tuner->AddStaticItem("El Quatro", false, Tuner6, NULL);
	Tuner->AddStaticItem("Dubbed", false, Tuner7, NULL);
	Tuner->AddStaticItem("Five Star", false, Tuner8, NULL);
	Tuner->AddStaticItem("Sideways", false, Tuner9, NULL);
	Tuner->AddStaticItem("Apex", false, Tuner10, NULL);
	Tuner->AddStaticItem("Stanced EG", false, Tuner11, NULL);
	Tuner->AddStaticItem("Countersteer", false, Tuner12, NULL);
	Tuner->AddStaticItem("Endo v.1", false, Tuner13, NULL);
	Tuner->AddSubMenu("Sports Page 2", TunerMenu2);


	TunerMenu2->AddStaticItem("Endo v.2 Dish", false, Tuner14, NULL);
	TunerMenu2->AddStaticItem("Gruppe Z", false, Tuner15, NULL);
	TunerMenu2->AddStaticItem("Choku-Dori", false, Tuner16, NULL);
	TunerMenu2->AddStaticItem("Chicane", false, Tuner17, NULL);
	TunerMenu2->AddStaticItem("Saisoku", false, Tuner18, NULL);
	TunerMenu2->AddStaticItem("Dished Eight", false, Tuner19, NULL);
	TunerMenu2->SetMenuTitle("Tuner Wheels Page 2");
	TunerMenu2->AddStaticItem("Fujiwara", false, Tuner20, NULL);
	TunerMenu2->AddStaticItem("Zokusha", false, Tuner21, NULL);
	TunerMenu2->AddStaticItem("Battle Vlll", false, Tuner22, NULL);
	TunerMenu2->AddStaticItem("Rally Master", false, Tuner23, NULL);

	Weather->SetMenuTitle("Weather Shit");
	Weather->AddStaticItem("Blizzard", false, Weather0, NULL);
	Weather->AddStaticItem("Thunder Strike", false, Weather15, NULL);
	Weather->AddStaticItem("Clear", false, Weather1, NULL);
	Weather->AddStaticItem("Clearing", false, Weather2, NULL);
	Weather->AddStaticItem("Clouds", false, Weather3, NULL);
	Weather->AddStaticItem("Extra Sunny", false, Weather4, NULL);
	Weather->AddStaticItem("Foggy", false, Weather5, NULL);
	Weather->AddStaticItem("Hulk Weather", false, Weather6, NULL);
	Weather->AddStaticItem("Overcast", false, Weather7, NULL);
	Weather->AddStaticItem("Rain", false, Weather8, NULL);
	Weather->AddStaticItem("Smog", false, Weather9, NULL);
	Weather->AddStaticItem("Snow", true, togglesnows, NULL);
	Weather->AddStaticItem("Snow Light", false, Weather11, NULL);
	Weather->AddStaticItem("Thunder", false, Weather12, NULL);
	Weather->AddStaticItem("+ Hour", false, Weather13, NULL);
	Weather->AddStaticItem("- Hour", false, Weather14, NULL);

	fxmenu->SetMenuTitle("FX Menu");
	fxmenu->AddStaticItem("Alien Vision", true, screenfx0, NULL);
	fxmenu->AddStaticItem("Taze Vision", true, screenfx1, NULL);
	fxmenu->AddStaticItem("Clown Vision", true, screenfx2, NULL);
	fxmenu->AddStaticItem("Chop Vision", true, screenfx3, NULL);
	fxmenu->AddStaticItem("End Vision", true, screenfx4, NULL);


	Recovery->SetMenuTitle("Recovery Menu");
	Recovery->AddSubMenu("Character 1", Character1);
	Recovery->AddSubMenu("Character 2", Character2);
	Recovery->AddSubMenu("KD Menu", KDMP0);
	Recovery->AddSubMenu("Modded Outfits", outfitsmenu);
	Recovery->AddSubMenu("Outfits Maker", PropCustom0);
	Recovery->AddStaticItem("All Achievements", false, ClearCheating1, NULL);
	Recovery->AddStaticItem("Clear Reports/Cheating", false, ClearCheating, NULL);

	outfitsmenu->SetMenuTitle("OutFits");
	outfitsmenu->AddSubMenu("Male", male);
	outfitsmenu->AddSubMenu("Female", female);

	//Female Menu
	female->SetMenuTitle("Female Menu");
	female->AddStaticItem("Cop Outfit", false, girl1, NULL);
	female->AddStaticItem("Santa Outfit", false, girl2, NULL);
	female->AddStaticItem("Elf Outfit", false, girl3, NULL);
	female->AddStaticItem("Naked Outfit", false, girl4, NULL);
	female->AddStaticItem("Invisible Outfit", false, girl5, NULL);

	//Male Menu
	male->SetMenuTitle("Male Menu");
	male->AddStaticItem("Cop Outfit", false, PoliceUniform1, NULL);
	male->AddStaticItem("Santa Outfit", false, PoliceUniform4, NULL);
	male->AddStaticItem("Invisible Outfit", false, PoliceUniform2, NULL);
	male->AddStaticItem("Random Outfit", false, PoliceUniform3, NULL);
	male->AddStaticItem("Elf Outfit", false, PoliceUniform, NULL);

	Character1->SetMenuTitle("Character 1");
	Character1->AddSubMenu("Rank Menu", RankMenuMP0);
	Character1->AddStaticItem("Give 10 Mil", false, Give1Mil, NULL);
	Character1->AddStaticItem("Unlock All", false, UnlockAllMP0, NULL);
	Character1->AddStaticItem("Unlock Heists Vehicles", false, HeistsVehiclesCharacter1, NULL);
	Character1->AddStaticItem("Unlock All Clothes", false, ClothesCharacter1, NULL);
	Character1->AddStaticItem("Max Snacks", false, MaxSnacks, NULL);
	Character1->AddStaticItem("Max Armours", false, MaxArmors, NULL);
	Character1->AddStaticItem("Max FireWorks", false, MaxWorks, NULL);
	Character1->AddStaticItem("Purchase All Weapons", false, WeaponsChar1, NULL);
	Character1->AddStaticItem("Unlock All Hairstyles", false, Hair1, NULL);
	Character1->AddStaticItem("Redesign Character", false, Redesign1, NULL);
	Character1->AddStaticItem("Bypass Tutorial", false, BypassTUTMP0, NULL);
	Character1->AddStaticItem("Remove Bad Sport", false, NoBadMP0, NULL);
	Character1->AddStaticItem("Modded Rolls", false, RollsMP0, NULL);//MaxMental
	Character1->AddStaticItem("Bypass Timer", false, RollsMP3, NULL);
	Character1->AddStaticItem("Roosevelt In Web", false, Rooseveltph, NULL);
	Character1->AddStaticItem("Unlock All Tattoos", false, alltatus, NULL);


	Character2->SetMenuTitle("Character 2");
	Character2->AddSubMenu("Rank Menu", RankMenuMP1);
	Character2->AddStaticItem("Give 10 Mil", false, Give1Mil, NULL);
	Character2->AddStaticItem("Unlock All", false, UnlockAllMP1, NULL);
	Character2->AddStaticItem("Unlock Heists Vehicles", false, HeistsVehiclesCharacter2, NULL);
	Character2->AddStaticItem("Unlock All Clothes", false, UnlockAllClothesCharacter2, NULL);
	Character2->AddStaticItem("Max Snacks", false, MaxSnacksCharacter2, NULL);
	Character2->AddStaticItem("Max Armours", false, MaxArmorsCharacter2, NULL);
	Character2->AddStaticItem("Max FireWorks", false, MaxWorks2, NULL);
	Character2->AddStaticItem("Purchase All Weapons", false, WeaponsChar2, NULL);
	Character2->AddStaticItem("Unlock All Hairstyles", false, Hair2, NULL);
	Character2->AddStaticItem("Redesign Character", false, Redesign2, NULL);
	Character2->AddStaticItem("Bypass Tutorial", false, BypassTUTMP1, NULL);
	Character2->AddStaticItem("Remove Bad Sport", false, NoBadMP1, NULL);
	Character2->AddStaticItem("Modded Rolls", false, RollsMP1, NULL);
	Character2->AddStaticItem("Bypass Timer", false, RollsMP3, NULL);
	Character2->AddStaticItem("Roosevelt In Web", false, Rooseveltph, NULL);
	Character2->AddStaticItem("Unlock All Tattoos", false, alltatus1, NULL);

	MenuOptions->SetMenuTitle("Menu Options");
	//MenuOptions->AddSubMenu("Menu Fonts", MenuFonts);
	//MenuOptions->AddSubMenu("Menu Colors", colorlist);
	MenuOptions->AddStaticItem("Default", false, DefaultMenu2, NULL);
	MenuOptions->AddStaticItem("xxHASTERxx 2.5 Layout", false, DefaultMenu, NULL);
	MenuOptions->AddStaticItem("Pink Layout", false, Pinklayout, NULL);
	MenuOptions->AddStaticItem("Draw Tool", true, DrawTool, NULL);


	colorlist->SetMenuTitle("Menu Colors");
	colorlist->AddSubMenu("Title Back Ground Colors", TitleShaderColor);
	colorlist->AddSubMenu("Title Text Colors", TitleTextColor1);
	colorlist->AddSubMenu("Index Title Colors", TitleShaderColor1);
	colorlist->AddSubMenu("Index Text Colors", TitleTextColor);
	colorlist->AddSubMenu("Background Colors", BackgroundMenu);
	colorlist->AddSubMenu("Border Colors", BorderMenu);
	colorlist->AddSubMenu("Scroller Colors", ScrollerMenu);
	colorlist->AddSubMenu("Weed Colors", weedcolors);
	colorlist->AddSubMenu("Host Colors", hostcolors);

	MenuFonts->SetMenuTitle("Font Chooser");
	MenuFonts->AddSubMenu("Title Fonts", TitleFonts1);
	MenuFonts->AddSubMenu("Index Fonts", TitleFonts);
	MenuFonts->AddSubMenu("Item Fonts", ItemFonts);

	PositionMenu->SetMenuTitle("Position Menu");
	PositionMenu->AddStaticItem("Left", false, MenuLeftSide, NULL);
	PositionMenu->AddStaticItem("Right", false, MenuRightSide, NULL);
	PositionMenu->AddStaticItem("Center", false, MenuCenter, NULL);

	hostcolors->SetMenuTitle("Host Color ");
	hostcolors->AddStaticItem("Black", false, tShaderBlack00, NULL);
	hostcolors->AddStaticItem("White", false, tShaderWhite00, NULL);
	hostcolors->AddStaticItem("Cyan Blue", false, tShaderCyan00, NULL);
	hostcolors->AddStaticItem("Bright Red", false, tShaderRed00, NULL);
	hostcolors->AddStaticItem("Neon Green", false, tShaderGreen00, NULL);
	hostcolors->AddStaticItem("Bright Orange", false, tShaderOrange00, NULL);
	hostcolors->AddStaticItem("Bright Yellow", false, tShaderYellow00, NULL);
	hostcolors->AddStaticItem("Neon Pink", false, tShaderPink00, NULL);
	hostcolors->AddStaticItem("Purple", false, tShaderPurp00, NULL);

	weedcolors->SetMenuTitle("Weed Color ");
	weedcolors->AddStaticItem("Black", false, tShaderBlack0, NULL);
	weedcolors->AddStaticItem("White", false, tShaderWhite0, NULL);
	weedcolors->AddStaticItem("Cyan Blue", false, tShaderCyan0, NULL);
	weedcolors->AddStaticItem("Bright Red", false, tShaderRed0, NULL);
	weedcolors->AddStaticItem("Neon Green", false, tShaderGreen0, NULL);
	weedcolors->AddStaticItem("Bright Orange", false, tShaderOrange0, NULL);
	weedcolors->AddStaticItem("Bright Yellow", false, tShaderYellow0, NULL);
	weedcolors->AddStaticItem("Neon Pink", false, tShaderPink0, NULL);
	weedcolors->AddStaticItem("Purple", false, tShaderPurp0, NULL);

	TitleTextColor->SetMenuTitle("Index Text Color");
	TitleTextColor->AddStaticItem("Black", false, tShaderBlack11, NULL);
	TitleTextColor->AddStaticItem("White", false, tShaderWhite11, NULL);
	TitleTextColor->AddStaticItem("Cyan Blue", false, tShaderCyan11, NULL);
	TitleTextColor->AddStaticItem("Bright Red", false, tShaderRed11, NULL);
	TitleTextColor->AddStaticItem("Neon Green", false, tShaderGreen11, NULL);
	TitleTextColor->AddStaticItem("Bright Orange", false, tShaderOrange11, NULL);
	TitleTextColor->AddStaticItem("Bright Yellow", false, tShaderYellow11, NULL);
	TitleTextColor->AddStaticItem("Neon Pink", false, tShaderPink11, NULL);
	TitleTextColor->AddStaticItem("Purple", false, PurpleBorder11, NULL);

	TitleTextColor1->SetMenuTitle("Title Text Color");
	TitleTextColor1->AddStaticItem("Black", false, tShaderBlack111, NULL);
	TitleTextColor1->AddStaticItem("White", false, tShaderWhite111, NULL);
	TitleTextColor1->AddStaticItem("Cyan Blue", false, tShaderCyan111, NULL);
	TitleTextColor1->AddStaticItem("Bright Red", false, tShaderRed111, NULL);
	TitleTextColor1->AddStaticItem("Neon Green", false, tShaderGreen111, NULL);
	TitleTextColor1->AddStaticItem("Bright Orange", false, tShaderOrange111, NULL);
	TitleTextColor1->AddStaticItem("Bright Yellow", false, tShaderYellow111, NULL);
	TitleTextColor1->AddStaticItem("Neon Pink", false, tShaderPink111, NULL);
	TitleTextColor1->AddStaticItem("Purple", false, PurpleBorder111, NULL);


	TitleShaderColor1->SetMenuTitle("Title Shader Color 1");
	TitleShaderColor1->AddStaticItem("Black", false, tShaderBlack1, NULL);
	TitleShaderColor1->AddStaticItem("White", false, tShaderWhite1, NULL);
	TitleShaderColor1->AddStaticItem("Cyan Blue", false, tShaderCyan1, NULL);
	TitleShaderColor1->AddStaticItem("Bright Red", false, tShaderRed1, NULL);
	TitleShaderColor1->AddStaticItem("Neon Green", false, tShaderGreen1, NULL);
	TitleShaderColor1->AddStaticItem("Bright Orange", false, tShaderOrange1, NULL);
	TitleShaderColor1->AddStaticItem("Bright Yellow", false, tShaderYellow1, NULL);
	TitleShaderColor1->AddStaticItem("Neon Pink", false, tShaderPink1, NULL);
	TitleShaderColor1->AddStaticItem("Purple", false, PurpleBorder1, NULL);

	TitleShaderColor->SetMenuTitle("Title Shader Color");
	TitleShaderColor->AddStaticItem("Black", false, tShaderBlack, NULL);
	TitleShaderColor->AddStaticItem("White", false, tShaderWhite, NULL);
	TitleShaderColor->AddStaticItem("Cyan Blue", false, tShaderCyan, NULL);
	TitleShaderColor->AddStaticItem("Bright Red", false, tShaderRed, NULL);
	TitleShaderColor->AddStaticItem("Neon Green", false, tShaderGreen, NULL);
	TitleShaderColor->AddStaticItem("Bright Orange", false, tShaderOrange, NULL);
	TitleShaderColor->AddStaticItem("Bright Yellow", false, tShaderYellow, NULL);
	TitleShaderColor->AddStaticItem("Neon Pink", false, tShaderPink, NULL);
	TitleShaderColor->AddStaticItem("Purple", false, tShaderPurp, NULL);

	TitleColor->SetMenuTitle("Title Color");
	TitleColor->AddStaticItem("Black", false, tBlack, NULL);
	TitleColor->AddStaticItem("White", false, tWhite, NULL);
	TitleColor->AddStaticItem("Cyan Blue", false, tCyan, NULL);
	TitleColor->AddStaticItem("Bright Red", false, tRed, NULL);
	TitleColor->AddStaticItem("Neon Green", false, tGreen, NULL);
	TitleColor->AddStaticItem("Bright Orange", false, tOrange, NULL);
	TitleColor->AddStaticItem("Bright Yellow", false, tYellow, NULL);
	TitleColor->AddStaticItem("Neon Pink", false, tPink, NULL);
	TitleColor->AddStaticItem("Purple", false, tPurp, NULL);

	TitleFonts1->SetMenuTitle("Menu Title Fonts");
	TitleFonts1->AddStaticItem("Normal", false, TitleFont01, NULL);
	TitleFonts1->AddStaticItem("Cursive", false, TitleFont11, NULL);
	TitleFonts1->AddStaticItem("Arial Large", false, TitleFont21, NULL);
	TitleFonts1->AddStaticItem("Webdings", false, TitleFont31, NULL);
	TitleFonts1->AddStaticItem("Arial", false, TitleFont41, NULL);
	TitleFonts1->AddStaticItem("Invalid Boxes", false, TitleFont51, NULL);
	TitleFonts1->AddStaticItem("Pricedown", false, TitleFont71, NULL);

	TitleFonts->SetMenuTitle("Title Fonts");
	TitleFonts->AddStaticItem("Normal", false, TitleFont0, NULL);
	TitleFonts->AddStaticItem("Cursive", false, TitleFont1, NULL);
	TitleFonts->AddStaticItem("Arial Large", false, TitleFont2, NULL);
	TitleFonts->AddStaticItem("Webdings", false, TitleFont3, NULL);
	TitleFonts->AddStaticItem("Arial", false, TitleFont4, NULL);
	TitleFonts->AddStaticItem("Invalid Boxes", false, TitleFont5, NULL);
	TitleFonts->AddStaticItem("Pricedown", false, TitleFont7, NULL);

	ItemFonts->SetMenuTitle("Item Fonts");
	ItemFonts->AddStaticItem("Normal", false, ItemFont0, NULL);
	ItemFonts->AddStaticItem("Cursive", false, ItemFont1, NULL);
	ItemFonts->AddStaticItem("Arial Large", false, ItemFont2, NULL);
	ItemFonts->AddStaticItem("Webdings", false, ItemFont3, NULL);
	ItemFonts->AddStaticItem("Arial", false, ItemFont4, NULL);
	ItemFonts->AddStaticItem("Invalid Boxes", false, ItemFont5, NULL);
	ItemFonts->AddStaticItem("Pricedown", false, ItemFont7, NULL);

	BorderMenu->SetMenuTitle("Border Options");
	BorderMenu->AddStaticItem("Red", false, RedBorder, NULL);
	BorderMenu->AddStaticItem("Cyan", false, CyanBorder, NULL);
	BorderMenu->AddStaticItem("Black", false, BlackBorder, NULL);
	BorderMenu->AddStaticItem("Orange", false, OrangeBorder, NULL);
	BorderMenu->AddStaticItem("Neon Green", false, GreenBorder, NULL);
	BorderMenu->AddStaticItem("Purple", false, PurpleBorder, NULL);
	BorderMenu->AddStaticItem("Pink", false, PinkBorder, NULL);
	BorderMenu->AddStaticItem("Grey", false, GreyBorder, NULL);
	BorderMenu->AddStaticItem("White", false, WhiteBorder, NULL);
	BorderMenu->AddStaticItem("Yellow", false, YellowBorder, NULL);
	BorderMenu->AddStaticItem("Salmon", false, SalmonBorder, NULL);

	BackgroundMenu->SetMenuTitle("Background Options");
	BackgroundMenu->AddStaticItem("Red", false, RedBackground, NULL);
	BackgroundMenu->AddStaticItem("Cyan", false, CyanBackground, NULL);
	BackgroundMenu->AddStaticItem("Black", false, BlackBackground, NULL);
	BackgroundMenu->AddStaticItem("Orange", false, OrangeBackground, NULL);
	BackgroundMenu->AddStaticItem("Neon Green", false, GreenBackground, NULL);
	BackgroundMenu->AddStaticItem("Purple", false, PurpleBackground, NULL);
	BackgroundMenu->AddStaticItem("Pink", false, PinkBackground, NULL);
	BackgroundMenu->AddStaticItem("Grey", false, GreyBackground, NULL);
	BackgroundMenu->AddStaticItem("White", false, WhiteBackground, NULL);
	BackgroundMenu->AddStaticItem("Yellow", false, YellowBackground, NULL);
	BackgroundMenu->AddStaticItem("Salmon", false, SalmonBackground, NULL);

	ScrollerMenu->SetMenuTitle("Scroller Options");
	ScrollerMenu->AddStaticItem("Red", false, RedScroller, NULL);
	ScrollerMenu->AddStaticItem("Cyan", false, CyanScroller, NULL);
	ScrollerMenu->AddStaticItem("Black", false, BlackScroller, NULL);
	ScrollerMenu->AddStaticItem("Orange", false, OrangeScroller, NULL);
	ScrollerMenu->AddStaticItem("Neon Green", false, GreenScroller, NULL);
	ScrollerMenu->AddStaticItem("Purple", false, PurpleScroller, NULL);
	ScrollerMenu->AddStaticItem("Pink", false, PinkScroller, NULL);
	ScrollerMenu->AddStaticItem("Grey", false, GreyScroller, NULL);
	ScrollerMenu->AddStaticItem("White", false, WhiteScroller, NULL);
	ScrollerMenu->AddStaticItem("Yellow", false, YellowScroller, NULL);
	ScrollerMenu->AddStaticItem("Salmon", false, SalmonScroller, NULL);



	RankMenuMP0->SetMenuTitle("Rank Menu (Character 1");
	RankMenuMP0->AddStaticItem("Rank 120", false, Rank, NULL);
	RankMenuMP0->AddStaticItem("Rank 200", false, Rank5, NULL);
	RankMenuMP0->AddStaticItem("Rank 312", false, Rank6, NULL);
	RankMenuMP0->AddStaticItem("Rank 420", false, Rank420, NULL);
	RankMenuMP0->AddStaticItem("Rank 8000", false, Rank8000, NULL);
	RankMenuMP0->AddStaticItem("Custom Rank", false, CustomRankMP0, NULL);

	KDMP0->SetMenuTitle("KD Menu");
	KDMP0->AddStaticItem("1.25", false, KD1, NULL);
	KDMP0->AddStaticItem("2.0", false, KD2, NULL);
	KDMP0->AddStaticItem("3.0", false, KD3, NULL);
	KDMP0->AddStaticItem("4.0", false, KD4, NULL);
	KDMP0->AddStaticItem("5.0", false, KD5, NULL);
	KDMP0->AddStaticItem("Custom Kills", false, CustomKills, NULL);
	KDMP0->AddStaticItem("Custom Deaths", false, CustomDeaths, NULL);

	RankMenuMP1->SetMenuTitle("Rank Menu (Character 2");
	RankMenuMP1->AddStaticItem("Rank 120", false, Rank1, NULL);
	RankMenuMP1->AddStaticItem("Rank 200", false, Rank3, NULL);
	RankMenuMP1->AddStaticItem("Rank 312", false, Rank4, NULL);
	RankMenuMP1->AddStaticItem("Rank 420", false, Rank4201, NULL);
	RankMenuMP1->AddStaticItem("Rank 8000", false, Rank80001, NULL);
	RankMenuMP1->AddStaticItem("Custom Rank", false, CustomRankMP1, NULL);

	// Main Menu
	mainMenu->SetMenuTitle("|    XBL.CLOUD Menu |      ");
	mainMenu->AddSubMenu("Recovery", Recovery);
	mainMenu->AddSubMenu("Quick Options", quickOptionsMenu1);
	mainMenu->AddSubMenu("Player Protection", Protection);
	mainMenu->AddSubMenu("Vehicle Options", vehicleOptionMenu);
	mainMenu->AddSubMenu("Weapon Options", weaponOptionsMenu);
	mainMenu->AddSubMenu("Teleports Menu 1", TeleMenu);
	mainMenu->AddSubMenu("Teleports Menu 2", RanTele);
	mainMenu->AddSubMenu("Weather Options", Weather);
	mainMenu->AddSubMenu("Bodyguard Menu", GuardMenu);
	mainMenu->AddSubMenu("Creator Mode", ObjectOptions1);
	mainMenu->AddSubMenu("Model Changer", ModelChanger);
	mainMenu->AddSubMenu("Online Players", onlinePlayers);
	mainMenu->AddSubMenu("Menu Options", MenuOptions);
}



unsigned long XeXGetModuleHandleHook(char* ModuleName) {
	if (strcmp(ModuleName, "xbdm.xex") == 0)
		return 0;
	else
		return (unsigned long)GetModuleHandle(ModuleName);
}

bool DoFrame;

void __declspec(noinline) doFramefunc() {
	DoFrame = true;
}

void UpdateMenu() {

	if (XamGetCurrentTitleId() != 0x545408A7)
		return;

	STAT_SET_BOOL(get_hash_key("MP0_NO_MORE_TUTORIALS"), 1, 1); //Char 1
	STAT_SET_BOOL(get_hash_key("MP1_NO_MORE_TUTORIALS"), 1, 1); //Char 2
	STAT_SET_BOOL(get_hash_key("MP2_NO_MORE_TUTORIALS"), 1, 1); //Char 3

	ShowMessageUpdate();

	if (teleportingPlayer) {
		TeleportPlayerProcess();
	}
	if (Delete) {
		DeleteProcess();
	}
	if (Delete1) {
		DeleteProcess1();
	}


	if (KickinggPlayer) {
		LMAOProccess();
	}

	if (paintingPlayersCar) {
		PaintOnlinePlayersCarProcess();
	}

	if (explodingPlayersCar) {
		ExplodeOnlinePlayerVehicleProcess();
	}

	if (stallPlayersCar) {
		stallPlayerVehicleProcess();
	}

	if (launchingPlayersCar) {
		SendPlayersCarToSpaceProcess();
	}

	if (launchfPlayersCar) {
		SendPlayersCarForwardProcess();
	}

	if (launchbPlayersCar) {
		SendPlayersCarBackwardsProcess();
	}
	if (launchtPlayersCar) {
		SendPlayersCarRightProcess();
	}

	if (vOutOfControl) {
		vOutOfControlProcess();
	}

	if (popTheirTyres) {
		popTheirTyresProcess();
	}

	if (flipCar180) {
		flipCar180Process();
	}

	if (SmasCar5) {
		SmasCar5Process();
	}

	if (SmasCar1) {
		SmasCar1Process();
	}
	if (SmasCar2) {
		SmasCar2Process();
	}
	if (removeCar1) {
		RemoveProcess();
	}

	if (playerInvincibilityActive) {
		ToggleGodMode();
	}
	if (towTruckCar) {
		TowTruckProcess();
	}
	if (towTruckCar7) {
		TowTruckProcess7();
	}
	if (towTruckCar2) {
		TowTruckProcess2();
	}
	if (detachTowTruckCar) {
		DetachTowTruckProcess();
	}
	if (detachTowTruckCar2) {
		DetachTowTruckProcess2();
	}

	if (detachMyCar) {
		DetachMyCarProcess();
	}

	if (TowMyCarCar) {
		TowMyCarProcess();
	}
	if (TowMyCarCar1) {
		TowMyCarProcess1();
	}
	if (TowMyCarCar2) {
		TowMyCarProcess2();
	}
	if (TowMyCarCar3) {
		TowMyCarProcess3();
	}
	if (TowMyCarCar4) {
		TowMyCarProcess4();
	}
	if (TowMyCarCar5) {
		TowMyCarProcess5();
	}
	if (TowMyCarCar6) {
		TowMyCarProcess6();
	}
	if (creator180LP) {
		creator180LoopProcess();
	}
	if (creator180LP1) {
		creator180LoopProcess1();
	}
	if (creator1802LP) {
		creator180LoopProcess2();
	}

	if (creator1803LP) {
		creator180LoopProcess3();
	}

	if (creator360LP) {
		creator360RotationProcess();
	}

	if (MoveObjRight) {
		MoveRightLoop();
	}
	if (Mosesloop) {
		MosesLoop();
	}
	if (Protectionloop) {
		ProtectionLoop();
	}
	if (Protectionloop69) {
		ProtectionLoop69();
	}
	if (Protectionloop2) {
		ProtectionLoop2();
	}
	if (Protectionloop3) {
		ProtectionLoop3();
	}
	if (Protectionloop4) {
		ProtectionLoop4();
	}
	if (Protectionloop5) {
		ProtectionLoop5();
	}
	if (Protectionloop6) {
		ProtectionLoop6();
	}
	if (Protectionloop7) {
		ProtectionLoop7();
	}
	if (ObjMoveUp) {
		MoveUpLoop();
	}

	if (ObjMoveDown) {
		MoveDownLoop();
	}

	if (ObjMoveForward) {
		MoveForwardLoop();
	}

	if (MoveObjBackwards) {
		MoveBackwardsLoop();
	}

	if (ObjMoveLeft) {
		MoveLeftLoop();
	}

	if (lockPlayersCar) {
		LockPlayersDoorsProcess();
	}
	if (tFlyingVeh) {
		tFlyingVehLoop();
	}
	if (oblivion) {
		SendPlayersCarBackwardsProcess2();
	}
	if (oblivion1) {
		oblivionProcess1();
	}
	if (oblivion2) {
		oblivionProcess2();
	}
	if (flipPlayersCar) {
		FlipPlayersDoorsProcess();
	}
	if (unlockPlayersCar) {
		unLockPlayersDoorsProcess();
	}
	if (fixPlayersCar) {
		FixVehicleOnlineProcess();
	}
	if (ClonePlayer1) {
		ClonePlayerProcess1();
	}
	if (paintingPlayersCarChrome) {
		PaintOnlinePlayersCarChromeProcess();
	}
	if (paintingPlayersCarAngels) {
		PaintOnlinePlayersCarAngelsProcess();
	}
	if (paintingPlayersCarPink) {
		PaintOnlinePlayersCarPinkProcess();
	}
	if (pinkPlayersCar) {
		PinkOnlinePlayerVehicleProcess();
	}
	if (rainbow)
		rainbow_car();
	if (rainbow1)
		rainbow_car1();
	if (superjump)
		super_jump();
	if (superruncheck)
		super_run();
	if (lowered)
		lowerloop();
	if (wanted)
		wantedloop();
	if (field)
		fieldloop();
	if (creatorField)
		creatorFieldloop();
	if (activenos)
		nosloop();
	if (blameloops)
		blameExplosion();
	if (blameloops1)
		blameExplosion1();
	if (camshakeloop)
		kamshakeloop();
	if (rocket)
		rocketloop();
	if (creatorRocket3)
		creatorRocketLoop3();
	if (creatorRocket2)
		creatorRocketLoop2();
	if (creatorFlares5)
		creatorFlaresLoop5();
	if (creatorRocket)
		creatorRocketLoop();
	if (creatorFlares)
		creatorFlaresLoop();
	if (creatorFlares2)
		creatorFlaresLoop2();
	if (deagle)
		UltimateDeagleLoop();
	/*if (tpGun)
		tpGunLoop();*/
	if (fwrocket)
		fwrocketloop();
	if (vehicleFlare)
		vehicleFlareLoop();
	if (vehicleSavage)
		vehicleSavageLoop();
	if (superMG)
		superMGloop();
	if (Mini)
		miniloop();
	if (TeleportToWaypoint)
		Waypointloop();
	if (dw)
		drive_water();
	if (da)
		drive_water();
	if (handdrift)
		slideyloop();
	if (Create)
		create_loop();
	if (speedo)
		speed();
	if (speeder)
		speedGunLoop();
	if (pitchT)
		pitchToggle();
	if (coordsT)
		coordsToggle();
	if (pcoordsT)
		playerCoordsToggle();
	if (trollCash)
		moneyTrollToggle();
	if (hashT)
		hashToggle();
	if (cam_mode)
		cam_loop();
	if (Seccam_mode)
		Seccam_loop();
	if (Seccam2_mode)
		Seccam2_loop();
	if (Seccam3_mode)
		Seccam3_loop();
	if (Seccam4_mode)
		Seccam4_loop();
	if (Seccam5_mode)
		Seccam5_loop();
	if (Seccam6_mode)
		Seccam6_loop();
	if (LowRider1)
		LowRider();
	if (super_check)
		super_loop();
	if (col_loop)
		fw_col_loop();
#ifdef personal
	if (swaggedstealth)
		BlowUpLoop2();
	if (passivekillerswag)
		KillPassiveLoop();
	if (fun_gun)
		fungun();
	if (cross)
		cross1();
	if (cross02)
		cross2();
	if (cross03)
		cross3();
	if (cross04)
		cross4();
	if (insane2)
		InsaneLoop2();
	if (TimeSlow11)
		TimeSlowLoop();
	if (TimeFast)
		TimeFastLoop();
	if (TimeSlow0)
		TimeSlowLoop0();
	if (rainbowsz)
		RainbowGun();
	if (particalloop)
		particalloop1();
	if (creatorRocketRT)
		creatorRocketRTLoop();
	if (creatorRocketRT1)
		creatorRocketRTLoop1();
	if (creatorRocketRT2)
		creatorRocketRTLoop2();
	if (creatorRocketRT3)
		creatorRocketRTLoop3();
	if (creatorRocketRT4)
		creatorRocketRTLoop4();
	if (creatorRocketRT5)
		creatorRocketRTLoop5();
	if (freezeallswag)
		FreezeAllLoop();
	if (waterswag)
		WaterSwagLoop();
	if (whostalkingloop)
		WhosTalkingLoop();
	if (raceloop)
		RaceLoop();
	if (whosmutedmeloop)
		Whosmutedmeloop();
	if (nocliploop)
		Nocliploop();
	if (DisableradarBOOL)
		DisableradarLoop();
	if (banloop2)
		stoptheban();
	if (MobileRadioBool)
		MobileRadio();//MobileRadio
	if (objectDrop)
		cashCreatorLoop();
	if (onedrop)
		onecashloop();
	if (lsmessage3)
		commands2();
	if (mountmessage)
		MountainMoneyLoop1();
	if (mountmessage2)
		MountainMoneyLoop2();
	if (mountmessage3)
		MountainMoneyLoop3();
	if (mountmessage4)
		MountainMoneyLoop4();
	if (groundmoney)
		GroundMoneyLoop();
	if (lsmessage4)
		LSDropLoop();
	if (lsmessage1)
		LSMoneyLoop1();
	if (lsmessage2)
		LSMoneyLoop2();
	if (helipadswag)
		HeliPadDropLoop();
	if (teepeeswag)
		TeepeeSwagLoop();
	if (hangerswag)
		AirportLoop();
	if (vaultswagger)
		VaultLoop();
	if (mazebankswagger)
		MazeBankLoop();
	if (slots22)
		SlotsLoop22();
	if (seatbeltswag)
		SeatbeltLoop();
	if ((drawT))
		DrawToolMain();
	if (insane)
		InsaneLoop();
	if (insane1)
		InsaneLoop1();
	if (launchswagger)
		Launchforwardloop();
	if (swaggedunstealth)
		BlowUpLoop();
	if (superbreakswaggerswag)
		SuperBreakLoop();
	if (alldrop)
		allcashloop();
	if (WhoIsThat)
		PrintChat();
#endif
	if (teleportingPlayer) {
		TeleportPlayerProcess();
	}
	if (Delete) {
		DeleteProcess();
	}
	if (KickinggPlayer) {
		LMAOProccess();
	}

	if (paintingPlayersCar) {
		PaintOnlinePlayersCarProcess();
	}

	if (explodingPlayersCar) {
		ExplodeOnlinePlayerVehicleProcess();
	}

	if (stallPlayersCar) {
		stallPlayerVehicleProcess();
	}

	if (launchingPlayersCar) {
		SendPlayersCarToSpaceProcess();
	}

	if (launchfPlayersCar) {
		SendPlayersCarForwardProcess();
	}

	if (launchyPlayersCar) {
		SendPlayersCarRightProcess();
	}

	if (launchbPlayersCar) {
		SendPlayersCarBackwardsProcess();
	}
	if (vOutOfControl) {
		vOutOfControlProcess();
	}

	if (popTheirTyres) {
		popTheirTyresProcess();
	}

	if (flipCar180) {
		flipCar180Process();
	}


	if (SmasCar1) {
		SmasCar1Process();
	}

	if (removeCar1) {
		RemoveProcess();
	}
	if (playerInvincibilityActive) {
		ToggleGodMode();
	}

	if (towTruckCar) {
		TowTruckProcess();
	}
	if (towTruckCar2) {
		TowTruckProcess2();
	}

	if (detachTowTruckCar) {
		DetachTowTruckProcess();
	}
	if (detachTowTruckCar2) {
		DetachTowTruckProcess2();
	}
	if (detachMyCar) {
		DetachMyCarProcess();
	}

	if (TowMyCarCar) {
		TowMyCarProcess();
	}
	if (TowMyCarCar1) {
		TowMyCarProcess1();
	}
	if (TowMyCarCar2) {
		TowMyCarProcess2();
	}
	if (TowMyCarCar3) {
		TowMyCarProcess3();
	}
	if (creator180LP) {
		creator180LoopProcess();
	}

	if (creator1802LP) {
		creator180LoopProcess2();
	}

	if (creator1803LP) {
		creator180LoopProcess3();
	}

	if (creator360LP) {
		creator360RotationProcess();
	}

	if (Mosesloop) {
		MosesLoop();
	}
	if (MoveObjRight) {
		MoveRightLoop();
	}

	if (ObjMoveUp) {
		MoveUpLoop();
	}

	if (TimeSlow11) {
		TimeSlowLoop();//PlayerProtectionLoop

	}

	if (TimeFast) {
		TimeFastLoop();//PlayerProtectionLoop

	}

	if (ObjMoveDown) {
		MoveDownLoop();
	}

	if (ObjMoveForward) {
		MoveForwardLoop();
	}

	if (MoveObjBackwards) {
		MoveBackwardsLoop();
	}

	if (ObjMoveLeft) {
		MoveLeftLoop();
	}

	if (lockPlayersCar) {
		LockPlayersDoorsProcess();
	}
	if (tFlyingVeh) {
		tFlyingVehLoop();
	}
	if (novclip1) {
		novclip();
	}
	if (move_animal) {
		rideanimalloop();
	}
	if (novclip2) {
		novclip3();
	}

	if (flipPlayersCar) {
		FlipPlayersDoorsProcess();
	}
	if (unlockPlayersCar) {
		unLockPlayersDoorsProcess();
	}
	if (fixPlayersCar) {
		FixVehicleOnlineProcess();
	}
	if (ClonePlayer1) {
		ClonePlayerProcess1();

	}
	if (paintingPlayersCarChrome) {
		PaintOnlinePlayersCarChromeProcess();
	}
	if (paintingPlayersCarAngels) {
		PaintOnlinePlayersCarAngelsProcess();
	}
	if (paintingPlayersCarPink) {
		PaintOnlinePlayersCarPinkProcess();
	}
	if (pinkPlayersCar) {
		PinkOnlinePlayerVehicleProcess();
	}

	if (rainbow)
		rainbow_car();
	if (rainbow1)
		rainbow_car1();
	if (superjump)
		super_jump();
	if (superruncheck)
		super_run();
	if (lowered)
		lowerloop();
	if (wanted)
		wantedloop();
	if (field)
		fieldloop();
	if (creatorField)
		creatorFieldloop();
	if (activenos)
		nosloop();
	if (rocket)
		rocketloop();
	if (creatorFlares5)
		creatorFlaresLoop5();
	if (creatorRocket3)
		creatorRocketLoop3();
	if (creatorRocket2)
		creatorRocketLoop2();
	if (swaglazers)
		drawlines();
	if (swaglazers1)
		drawlines1();
	if (creatorgun)
		gravityGunloop2();
	if (creatorRocket)
		creatorRocketLoop();
	if (creatorFlares2)
		creatorFlaresLoop2();
	if (creatorFlares)
		creatorFlaresLoop();
	if (deagle)
		UltimateDeagleLoop();
	if (fwrocket)
		fwrocketloop();
	if (vehicleFlare)
		vehicleFlareLoop();
	if (vehicleSavage)
		vehicleSavageLoop();
	if (superMG)
		superMGloop();
	if (TeleportToWaypoint)
		Waypointloop();
	if (dw)
		drive_water();
	if (da)
		drive_water();
	if (handdrift)
		slideyloop();
	if (Create)
		create_loop();
	if (speedo)
		speed();
	if (pitchT)
		pitchToggle();
	if (coordsT)
		coordsToggle();
	if (pcoordsT)
		playerCoordsToggle();
	if (trollCash)
		moneyTrollToggle();
	if (hashT)
		hashToggle();
	if (cam_mode)
		cam_loop();
	if (Seccam_mode)
		Seccam_loop();
	if (Seccam2_mode)
		Seccam2_loop();
	if (Seccam3_mode)
		Seccam3_loop();
	if (Seccam6_mode)
		Seccam6_loop();
	if (Seccam5_mode)
		Seccam5_loop();
	if (Seccam4_mode)
		Seccam4_loop();
	if (super_check)
		super_loop();
	if (col_loop)
		fw_col_loop();
#ifdef PRIVATE
	if (objectDrop)
		cashCreatorLoop();
	if (onedrop)
		onecashloop();
	if (alldrop)
		allcashloop();
	if (WhoIsThat)
		PrintChat();
#endif
	if (cheat_superjump) {
		SuperJumpLoop();
	}
	if (cheat_superpunch) {
		SuperPunchLoop();
	}
	if (cheat_explosiveammo) {
		ExplosiveAmmoLoop();
	}
	if (cheat_explosiveammo1) {
		randomtest();
	}
	if (proppy0) {
		proppyloop0();
	}
	if (proppy1) {
		proppyloop();
	}
	if (proppy2) {
		proppyloop1();
	}
	if (proppy3) {
		proppyloop2();
	}
	if (proppy4) {
		proppyloop3();
	}
	if (proppy5) {
		proppyloop4();
	}
	if (cheat_1shot) {
		cheat_1shotloop();
	}
	if (cheat_fireammo) {
		FireAmmoLoop();
	}
	if (esp2) {
		esplooop();
	}
	if (snowy34) {
		snowy343();
	}
	if (lazerlo) {
		lazerl();
	}

	if (molotovloop) {
		Molotovloop();
	}
	if (molotovloop1) {
		Molotovloop1();
	}
	if (molotovloop2) {
		Molotovloop2();
	}
	if (molotovloop3) {
		Molotovloop3();
	}
	if (molotovloop4) {
		Molotovloop4();
	}
	if (molotovloop5) {
		Molotovloop5();
	}
	if (molotovloop6) {
		Molotovloop6();
	}
	if (molotovloop7) {
		Molotovloop7();
	}
	if (molotovloop8) {
		Molotovloop8();
	}
	if (molotovloop9) {
		Molotovloop9();
	}
	if (Pass3) {
		Passloop();
	}
	menuInputHandler->UpdateInput();

	if (menuInputHandler->DpadRightDown() && menuInputHandler->XButtonDown() && !inputButtonsPressed) {
		enableMenu = !enableMenu;
		bypassmenu = !bypassmenu;
		inputButtonsPressed = true;
	} else if (!menuInputHandler->DpadRightDown() && !menuInputHandler->XButtonDown()) {
		inputButtonsPressed = false;

	}
	if (bypassmenu) {
		set_stat_int(get_hash_key("MPPLY_CHAR_IS_BADSPORT"), 0);
		set_stat_int(get_hash_key("MPPLY_OVERALL_BADSPORT"), 0);
	}
	if (enableMenu) {

		for (int i = 0; i < 16; i++) {
			GTAVMenuItem *menuItem = &onlinePlayers->menuItems->operator[](i);


			char *playerName = GetPlayerName(i);


			memset(menuItem->itemText, 0, 32);


			strcpy_s(menuItem->itemText, 32, playerName);
		}

		for (int i = 0; i < 16; i++) {
			GTAVMenuItem *menuItem = &blamePlayers->menuItems->operator[](i);


			char *blameName = GetPlayerName(i);


			memset(menuItem->itemText, 0, 32);


			strcpy_s(menuItem->itemText, 32, blameName);
		}

		for (int i = 0; i < 16; i++) {
			GTAVMenuItem *menuItem = &blamePlayers2->menuItems->operator[](i);


			char *blameName2 = GetPlayerName(i);


			memset(menuItem->itemText, 0, 32);


			strcpy_s(menuItem->itemText, 32, blameName2);
		}

		mainMenu->DisplayMenu();
	}
}

int __declspec(naked) VM_ExecuteStub(...) {
	__asm
	{
		li r3, 3
		nop
			nop
			nop
			nop
			nop
			nop
			nop
			blr
	}
}

__int64 __declspec(naked) create_objectStub(...) {
	__asm
	{
		li r3, 8
		nop
			nop
			nop
			nop
			nop
			nop
			nop
			blr
	}
}

__int64 create_objectHook(int Args) {
	printf("create_object Model = %p\n", (*(int *)*(int *)(Args + 8)));
	return create_objectStub(Args);
}

int val1, val2, val3, val4, PlateVal = -1;
int FreeMemoryPointer;
__int64 VM_ExecuteHook(__int64 r3, int r4, __int64 r5, __int64 r6) {
	Var_Pointer = r4;
	__int64 Return = VM_ExecuteStub(r3, r4, r5, r6);

	if (!causelag) {
		if (!DoFrame)
			return Return;
		DoFrame = false;
	}

	UpdateMenu();

	if (deleted) {
		set_entity_as_mission_entity(deletevehicle, 0, 1);
		delete_vehicle2(&deletevehicle);
		set_vehicle_as_no_longer_needed(deletevehicle);
		deleted = false;
	}
	if (deleted1) {
		set_entity_as_mission_entity(deletevehicle1, 0, 1);
		VEHICLE::SET_VEHICLE_GRAVITY(deletevehicle1, false);
		set_vehicle_as_no_longer_needed(deletevehicle1);
		deleted1 = false;
	}
	if (deleted_obj) {
		set_entity_as_mission_entity(objecthandle, 0, 1);
		delete_object2(&objecthandle);
		deleted_obj = false;
	}
	if (nyloaded) {
		request_ipl("prologue01");
		request_ipl("prologue01c");
		request_ipl("prologue01d");
		request_ipl("prologue01e");
		request_ipl("prologue01f");
		request_ipl("prologue01g");
		request_ipl("prologue01h");
		request_ipl("prologue01i");
		request_ipl("prologue01j");
		request_ipl("prologue01k");
		request_ipl("prologue01z");
		request_ipl("prologue02");
		request_ipl("prologue03");
		request_ipl("prologue03b");
		request_ipl("prologue04");
		request_ipl("prologue04b");
		request_ipl("prologue05");
		request_ipl("prologue05b");
		request_ipl("prologue06");
		request_ipl("prologue06b");
		request_ipl("prologuerd");
		request_ipl("prologuerdb");
		request_ipl("prologue_m2_door");
		request_ipl("prologue_LODLights");
		request_ipl("prologue_DistantLights");
		float x, y, z;

		x = 5890.491211, y = -5163.499512, z = 83.209396;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}

		set_entity_heading(PlayerPedId(), 172.5381f);
		nyloaded = false;
	}
	if (yatloaded) {
		request_ipl("hei_yacht_heist");
		request_ipl("hei_yacht_heist_Bar");
		request_ipl("hei_yacht_heist_Bedrm");
		request_ipl("hei_yacht_heist_Bridge");
		request_ipl("hei_yacht_heist_DistantLights");
		request_ipl("hei_yacht_heist_enginrm");
		request_ipl("hei_yacht_heist_LODLights");
		request_ipl("hei_yacht_heist_Lounge");
		request_ipl("hei_yacht_heist_LODLights");
		request_ipl("hei_yacht_heist_DistantLights");
		float x, y, z;

		x = -2043.974f, y = -1031.582f, z = 11.9816f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		yatloaded = false;
	}
	if (yatloaded1) {
		request_ipl("yogagame");
		float x, y, z;

		x = -781.6566f, y = 186.8937f, z = 71.8352f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		yatloaded1 = false;
	}
	if (airloaded) {
		request_ipl("hei_carrier");
		request_ipl("hei_Carrier_int1");
		request_ipl("hei_Carrier_int2");
		request_ipl("hei_Carrier_int3");
		request_ipl("hei_Carrier_int4");
		request_ipl("hei_Carrier_int5");
		request_ipl("hei_Carrier_int6");
		request_ipl("hei_carrier_LODLights");
		request_ipl("hei_carrier_DistantLights");
		float x, y, z;

		x = 3069.98f, y = -4632.49f, z = 16.2f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		airloaded = false;
	}
	if (stilloaded) {
		request_ipl("DES_StiltHouse_imapend");
		float x, y, z;
		x = -1020.5f, y = 663.41f, z = 154.75f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		stilloaded = false;
	}
	if (stilloaded5) {
		request_ipl("farm");
		request_ipl("farm_burnt");
		request_ipl("farm_burnt_props");
		request_ipl("farmint");
		request_ipl("farm_props");
		float x, y, z;
		x = 2441.2f, y = 4968.5f, z = 51.7f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		stilloaded5 = false;
	}
	if (ufoloaded) {
		request_ipl("ufo");
		float x, y, z;
		x = -2051.99463, y = 3237.05835, z = 1456.97021;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		ufoloaded = false;
	}
	if (ufoloaded1) {
		request_ipl("ufo");
		float x, y, z;
		x = 2490.47729, y = 3774.84351, z = 2414.035;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		ufoloaded1 = false;
	}
	if (stilloaded8) {
		request_ipl("RC12B_Destroyed");
		request_ipl("RC12B_HospitalInterior");
		request_ipl("farm_burnt_props");
		request_ipl("RC12B_Default");
		request_ipl("RC12B_Fixed");
		float x, y, z;
		x = 356.8f, y = -590.1f, z = 43.3f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		stilloaded8 = false;
	}
	if (stilloaded2) {
		request_ipl("des_farmhouse");
		request_ipl("des_farmhs_endimap");
		request_ipl("des_farmhs_end_occl");
		request_ipl("des_farmhs_startimap");
		request_ipl("des_farmhs_start_occl");
		float x, y, z;
		x = 2441.2f, y = 4968.5f, z = 51.7f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		stilloaded2 = false;
	}

	if (stilloaded6) {
		request_ipl("layer_sextoys_a");
		request_ipl("layer_torture");
		float x, y, z;
		x = -1157.129f, y = -1523.028f, z = 9.6327f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		stilloaded6 = false;
	}
	if (stilloaded3) {
		request_ipl("post_hiest_unload");
		float x, y, z;
		x = -630.4205f, y = -236.7843f, z = 37.057f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		stilloaded3 = false;
	}

	if (stilloaded4) {
		request_ipl("id2_14_during_door");
		request_ipl("id2_14_during1");
		request_ipl("id2_14_during2");
		request_ipl("id2_14_on_fire");
		request_ipl("id2_14_post_no_int");
		request_ipl("id2_14_pre_no_int");
		float x, y, z;
		x = 716.84f, y = -962.05f, z = 31.59f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		stilloaded4 = false;
	}
	if (morloaded) {
		request_ipl("Coroner_Int_on");
		float x, y, z;

		x = 244.9f, y = -1374.7f, z = 39.5f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		morloaded = false;
	}
	if (cluckloaded) {
		request_ipl("CS1_02_cf_onmission1");
		request_ipl("CS1_02_cf_onmission2");
		request_ipl("CS1_02_cf_onmission3");
		request_ipl("CS1_02_cf_onmission4");
		float x, y, z;

		x = -72.68752, y = 6253.72656, z = 31.08991;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		cluckloaded = false;
	}
	if (faceloaded) {
		request_ipl("facelobby");
		float x, y, z;

		x = -1047.9f, y = -233.0f, z = 39.0f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		faceloaded = false;
	}
	if (carloaded) {
		request_ipl("cargoship");
		float x, y, z;

		x = -90.0f, y = -2365.8f, z = 14.3f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		carloaded = false;
	}
	if (jewloaded) {
		request_ipl("post_hiest_unload");
		float x, y, z;

		x = -630.4f, y = -236.7f, z = 40.0f;
		int myhandle = GetPlayerHandle(PlayerId());
		int myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
			} else {
				set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
			}
		}
		jewloaded = false;
	}
	if (fwvcheck) {
		if (!unk_0x9ACC6446("scr_indep_fireworks")) {
			unk_0xCFEA19A9("scr_indep_fireworks");
		} else {
			float f1;
			f1 = 1.0;
			float r, g, b;
			r = 0.1, g = 1.0, b = 0.1;
			unk_0x9C720B61("scr_indep_fireworks");
			unk_0x7B689E20(r, g, b);
			unk_0x633F8C48(fexp, fcoords[0], fcoords[1], fcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
			fwvcheck = false;
		}
	}
	if (pwvcheck11) {
		if (!unk_0x9ACC6446("scr_rcbarry2")) {
			unk_0xCFEA19A9("scr_rcbarry2");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_rcbarry2");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
			pwvcheck11 = false;
		}
	}
	if (pwvcheck) {
		if (!unk_0x9ACC6446("scr_rcbarry2")) {
			unk_0xCFEA19A9("scr_rcbarry2");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_rcbarry2");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
		}
	}
	if (pwvcheck1) {
		if (!unk_0x9ACC6446("scr_rcbarry1")) {
			unk_0xCFEA19A9("scr_rcbarry1");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_rcbarry1");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
			pwvcheck1 = false;
		}
	}
	if (pwvcheck2) {
		if (!unk_0x9ACC6446("scr_fbi5a")) {
			unk_0xCFEA19A9("scr_fbi5a");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_fbi5a");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
			pwvcheck2 = false;
		}
	}
	if (pwvcheck3) {
		if (!unk_0x9ACC6446("scr_mp_house")) {
			unk_0xCFEA19A9("scr_mp_house");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_mp_house");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
			pwvcheck3 = false;
		}
	}
	if (pwvcheck4) {
		if (!unk_0x9ACC6446("scr_carsteal4")) {
			unk_0xCFEA19A9("scr_carsteal4");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_carsteal4");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
			pwvcheck4 = false;
		}
	}
	if (pwvcheck5) {
		if (!unk_0x9ACC6446("scr_oddjobtaxi")) {
			unk_0xCFEA19A9("scr_oddjobtaxi");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_oddjobtaxi");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
			pwvcheck5 = false;
		}
	}
	if (pwvcheck6) {
		if (!unk_0x9ACC6446("scr_solomon3")) {
			unk_0xCFEA19A9("scr_solomon3");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_solomon3");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, 5.0f, 0, 0, 0);
			pwvcheck6 = false;
		}
	}
	if (pwvcheck7) {
		if (!unk_0x9ACC6446("scr_oddjobtowtruck")) {
			unk_0xCFEA19A9("scr_oddjobtowtruck");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_oddjobtowtruck");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
			pwvcheck7 = false;
		}
	}
	if (pwvcheck8) {
		if (!unk_0x9ACC6446("scr_paletoscore")) {
			unk_0xCFEA19A9("scr_paletoscore");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_paletoscore");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, 5.0f, 0, 0, 0);
			pwvcheck8 = false;
		}
	}
	if (pwvcheck9) {
		if (!unk_0x9ACC6446("scr_familyscenem")) {
			unk_0xCFEA19A9("scr_familyscenem");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_familyscenem");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
		}
	}
	if (pwvcheck10) {
		if (!unk_0x9ACC6446("scr_rcbarry2")) {
			unk_0xCFEA19A9("scr_rcbarry2");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_rcbarry2");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, 10.0f, 0, 0, 0);
			pwvcheck10 = false;
		}
	}
	if (pwvcheck12) {
		if (!unk_0x9ACC6446("scr_paletoscore")) {
			unk_0xCFEA19A9("scr_paletoscore");
		} else {
			float f1;
			f1 = 1.0;
			unk_0x9C720B61("scr_paletoscore");
			unk_0x633F8C48(pexp, pcoords[0], pcoords[1], pcoords[2], 0.0f, 0.0f, 0.0f, 10.0f, 0, 0, 0);
		}
	}


	if (cam_load) {
		float x, y, z;
		x = 0.1;
		y = 0.07;
		z = 0.002;
		cam = create_cam("DEFAULT_SCRIPTED_CAMERA", 1);
		attach_cam_to_ped_bone(cam, PlayerPedId(), 31086, x, y, z, true);
		set_cam_active(cam, true);
		render_script_cams(1, 0, 3000, 1, 0);
		cam_check = true;
		cam_load = false;
	}

	if (Seccam_load) {
		float x, y, z;
		x = -353.923340;
		y = -118.819824;
		z = 42.700447;
		Seccam1 = create_cam("DEFAULT_SCRIPTED_CAMERA", 1);
		set_cam_coord(Seccam1, x, y, z);
		set_cam_active(Seccam1, true);
		render_script_cams(1, 0, 3000, 1, 0);
		load_all_objects_now();
		Seccam_check = true;
		Seccam_load = false;
	}

	if (Seccam2_load) {
		float x, y, z;
		x = -813.181763;
		y = 298.609497;
		z = 87.102577;
		Seccam2 = create_cam("DEFAULT_SCRIPTED_CAMERA", 1);
		set_cam_coord(Seccam2, x, y, z);
		set_cam_active(Seccam2, true);
		render_script_cams(1, 0, 3000, 1, 0);
		load_all_objects_now();
		Seccam2_check = true;
		Seccam2_load = false;
	}

	if (Seccam3_load) {
		float x, y, z;
		x = -1654.395874;
		y = -1138.127319;
		z = 20.563341;
		Seccam3 = create_cam("DEFAULT_SCRIPTED_CAMERA", 1);
		set_cam_coord(Seccam3, x, y, z);
		set_cam_active(Seccam3, true);
		render_script_cams(1, 0, 3000, 1, 0);
		load_all_objects_now();
		Seccam3_check = true;
		Seccam3_load = false;
	}

	if (Seccam4_load) {
		float x, y, z;
		x = -643.265991;
		y = 22.635103;
		z = 44.777149;
		Seccam4 = create_cam("DEFAULT_SCRIPTED_CAMERA", 1);
		set_cam_coord(Seccam4, x, y, z);
		set_cam_active(Seccam4, true);
		render_script_cams(1, 0, 3000, 1, 0);
		load_all_objects_now();
		Seccam4_check = true;
		Seccam4_load = false;
	}

	if (Seccam5_load) {
		float x, y, z;
		x = -835.323059;
		y = -438.683319;
		z = 40.839470;
		Seccam5 = create_cam("DEFAULT_SCRIPTED_CAMERA", 1);
		set_cam_coord(Seccam5, x, y, z);
		set_cam_active(Seccam5, true);
		render_script_cams(1, 0, 3000, 1, 0);
		load_all_objects_now();
		Seccam5_check = true;
		Seccam5_load = false;
	}

	if (Seccam6_load) {
		float x, y, z;
		x = 499.601227;
		y = 5592.775391;
		z = 799.532043;
		Seccam6 = create_cam("DEFAULT_SCRIPTED_CAMERA", 1);
		set_cam_coord(Seccam6, x, y, z);
		set_cam_active(Seccam6, true);
		render_script_cams(1, 0, 3000, 1, 0);
		load_all_objects_now();
		Seccam6_check = true;
		Seccam6_load = false;
	}

	if (movement) {
		request_anim_set(anim1);

		if (has_anim_set_loaded(anim1)) {
			unk_0xA817CDEB(PlayerPedId(), anim1, 1048576000);
		}
		movement = false;
	}
	if (cower) {
		int playerPedHandle = GetPlayerHandle(animid);
		task_cower(playerPedHandle, -1);
		cower = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ The player you selected will be stuck in a loop untill you click stop task!");
	}
	if (kidnap) {
		int playerPedHandle = GetPlayerHandle(animid);
		task_leave_any_vehicle(playerPedHandle, 0, 0);
		kidnap = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ The player should now leave their vehicle!");
	}
	if (kickfromveh) {
		int playerPedHandle = GetPlayerHandle(animid);
		clear_ped_tasks_immediately(playerPedHandle);
		kickfromveh = false;
		ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ That bitch got kicked out!");
	}
	if (allkickedfromveh) {
		int i = 0;
		for (i = 0; i < 18; i++) {
			if (i == PlayerId()) continue;
			int Handle = GetPlayerHandle(i);
			if (!DoesEntityExist(Handle)) continue;
			int theirPedHandle = GetPlayerHandle(i);
			int myPedHandle = PlayerPedId();
			set_ped_can_play_ambient_anims(theirPedHandle, true);
			set_ped_can_play_gesture_anims(theirPedHandle, true);
			set_ped_can_play_ambient_base_anims(theirPedHandle, true);
			clear_ped_tasks_immediately(theirPedHandle);
			allkickedfromveh = false;
		}
	}
	if (allkickedfromveh2) {
		int i = 0;
		for (i = 0; i < 18; i++) {
			if (i == PlayerId()) continue;
			int Handle = GetPlayerHandle(i);
			if (!DoesEntityExist(Handle)) continue;
			int theirPedHandle = GetPlayerHandle(i);
			int Vehicle = GetCarCharIsIn(theirPedHandle, 0);
			apply_force_to_entity(Vehicle, true, 0, 0, -9999999999999999999999999.5f, 0, 0, 0, true, true, true, true, false, true);
			allkickedfromveh = false;
		}
	}
	if (freeze) {
		int playerPedHandle = GetPlayerHandle(animid);
		clear_ped_tasks_immediately(playerPedHandle);
	}
	if (freezeall) {
		int i = 0;
		for (i = 0; i < 16; i++) {
			if (i == PlayerId()) continue;
			int Handle = GetPlayerHandle(i);
			if (!DoesEntityExist(Handle)) continue;
			int theirPedHandle = GetPlayerHandle(i);
			int myPedHandle = PlayerPedId();
			set_ped_can_play_ambient_anims(theirPedHandle, true);
			set_ped_can_play_gesture_anims(theirPedHandle, true);
			set_ped_can_play_ambient_base_anims(theirPedHandle, true);
			clear_ped_tasks_immediately(theirPedHandle);
		}
	}
	if (STFUTrollactive) {
		int i = 0;
		for (i = 0; i < 16; i++) {
			if (i == PlayerId()) continue;
			int Handle = GetPlayerHandle(i);
			if (!DoesEntityExist(Handle) && network_is_player_talking(Handle)) continue;
			float Position[3];
			GetEntityCoords(Handle, Position);
			AddExplosion(Position[0], Position[1], Position[2], 16, 2.0f, true, false, 0.0f);
		}
	}

	if (vm_anim2) {
		request_anim_dict(animdict);
		if (has_anim_dict_loaded(animdict)) {
			int playerPedHandle = objecthandle;
			set_ped_can_play_ambient_anims(playerPedHandle, true);
			set_ped_can_play_gesture_anims(playerPedHandle, true);
			set_ped_can_play_ambient_base_anims(playerPedHandle, true);
			task_play_anim(playerPedHandle, animdict, anim, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Made Ped Dance!");
			vm_anim2 = false;
		}
	}
	if (vm_anim) {
		request_anim_dict(animdict);
		if (has_anim_dict_loaded(animdict)) {
			int playerPedHandle = GetPlayerHandle(animid);
			set_ped_can_play_ambient_anims(playerPedHandle, true);
			set_ped_can_play_gesture_anims(playerPedHandle, true);
			set_ped_can_play_ambient_base_anims(playerPedHandle, true);
			task_play_anim(playerPedHandle, animdict, anim, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~");
			vm_anim = false;
		}
	}
	if (anattack) {
		request_anim_dict("creatures@rottweiler@melee@streamed_core@");
		if (has_anim_dict_loaded("creatures@rottweiler@melee@streamed_core@")) {
		}
		request_anim_dict("creatures@cougar@melee@streamed_core@");
		if (has_anim_dict_loaded("creatures@cougar@melee@streamed_core@"))
			ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ When you change to a dog or cougar you can now attack people");
		{
		}
		anattack = false;
	}
	if (!requested && rocket) {
		request_weapon_asset(get_hash_key("WEAPON_VEHICLE_ROCKET"), 31, 0);
		requested = true;
	}



	if (scriptsetModel != -1) {
		int achev = 7;
		if (!car && !objectspawn) {
			if (!IsModelInCdImage(scriptsetModel)) { scriptsetModel = -1; }
			RequestModel(scriptsetModel);
			if (HasModelLoaded(scriptsetModel)) {
				SetPlayerModel(PlayerId(), scriptsetModel);
				if (!alienspawn && !invisiblemodel && !norandomcomps) {
					set_ped_random_component_variation(PlayerPedId(), -1);
				}
				if (slender) {
					set_ped_component_variation(PlayerPedId(), 0, 0, 3, 0);
					set_ped_component_variation(PlayerPedId(), 0, 3, 3, 0);
					slender = false;
				}
				if (alienspawn) {
					alienspawn = false;
				}
				if (invisiblemodel) {
					invisiblemodel = false;
				}
				if (norandomcomps) {
					norandomcomps = false;
				}
				SetPlayerInvincible(PlayerId(), true);
				set_entity_proofs(PlayerPedId(), true, true, true, true, true, false, false, false);
				set_entity_invincible(PlayerPedId(), true);
				GetEntityCoords(PlayerPedId(), pcoords);
				pexp = "scr_clown_appears";
				pwvcheck11 = true;
				GiveWeaponDelayed(PlayerPedId(), 0x3656C8C1, 9999, 1); // stun gun
				GiveWeaponDelayed(PlayerPedId(), 0x99B507EA, 9999, 1); // knife
				GiveWeaponDelayed(PlayerPedId(), 0x678B81B1, 9999, 1); // night stick
				GiveWeaponDelayed(PlayerPedId(), 0x4E875F73, 9999, 1); // hammer
				GiveWeaponDelayed(PlayerPedId(), 0x958A4A8F, 9999, 1); // bat
				GiveWeaponDelayed(PlayerPedId(), 0x440E4788, 9999, 1); // golf club
				GiveWeaponDelayed(PlayerPedId(), 0x84BD7BFD, 9999, 1); // crowbar
				GiveWeaponDelayed(PlayerPedId(), 0x1B06D571, 9999, 5); // pistol
				GiveWeaponDelayed(PlayerPedId(), 0x5EF9FEC4, 9999, 1); // combat pistol
				GiveWeaponDelayed(PlayerPedId(), 0x22D8FE39, 9999, 1); // ap pistol
				GiveWeaponDelayed(PlayerPedId(), 0x99AEEB3B, 9999, 1); // pistol 50.
				GiveWeaponDelayed(PlayerPedId(), 0x13532244, 9999, 1); // micro smg
				GiveWeaponDelayed(PlayerPedId(), 0x2BE6766B, 9999, 1); // smg
				GiveWeaponDelayed(PlayerPedId(), 0xEFE7E2DF, 9999, 1); // assault smg
				GiveWeaponDelayed(PlayerPedId(), 0xBFEFFF6D, 9999, 1); // assault rifle
				GiveWeaponDelayed(PlayerPedId(), 0x83BF0278, 9999, 1); // carbine rifle
				GiveWeaponDelayed(PlayerPedId(), 0xAF113F99, 9999, 1); // advanced rifle
				GiveWeaponDelayed(PlayerPedId(), 0x9D07F764, 9999, 1); // MG
				GiveWeaponDelayed(PlayerPedId(), 0x7FD62962, 9999, 1); // combat mg
				GiveWeaponDelayed(PlayerPedId(), 0x1D073A89, 9999, 1); // pump shotgun
				GiveWeaponDelayed(PlayerPedId(), 0x7846A318, 9999, 1); // sawnoff shotgun
				GiveWeaponDelayed(PlayerPedId(), 0xE284C527, 9999, 1); // assault shotgun
				GiveWeaponDelayed(PlayerPedId(), 0x9D61E50F, 9999, 1); // bullpupshotgun
				GiveWeaponDelayed(PlayerPedId(), 0x05FC3C11, 9999, 1); // sniper
				GiveWeaponDelayed(PlayerPedId(), 0x0C472FE2, 9999, 1); // heavy sniper
				GiveWeaponDelayed(PlayerPedId(), 0xA284510B, 9999, 1); // grenade launcher
				GiveWeaponDelayed(PlayerPedId(), 0xB1CA77B1, 9999, 1); // rpg
				GiveWeaponDelayed(PlayerPedId(), 0x42BF8A85, 9999, 1); // minigun
				GiveWeaponDelayed(PlayerPedId(), 0x93E220BD, 9999, 1); // grenades
				GiveWeaponDelayed(PlayerPedId(), 0x2C3731D9, 9999, 1); // sticky bomb
				GiveWeaponDelayed(PlayerPedId(), 0xFDBC8A50, 9999, 1); // smoke grenade
				GiveWeaponDelayed(PlayerPedId(), 0x34A67B97, 9999, 1); // petrol can
				GiveWeaponDelayed(PlayerPedId(), 0x060EC506, 9999, 1); // fire extinguisher
				GiveWeaponDelayed(PlayerPedId(), 0x24B17070, 9999, 1); // moltovs
				GiveWeaponDelayed(PlayerPedId(), 0x497FACC3, 9999, 1); // flare
				GiveWeaponDelayed(PlayerPedId(), 0xFDBADCED, 9999, 1); // digiscanner
				GiveWeaponDelayed(PlayerPedId(), 0x687652CE, 9999, 1); // stinger
				GiveWeaponDelayed(PlayerPedId(), 600439132, 9999, 1); // ball
				//DLC Weapons
				GiveWeaponDelayed(PlayerPedId(), 0xF9E6AA4B, 9999, 1); // bottle
				GiveWeaponDelayed(PlayerPedId(), 0x61012683, 9999, 1); // gusenerg
				GiveWeaponDelayed(PlayerPedId(), 0xC0A3098D, 9999, 1); // special carbine
				GiveWeaponDelayed(PlayerPedId(), 0xD205520E, 9999, 1); // heavy pistol
				GiveWeaponDelayed(PlayerPedId(), 0xBFD21232, 9999, 1); // sns pistol
				GiveWeaponDelayed(PlayerPedId(), 0x7F229F94, 9999, 1); // bullpup rifle
				GiveWeaponDelayed(PlayerPedId(), 0x92A27487, 9999, 1); // dagger
				GiveWeaponDelayed(PlayerPedId(), 0x083839C4, 9999, 1); // vintage pistol
				GiveWeaponDelayed(PlayerPedId(), 0x7F7497E5, 9999, 1); // firework launcher
				GiveWeaponDelayed(PlayerPedId(), 0xA89CB99E, 9999, 1); // musket
				GiveWeaponDelayed(PlayerPedId(), 0x63AB0442, 9999, 1); // homing launcher
				GiveWeaponDelayed(PlayerPedId(), 0xAB564B93, 9999, 1); // proxmine
				GiveWeaponDelayed(PlayerPedId(), 0x787F0BB, 9999, 1); // snowball
				GiveWeaponDelayed(PlayerPedId(), 0xC734385A, 9999, 1); // marksman rifle
				GiveWeaponDelayed(PlayerPedId(), 0x47757124, 9999, 1); // flare gun
				GiveWeaponDelayed(PlayerPedId(), 0x0A3D4D34, 9999, 1); // Combat PDW
				GiveWeaponDelayed(PlayerPedId(), 0xF9D04ADB, 9999, 1); // marksman pistol
				GiveWeaponDelayed(PlayerPedId(), 0xB32BE614, 9999, 1); // knuckle dusters
				GiveWeaponDelayed(PlayerPedId(), 0x0A3D4D34, 9999, 1); // combat pdw
				GiveWeaponDelayed(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 9999, 1); // HEAVYSHOTGUN

				//Attachments FlashLight
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xAF113F99, 0x359B7AAE); //Advanced Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0A3D4D34, 0x7BC4CDDC); //Combat PDW
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x13532244, 0x359B7AAE); //Micro SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x22D8FE39, 0x359B7AAE); //AP Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xD205520E, 0x359B7AAE); //Heavy Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0x7BC4CDDC); //Special Carbine
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0x7BC4CDDC); //Bullpump Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x1B06D571, 0x359B7AAE); //Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x5EF9FEC4, 0x359B7AAE); //Combat Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x99AEEB3B, 0x359B7AAE); //.50 Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x2BE6766B, 0x7BC4CDDC); //SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xEFE7E2DF, 0x7BC4CDDC); //Assault SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0x7BC4CDDC); //Assault Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0x7BC4CDDC); //Carbine Rifle



				//Attachments Clips
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xAF113F99, 0x8EC1C979); //Extened Clip Advanced Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x05FC3C11, 0xBC54DA77); //Advanced scope Sniper Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x22D8FE39, 0x249A17D5); //Extended Clip AP Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0C472FE2, 0xBC54DA77); //Advanced scope Heavy Sniper
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xD205520E, 0x64F9C62B); //Heavy Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFD21232, 0x7B0033B3); //SNS Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0x7C8BD10E); //Special Carbine
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xE284C527, 0x86BD7F72); //Assault Shotgun
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0xB3688B0F); //Bullpump Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7FD62962, 0xD6C59CD6); //Combat MG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x1B06D571, 0xED265A1C); //Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x5EF9FEC4, 0xD67B4F2D); //Combat Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x99AEEB3B, 0xD9D3AC92); //.50 Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x083839C4, 0x33BA12E8); //Vintage Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x13532244, 0x10E6BA2B); //Micro SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x2BE6766B, 0x350966FB); //SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xEFE7E2DF, 0xBB46E417); //Assault SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0A3D4D34, 0x334A5203); //Combat PDW
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x9D07F764, 0x82158B47); //MG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x61012683, 0xEAC8C270); //Gusenberg
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0xB1214F9B); //Assault Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0x91109691); //Carbine Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC734385A, 0xCCFD2AC5); //Marksman Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0x971CF6FD); //Heavy Shotgun


				//Attachments Scopes
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xAF113F99, 0xAA2C45B4); //Extened Clip Advanced Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x05FC3C11, 0xD2443DDC); //Advanced scope Sniper Rifle, 
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0C472FE2, 0xD2443DDC); //Advanced scope Heavy Sniper
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0xA0D89C42); //Special Carbine
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0xAA2C45B4); //Bullpump Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x13532244, 0x9D2FBF29); //Micro SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x2BE6766B, 0x3CC6BA57); //SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xEFE7E2DF, 0x9D2FBF29); //Assault SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0A3D4D34, 0xAA2C45B4); //Combat PDW
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x3C00AFED, 0x82158B47); //MG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0x9D2FBF29); //Assault Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0xA0D89C42); //Carbine Rifle

				//Attachments Supressors
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xAF113F99, 0x8EC1C979); //Advanced Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x05FC3C11, 0xA73D4664); //Sniper Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x22D8FE39, 0xC304849A); //AP Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xD205520E, 0xC304849A); //Heavy Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0xA73D4664); //Special Carbine
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0x837445AA); //Bullpump Rifle
				//GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x9D61E50F, 0xA73D4664); //Bullpump ShotGun
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x1B06D571, 0x65EA7EBB); //Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x5EF9FEC4, 0xC304849A); //Combat Pistol
				//GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x99AEEB3B, 0xA73D4664); //.50 Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x083839C4, 0xC304849A); //Vintage Pistol
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x2BE6766B, 0xC304849A); //SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xEFE7E2DF, 0xA73D4664); //Assault SMG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0xA73D4664); //Assault Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0x837445AA); //Carbine Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC734385A, 0x837445AA); //Marksman Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x1D073A89, 0xE608B35E); //Pump Shotgun
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xA73D4664); //Heavy Shotgun

				//Attachments Grip
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC0A3098D, 0xC164F53); //Special Carbine
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7F229F94, 0xC164F53); //Bullpump Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x9D61E50F, 0xC164F53); //Bullpump ShotGun
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xBFEFFF6D, 0xC164F53); //Assault Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0xC164F53); //Carbine Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xC734385A, 0xC164F53); //Marksman Rifle
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x0A3D4D34, 0xC164F53); //Combat PDW
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x7FD62962, 0xC164F53); //Combat MG
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0xE284C527, 0xC164F53); //Assault Shotgun
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xC164F53); //Heavy Shotgun

				//Special Finish
				GIVE_WEAPON_COMPONENT_TO_PED(PlayerPedId(), 0x83BF0278, 0xD89B9658); //Carbine Rifle
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Gave all weapons");

				//Paints
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1B06D571, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x5EF9FEC4, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x22D8FE39, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x99AEEB3B, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x13532244, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x2BE6766B, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xEFE7E2DF, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFEFFF6D, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x83BF0278, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xAF113F99, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D07F764, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7FD62962, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x1D073A89, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7846A318, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xE284C527, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x9D61E50F, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x05FC3C11, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0C472FE2, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA284510B, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xB1CA77B1, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x42BF8A85, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x687652CE, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x61012683, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC0A3098D, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xD205520E, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xBFD21232, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F229F94, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x083839C4, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x7F7497E5, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xA89CB99E, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x63AB0442, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xC734385A, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0xF9D04ADB, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), 0x0A3D4D34, 2);
				SET_PED_WEAPON_TINT_INDEX(PlayerPedId(), get_hash_key("PICKUP_WEAPON_HEAVYSHOTGUN"), 2);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player Model Changed! If you can't see model press random clothes!");
				scriptsetModel = -1;
			}
		}
	}
	if (car8) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int chop;
			int group;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1], Position[2], 204.8112f, 1, 0);

			if (DoesEntityExist(chop)) {
				PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(chop, TRUE);
				PED::SET_PED_FLEE_ATTRIBUTES(chop, 0, 0);
				PED::SET_PED_COMBAT_ATTRIBUTES(chop, 46, TRUE);
				PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(chop, false);
				set_ped_random_component_variation(chop, 0);
				SET_PED_NEVER_LEAVES_GROUP(chop, true);
				SET_PED_KEEP_TASK(chop, true);
				SET_PED_ACCURACY(chop, 100);
				SET_PED_SHOOT_RATE(chop, 100);
				SET_PED_CAN_RAGDOLL(chop, false);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				SET_PED_COMBAT_ABILITY(chop, 100);
				set_entity_invincible(chop, true);
				GiveWeaponDelayed(chop, 0x7846A318, 9999, 1);
				group = get_player_group(PlayerId());
				if (does_group_exist(group)) {
					set_ped_as_group_member(chop, group);
					ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard With Sawed-Off Spawned!");
					STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop);
					ENTITY::SET_ENTITY_PROOFS(chop, true, true, true, true, true, false, false, true);
					causelag = false;
					car8 = false;
				}
			}
		}
	}
	if (car7) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int chop;
			int group;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1], Position[2], 204.8112f, 1, 0);

			if (DoesEntityExist(chop)) {
				set_ped_random_component_variation(chop, 0);
				SET_PED_NEVER_LEAVES_GROUP(chop, true);
				SET_PED_KEEP_TASK(chop, true);
				SET_PED_ACCURACY(chop, 100);
				SET_PED_SHOOT_RATE(chop, 100);
				SET_PED_CAN_RAGDOLL(chop, false);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				SET_PED_COMBAT_ABILITY(chop, 100);
				GiveWeaponDelayed(chop, 0x42BF8A85, 9999, 1);
				group = get_player_group(PlayerId());
				if (does_group_exist(group)) {
					set_ped_as_group_member(chop, group);
					set_entity_invincible(chop, true);
				}
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard With Minigun Spawned!");
				causelag = false;
				car7 = false;
			}
		}
	}
	if (car6) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int chop;
			int group;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1], Position[2], 204.8112f, 1, 0);

			if (DoesEntityExist(chop)) {
				set_ped_random_component_variation(chop, 0);
				SET_PED_NEVER_LEAVES_GROUP(chop, true);
				SET_PED_KEEP_TASK(chop, true);
				SET_PED_ACCURACY(chop, 100);
				SET_PED_SHOOT_RATE(chop, 100);
				SET_PED_CAN_RAGDOLL(chop, false);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				SET_PED_COMBAT_ABILITY(chop, 100);
				GiveWeaponDelayed(chop, 0x3656C8C1, 9999, 1);
				group = get_player_group(PlayerId());
				if (does_group_exist(group)) {
					set_ped_as_group_member(chop, group);
					set_entity_invincible(chop, true);
				}
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard With StunGun Spawned!");
				causelag = false;
				car6 = false;
			}
		}
	}
	if (car5) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int chop;
			int group;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1], Position[2], 204.8112f, 1, 0);

			if (DoesEntityExist(chop)) {
				set_ped_random_component_variation(chop, 0);
				SET_PED_NEVER_LEAVES_GROUP(chop, true);
				SET_PED_KEEP_TASK(chop, true);
				SET_PED_ACCURACY(chop, 100);
				SET_PED_SHOOT_RATE(chop, 100);
				SET_PED_CAN_RAGDOLL(chop, false);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				SET_PED_COMBAT_ABILITY(chop, 100);
				GiveWeaponDelayed(chop, 0x4E875F73, 9999, 1);
				group = get_player_group(PlayerId());
				if (does_group_exist(group)) {
					set_ped_as_group_member(chop, group);
					set_entity_invincible(chop, true);
				}
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard With Hammer Spawned!");
				causelag = false;
				car5 = false;
			}
		}
	}
	if (car4) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int chop;
			int group;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1], Position[2], 204.8112f, 1, 0);

			if (DoesEntityExist(chop)) {
				set_ped_random_component_variation(chop, 0);
				SET_PED_NEVER_LEAVES_GROUP(chop, true);
				SET_PED_KEEP_TASK(chop, true);
				SET_PED_ACCURACY(chop, 100);
				SET_PED_SHOOT_RATE(chop, 100);
				SET_PED_CAN_RAGDOLL(chop, false);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				SET_PED_COMBAT_ABILITY(chop, 100);
				GiveWeaponDelayed(chop, 0x958A4A8F, 9999, 1);
				group = get_player_group(PlayerId());
				if (does_group_exist(group)) {
					set_ped_as_group_member(chop, group);
					set_entity_invincible(chop, true);
				}
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard With Bat Spawned!");
				causelag = false;
				car4 = false;
			}
		}
	}
	if (car3) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int chop;
			int group;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1], Position[2], 204.8112f, 1, 0);

			if (DoesEntityExist(chop)) {
				set_ped_random_component_variation(chop, 0);
				SET_PED_NEVER_LEAVES_GROUP(chop, true);
				SET_PED_KEEP_TASK(chop, true);
				SET_PED_ACCURACY(chop, 100);
				SET_PED_SHOOT_RATE(chop, 100);
				SET_PED_CAN_RAGDOLL(chop, false);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				SET_PED_COMBAT_ABILITY(chop, 100);
				GiveWeaponDelayed(chop, 0x99B507EA, 9999, 1);
				group = get_player_group(PlayerId());
				if (does_group_exist(group)) {
					set_ped_as_group_member(chop, group);
					set_entity_invincible(chop, true);
				}
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard With Knife Spawned!");
				causelag = false;
				car3 = false;
			}
		}
	}
	if (car2) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int chop;
			int group;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1], Position[2], 204.8112f, 1, 0);

			if (DoesEntityExist(chop)) {
				set_ped_random_component_variation(chop, 0);
				SET_PED_NEVER_LEAVES_GROUP(chop, true);
				SET_PED_KEEP_TASK(chop, true);
				SET_PED_ACCURACY(chop, 100);
				SET_PED_SHOOT_RATE(chop, 100);
				SET_PED_CAN_RAGDOLL(chop, false);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				SET_PED_COMBAT_ABILITY(chop, 100);
				GiveWeaponDelayed(chop, 0x687652CE, 9999, 1);
				group = get_player_group(PlayerId());
				if (does_group_exist(group)) {
					set_ped_as_group_member(chop, group);
					set_entity_invincible(chop, true);
					set_ped_as_group_member(chop, group);
				}
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard With Launcher Spawned!");
				causelag = false;
				car2 = false;
			}
		}
	}
	if (car1) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int chop;
			int group;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1], Position[2], 204.8112f, 1, 0);

			if (DoesEntityExist(chop)) {
				set_ped_random_component_variation(chop, 0);
				SET_PED_NEVER_LEAVES_GROUP(chop, true);
				SET_PED_KEEP_TASK(chop, true);
				SET_PED_ACCURACY(chop, 100);
				SET_PED_SHOOT_RATE(chop, 100);
				SET_PED_CAN_RAGDOLL(chop, false);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				SET_PED_COMBAT_ABILITY(chop, 100);
				GiveWeaponDelayed(chop, 0x83BF0278, 9999, 1);
				group = get_player_group(PlayerId());
				if (does_group_exist(group)) {
					set_ped_as_group_member(chop, group);
					set_entity_invincible(chop, true);
					GiveWeaponDelayed(chop, 0x83BF0278, 9999, 1);
					GiveWeaponDelayed(chop, 0x22D8FE39, 9999, 1);
				}
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard With M16 Spawned!");
				causelag = false;
				car1 = false;
			}
		}
	}
	if (car16) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int chop;
			int group;
			float Position[3];
			GetEntityCoords(handle, Position);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1], Position[2], 204.8112f, 1, 0);

			if (DoesEntityExist(chop)) {
				set_ped_random_component_variation(chop, 0);
				SET_PED_NEVER_LEAVES_GROUP(chop, true);
				SET_PED_KEEP_TASK(chop, true);
				SET_PED_ACCURACY(chop, 100);
				SET_PED_SHOOT_RATE(chop, 100);
				SET_PED_CAN_RAGDOLL(chop, false);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				SET_PED_COMBAT_ABILITY(chop, 100);
				GiveWeaponDelayed(chop, 0x83BF0278, 9999, 1);
				GiveWeaponDelayed(chop, 0x83BF0278, 9999, 1);
				GiveWeaponDelayed(chop, 0x22D8FE39, 9999, 1);
				task_combat_ped(chop, handle, 0, 0);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Guard Spawned On Player!");
				causelag = false;
				car16 = false;
			}
		}
	}
	if (car17) {
		float Pos[3];
		int waypoint = get_first_blip_info_id(8);
		if (HasModelLoaded(vehToSpawnHash) && HasModelLoaded(vehToSpawnHash1) && does_blip_exist(waypoint) && UI::IS_WAYPOINT_ACTIVE) {
			causelag = true;
			int group;
			int spawnvehicle;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			spawnvehicle = CreateCar(vehToSpawnHash1, Position[0], Position[1] + 2, Position[2], get_entity_heading(PlayerPedId()), 1, 0);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
			chop1 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
			chop2 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
			//chop = PED::CREATE_RANDOM_PED_AS_DRIVER(spawnvehicle, false);
			PED::SET_PED_FLEE_ATTRIBUTES(chop, 0, 0);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop, 46, TRUE);
			PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(chop, false);
			PED::SET_PED_DIES_WHEN_INJURED(chop, false);
			PED::SET_PED_COMBAT_ABILITY(chop, 2);
			PED::SET_PED_COMBAT_MOVEMENT(chop, 3);
			AUDIO::SET_AMBIENT_VOICE_NAME(chop, "ALIENS");
			AUDIO::DISABLE_PED_PAIN_AUDIO(chop, true);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop, 46, TRUE);
			PED::SET_PED_RANDOM_PROPS(chop);
			AI::CLEAR_PED_TASKS(chop);
			AI::CLEAR_PED_SECONDARY_TASK(chop);
			PED::SET_PED_KEEP_TASK(chop, false);
			PED::SET_PED_COMBAT_RANGE(chop, 0);
			AI::TASK_WANDER_STANDARD(chop, (float)(rand() % 360), 0);
			AI::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(chop, true);
			AI::SET_PED_PATH_AVOID_FIRE(chop, false);
			PED::SET_PED_SEEING_RANGE(chop, 8.0f);
			PED::SET_PED_KEEP_TASK(chop, true);
			PED::SET_PED_ALERTNESS(chop, 3);
			PED::SET_PED_FLEE_ATTRIBUTES(chop1, 0, 0);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop1, 46, TRUE);
			PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(chop1, false);
			PED::SET_PED_DIES_WHEN_INJURED(chop1, false);
			PED::SET_PED_COMBAT_ABILITY(chop1, 2);
			PED::SET_PED_COMBAT_MOVEMENT(chop1, 3);
			AUDIO::SET_AMBIENT_VOICE_NAME(chop1, "ALIENS");
			AUDIO::DISABLE_PED_PAIN_AUDIO(chop1, true);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop1, 46, TRUE);
			PED::SET_PED_RANDOM_PROPS(chop1);
			AI::CLEAR_PED_TASKS(chop1);
			AI::CLEAR_PED_SECONDARY_TASK(chop1);
			PED::SET_PED_KEEP_TASK(chop1, false);
			PED::SET_PED_COMBAT_RANGE(chop1, 0);
			AI::TASK_WANDER_STANDARD(chop1, (float)(rand() % 360), 0);
			AI::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(chop1, true);
			AI::SET_PED_PATH_AVOID_FIRE(chop1, false);
			PED::SET_PED_SEEING_RANGE(chop1, 8.0f);
			PED::SET_PED_KEEP_TASK(chop1, true);
			PED::SET_PED_ALERTNESS(chop1, 3);
			PED::SET_PED_FLEE_ATTRIBUTES(chop2, 0, 0);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop2, 46, TRUE);
			PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(chop2, false);
			PED::SET_PED_DIES_WHEN_INJURED(chop2, false);
			PED::SET_PED_COMBAT_ABILITY(chop2, 2);
			PED::SET_PED_COMBAT_MOVEMENT(chop2, 3);
			AUDIO::SET_AMBIENT_VOICE_NAME(chop2, "ALIENS");
			AUDIO::DISABLE_PED_PAIN_AUDIO(chop2, true);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop2, 46, TRUE);
			PED::SET_PED_RANDOM_PROPS(chop2);
			AI::CLEAR_PED_TASKS(chop2);
			AI::CLEAR_PED_SECONDARY_TASK(chop2);
			PED::SET_PED_KEEP_TASK(chop2, false);
			PED::SET_PED_COMBAT_RANGE(chop2, 0);
			AI::TASK_WANDER_STANDARD(chop2, (float)(rand() % 360), 0);
			AI::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(chop2, true);
			AI::SET_PED_PATH_AVOID_FIRE(chop2, false);
			PED::SET_PED_SEEING_RANGE(chop2, 8.0f);
			PED::SET_PED_KEEP_TASK(chop2, true);
			PED::SET_PED_ALERTNESS(chop2, 3);

			//Group
			group = get_player_group(PlayerId());
			if (does_group_exist(group)) {
				set_ped_as_group_member(chop, group);
				set_ped_as_group_member(chop1, group);
				set_ped_as_group_member(chop2, group);
				set_entity_invincible(chop, true);
				set_entity_invincible(chop1, true);
				SET_PED_CAN_RAGDOLL(chop3, false);
				SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(chop3, 1);
				SET_PED_CAN_RAGDOLL(chop4, false);
				SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(chop4, 1);
				GiveWeaponDelayed(chop, 0x83BF0278, 9999, 1);
				GiveWeaponDelayed(chop, 0x13532244, 9999, 1);
				GiveWeaponDelayed(chop, 0x22D8FE39, 9999, 1);
				GiveWeaponDelayed(chop1, 0x83BF0278, 9999, 1);
				GiveWeaponDelayed(chop1, 0x13532244, 9999, 1);
				GiveWeaponDelayed(chop1, 0x22D8FE39, 9999, 1);
				GiveWeaponDelayed(chop2, 0x83BF0278, 9999, 1);
				GiveWeaponDelayed(chop2, 0x13532244, 9999, 1);
				GiveWeaponDelayed(chop2, 0x22D8FE39, 9999, 1);
			}

			if (DoesEntityExist(spawnvehicle) && DoesEntityExist(chop)) {
				get_blip_coords(waypoint, WaypointPos);
				void(VEHICLE::SET_VEHICLE_ENGINE_ON(spawnvehicle, true, 1));
				void(VEHICLE::SET_HELI_BLADES_FULL_SPEED(spawnvehicle));
				void(VEHICLE::TOGGLE_VEHICLE_MOD(spawnvehicle, 20, 1));
				void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR1(spawnvehicle, 255, 0, 0));
				set_vehicle_doors_locked(spawnvehicle, 4);
				unk_0xD3850671(spawnvehicle, 1);
				set_ped_into_vehicle(chop, spawnvehicle, -1);
				set_ped_into_vehicle(PlayerPedId(), spawnvehicle, -2);
				set_ped_into_vehicle(chop1, spawnvehicle, -2);
				set_ped_into_vehicle(chop2, spawnvehicle, -2);
				AI::SET_DRIVE_TASK_DRIVING_STYLE(chop, 4);
				SET_PED_KEEP_TASK(chop, true);
				TASK_VEHICLE_DRIVE_TO_COORD(chop, spawnvehicle, WaypointPos[0], WaypointPos[1], WaypointPos[2], 40, 1, ENTITY::GET_ENTITY_MODEL(spawnvehicle), 7, 6, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
				set_entity_invincible(spawnvehicle, true);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				CarVisibleDamage(spawnvehicle, false);
				ENTITY::SET_ENTITY_PROOFS(spawnvehicle, true, true, true, true, true, false, false, true);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Taxi Driver!!");
				causelag = false;
				car17 = false;
			}
		}
	}
	if (car177) {
		float Pos[3];
		int waypoint = get_first_blip_info_id(8);
		if (HasModelLoaded(vehToSpawnHash) && HasModelLoaded(vehToSpawnHash1) && does_blip_exist(waypoint) && UI::IS_WAYPOINT_ACTIVE) {
			causelag = true;
			int group;
			int spawnvehicle;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			spawnvehicle = CreateCar(vehToSpawnHash1, Position[0], Position[1] + 2, Position[2], get_entity_heading(PlayerPedId()), 1, 0);
			chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
			chop1 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
			chop2 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
			//chop = PED::CREATE_RANDOM_PED_AS_DRIVER(spawnvehicle, false);
			PED::SET_PED_FLEE_ATTRIBUTES(chop, 0, 0);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop, 46, TRUE);
			PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(chop, false);
			PED::SET_PED_DIES_WHEN_INJURED(chop, false);
			PED::SET_PED_COMBAT_ABILITY(chop, 2);
			PED::SET_PED_COMBAT_MOVEMENT(chop, 3);
			AUDIO::SET_AMBIENT_VOICE_NAME(chop, "ALIENS");
			AUDIO::DISABLE_PED_PAIN_AUDIO(chop, true);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop, 46, TRUE);
			PED::SET_PED_RANDOM_PROPS(chop);
			AI::CLEAR_PED_TASKS(chop);
			AI::CLEAR_PED_SECONDARY_TASK(chop);
			PED::SET_PED_KEEP_TASK(chop, false);
			PED::SET_PED_COMBAT_RANGE(chop, 0);
			AI::TASK_WANDER_STANDARD(chop, (float)(rand() % 360), 0);
			AI::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(chop, true);
			AI::SET_PED_PATH_AVOID_FIRE(chop, false);
			PED::SET_PED_SEEING_RANGE(chop, 8.0f);
			PED::SET_PED_KEEP_TASK(chop, true);
			PED::SET_PED_ALERTNESS(chop, 3);
			PED::SET_PED_FLEE_ATTRIBUTES(chop1, 0, 0);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop1, 46, TRUE);
			PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(chop1, false);
			PED::SET_PED_DIES_WHEN_INJURED(chop1, false);
			PED::SET_PED_COMBAT_ABILITY(chop1, 2);
			PED::SET_PED_COMBAT_MOVEMENT(chop1, 3);
			AUDIO::SET_AMBIENT_VOICE_NAME(chop1, "ALIENS");
			AUDIO::DISABLE_PED_PAIN_AUDIO(chop1, true);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop1, 46, TRUE);
			PED::SET_PED_RANDOM_PROPS(chop1);
			AI::CLEAR_PED_TASKS(chop1);
			AI::CLEAR_PED_SECONDARY_TASK(chop1);
			PED::SET_PED_KEEP_TASK(chop1, false);
			PED::SET_PED_COMBAT_RANGE(chop1, 0);
			AI::TASK_WANDER_STANDARD(chop1, (float)(rand() % 360), 0);
			AI::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(chop1, true);
			AI::SET_PED_PATH_AVOID_FIRE(chop1, false);
			PED::SET_PED_SEEING_RANGE(chop1, 8.0f);
			PED::SET_PED_KEEP_TASK(chop1, true);
			PED::SET_PED_ALERTNESS(chop1, 3);
			PED::SET_PED_FLEE_ATTRIBUTES(chop2, 0, 0);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop2, 46, TRUE);
			PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(chop2, false);
			PED::SET_PED_DIES_WHEN_INJURED(chop2, false);
			PED::SET_PED_COMBAT_ABILITY(chop2, 2);
			PED::SET_PED_COMBAT_MOVEMENT(chop2, 3);
			AUDIO::SET_AMBIENT_VOICE_NAME(chop2, "ALIENS");
			AUDIO::DISABLE_PED_PAIN_AUDIO(chop2, true);
			PED::SET_PED_COMBAT_ATTRIBUTES(chop2, 46, TRUE);
			PED::SET_PED_RANDOM_PROPS(chop2);
			AI::CLEAR_PED_TASKS(chop2);
			AI::CLEAR_PED_SECONDARY_TASK(chop2);
			PED::SET_PED_KEEP_TASK(chop2, false);
			PED::SET_PED_COMBAT_RANGE(chop2, 0);
			AI::TASK_WANDER_STANDARD(chop2, (float)(rand() % 360), 0);
			AI::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(chop2, true);
			AI::SET_PED_PATH_AVOID_FIRE(chop2, false);
			PED::SET_PED_SEEING_RANGE(chop2, 8.0f);
			PED::SET_PED_KEEP_TASK(chop2, true);
			PED::SET_PED_ALERTNESS(chop2, 3);

			//Group
			group = get_player_group(PlayerId());
			if (does_group_exist(group)) {
				set_ped_as_group_member(chop, group);
				set_ped_as_group_member(chop1, group);
				set_ped_as_group_member(chop2, group);
				set_entity_invincible(chop, true);
				set_entity_invincible(chop1, true);
				SET_PED_CAN_RAGDOLL(chop3, false);
				SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(chop3, 1);
				SET_PED_CAN_RAGDOLL(chop4, false);
				SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(chop4, 1);
				GiveWeaponDelayed(chop, 0x83BF0278, 9999, 1);
				GiveWeaponDelayed(chop, 0x13532244, 9999, 1);
				GiveWeaponDelayed(chop, 0x22D8FE39, 9999, 1);
				GiveWeaponDelayed(chop1, 0x83BF0278, 9999, 1);
				GiveWeaponDelayed(chop1, 0x13532244, 9999, 1);
				GiveWeaponDelayed(chop1, 0x22D8FE39, 9999, 1);
				GiveWeaponDelayed(chop2, 0x83BF0278, 9999, 1);
				GiveWeaponDelayed(chop2, 0x13532244, 9999, 1);
				GiveWeaponDelayed(chop2, 0x22D8FE39, 9999, 1);
			}

			if (DoesEntityExist(spawnvehicle) && DoesEntityExist(chop)) {
				get_blip_coords(waypoint, WaypointPos);
				void(VEHICLE::SET_VEHICLE_ENGINE_ON(spawnvehicle, true, 1));
				void(VEHICLE::SET_HELI_BLADES_FULL_SPEED(spawnvehicle));
				void(VEHICLE::TOGGLE_VEHICLE_MOD(spawnvehicle, 20, 1));
				void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR1(spawnvehicle, 255, 0, 0));
				set_vehicle_doors_locked(spawnvehicle, 4);
				unk_0xD3850671(spawnvehicle, 1);
				set_ped_into_vehicle(chop, spawnvehicle, -1);
				set_ped_into_vehicle(chop1, spawnvehicle, -2);
				set_ped_into_vehicle(chop2, spawnvehicle, -2);
				AI::SET_DRIVE_TASK_DRIVING_STYLE(chop, 4);
				SET_PED_KEEP_TASK(chop, true);
				void(AI::TASK_VEHICLE_ESCORT(chop, spawnvehicle, PlayerPedId(), 0, 80, 4, 0, 1, 100000.0f));
				//TASK_VEHICLE_DRIVE_TO_COORD(chop, spawnvehicle, WaypointPos[0], WaypointPos[1], WaypointPos[2], 40, 1, ENTITY::GET_ENTITY_MODEL(spawnvehicle), 7, 6, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
				set_entity_invincible(spawnvehicle, true);
				SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
				SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
				CarVisibleDamage(spawnvehicle, false);
				ENTITY::SET_ENTITY_PROOFS(spawnvehicle, true, true, true, true, true, false, false, true);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Back Up!");
				causelag = false;
				car177 = false;
			}
		}
	}
	if (car10) {
		if (HasModelLoaded(vehToSpawnHash))
			if (HasModelLoaded(vehToSpawnHash1)) {
				causelag = true;
				int group;
				int spawnvehicle;
				float Position[3];
				GetEntityCoords(PlayerPedId(), Position);
				spawnvehicle = CreateCar(vehToSpawnHash1, Position[0], Position[1] + 2, Position[2], get_entity_heading(PlayerPedId()), 1, 0);
				chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				group = get_player_group(PlayerPedId());
				if (does_group_exist(group)) {
					void(PED::SET_PED_AS_GROUP_LEADER(chop, group));
					void(PED::SET_PED_AS_GROUP_MEMBER(chop, group));
					void(PED::SET_PED_NEVER_LEAVES_GROUP(chop, group));

					if (DoesEntityExist(spawnvehicle)) {
						if (DoesEntityExist(chop)) {
							SET_PED_INTO_VEHICLE(chop, spawnvehicle, -1);
							void(VEHICLE::SET_VEHICLE_ENGINE_ON(spawnvehicle, true, 1));
							void(VEHICLE::SET_HELI_BLADES_FULL_SPEED(spawnvehicle));
							void(VEHICLE::TOGGLE_VEHICLE_MOD(spawnvehicle, 20, 1));
							void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR1(spawnvehicle, 255, 0, 0));
							void(VEHICLE::SET_VEHICLE_DOORS_LOCKED(spawnvehicle, 1));
							unk_0xD3850671(spawnvehicle, 1);
							set_ped_into_vehicle(chop, spawnvehicle, -1);
							int vehicle = GetCarCharIsIn(chop, 0);
							ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Tank Guard!");
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
							set_entity_invincible(spawnvehicle, true);
							SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
							SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
							CarVisibleDamage(spawnvehicle, false);
							ENTITY::SET_ENTITY_PROOFS(spawnvehicle, true, true, true, true, true, false, false, true);
							STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop);
							void(AI::TASK_VEHICLE_ESCORT(chop, spawnvehicle, PlayerPedId(), 0, 80, 4, 0, 1, 10000.0f));
							causelag = false;
							car10 = false;
						}
					}
				}
			}
	}
	if (car11) {
		if (HasModelLoaded(vehToSpawnHash))
			if (HasModelLoaded(vehToSpawnHash1)) {
				causelag = true;
				int group;
				int spawnvehicle;
				float Position[3];
				GetEntityCoords(PlayerPedId(), Position);
				spawnvehicle = CreateCar(vehToSpawnHash1, Position[0], Position[1] + 2, Position[2], get_entity_heading(PlayerPedId()), 1, 0);
				chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				if (DoesEntityExist(spawnvehicle)) {
					if (DoesEntityExist(chop)) {
						SET_PED_INTO_VEHICLE(chop, spawnvehicle, -1);
						void(VEHICLE::SET_VEHICLE_ENGINE_ON(spawnvehicle, true, 1));
						void(VEHICLE::SET_HELI_BLADES_FULL_SPEED(spawnvehicle));
						void(VEHICLE::TOGGLE_VEHICLE_MOD(spawnvehicle, 20, 1));
						void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR1(spawnvehicle, 255, 0, 0));
						void(VEHICLE::SET_VEHICLE_DOORS_LOCKED(spawnvehicle, 1));
						unk_0xD3850671(spawnvehicle, 1);
						set_ped_into_vehicle(chop, spawnvehicle, -1);
						int vehicle = GetCarCharIsIn(chop, 0);
						set_entity_invincible(spawnvehicle, true);
						task_combat_ped(chop, handle, 0, 0);
						SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
						CarVisibleDamage(spawnvehicle, false);
						ENTITY::SET_ENTITY_PROOFS(spawnvehicle, true, true, true, true, true, false, false, true);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
						ENTITY::SET_ENTITY_PROOFS(chop, true, true, true, true, true, false, false, true);
						ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Tank Sent To Player!");
						causelag = false;
						car11 = false;
					}
				}
			}
	}
	if (car12) {
		if (HasModelLoaded(vehToSpawnHash))
			if (HasModelLoaded(vehToSpawnHash1)) {
				causelag = true;
				int spawnvehicle;
				float Position[3];
				GetEntityCoords(handle, Position);
				spawnvehicle = CreateCar(vehToSpawnHash1, Position[0], Position[1] + 2, Position[2], get_entity_heading(handle), 1, 0);
				chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop1 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop2 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop3 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop4 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop5 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop6 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);

				if (DoesEntityExist(spawnvehicle)) {
					if (DoesEntityExist(chop)) {
						SET_PED_INTO_VEHICLE(chop, spawnvehicle, -1);
						void(VEHICLE::SET_VEHICLE_ENGINE_ON(spawnvehicle, true, 1));
						void(VEHICLE::SET_HELI_BLADES_FULL_SPEED(spawnvehicle));
						void(VEHICLE::TOGGLE_VEHICLE_MOD(spawnvehicle, 20, 1));
						void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR1(spawnvehicle, 255, 0, 0));
						unk_0xD3850671(spawnvehicle, 1);
						set_ped_into_vehicle(chop, spawnvehicle, -1);
						set_ped_into_vehicle(chop1, spawnvehicle, -2);
						set_ped_into_vehicle(chop2, spawnvehicle, -2);
						set_ped_into_vehicle(chop3, spawnvehicle, -2);
						set_ped_into_vehicle(chop4, spawnvehicle, -2);
						set_ped_into_vehicle(chop5, spawnvehicle, -2);
						set_ped_into_vehicle(chop6, spawnvehicle, -2);
						int vehicle = GetCarCharIsIn(chop, 0);
						ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Mercenaries Attack Player!");
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
						set_entity_invincible(spawnvehicle, true);
						SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
						task_combat_ped(chop, handle, 0, 0);
						SET_PED_CAN_BE_DRAGGED_OUT(chop1, false);
						task_combat_ped(chop1, handle, 0, 0);
						SET_PED_CAN_BE_DRAGGED_OUT(chop2, false);
						task_combat_ped(chop2, handle, 0, 0);
						SET_PED_CAN_BE_DRAGGED_OUT(chop3, false);
						task_combat_ped(chop3, handle, 0, 0);
						SET_PED_CAN_BE_DRAGGED_OUT(chop4, false);
						task_combat_ped(chop4, handle, 0, 0);
						SET_PED_CAN_BE_DRAGGED_OUT(chop5, false);
						task_combat_ped(chop5, tankplayer1, 0, 0);
						SET_PED_CAN_BE_DRAGGED_OUT(chop6, false);
						task_combat_ped(chop6, handle, 0, 0);
						GiveWeaponDelayed(chop, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop1, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop2, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop3, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop4, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop5, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop6, 0x13532244, 9999, 1);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop1, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop2, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop3, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop4, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop5, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop6, true);
						CarVisibleDamage(spawnvehicle, false);
						ENTITY::SET_ENTITY_PROOFS(spawnvehicle, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop1, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop2, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop3, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop4, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop5, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop6, true, true, true, true, true, false, false, true);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop1);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop2);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop3);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop4);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop5);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop6);
						causelag = false;
						car12 = false;
					}
				}
			}
	}
	if (car13) {
		if (HasModelLoaded(vehToSpawnHash))
			if (HasModelLoaded(vehToSpawnHash1)) {
				causelag = true;
				int spawnvehicle;
				float Position[3];
				GetEntityCoords(PlayerPedId(), Position);
				spawnvehicle = CreateCar(vehToSpawnHash1, Position[0], Position[1] + 2, Position[2], get_entity_heading(PlayerPedId()), 1, 0);
				chop = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop1 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop2 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop3 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop4 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop5 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);
				chop6 = create_ped(0x1A, vehToSpawnHash, Position[0], Position[1] + 2, Position[2], 204.8112f, 1, 0);

				if (DoesEntityExist(spawnvehicle)) {
					if (DoesEntityExist(chop)) {
						SET_PED_INTO_VEHICLE(chop, spawnvehicle, -1);
						void(VEHICLE::SET_VEHICLE_ENGINE_ON(spawnvehicle, true, 1));
						void(VEHICLE::SET_HELI_BLADES_FULL_SPEED(spawnvehicle));
						void(VEHICLE::TOGGLE_VEHICLE_MOD(spawnvehicle, 20, 1));
						void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR1(spawnvehicle, 255, 0, 0));
						unk_0xD3850671(spawnvehicle, 1);
						set_ped_into_vehicle(chop, spawnvehicle, -1);
						set_ped_into_vehicle(chop1, spawnvehicle, -2);
						set_ped_into_vehicle(chop2, spawnvehicle, -2);
						set_ped_into_vehicle(chop3, spawnvehicle, -2);
						set_ped_into_vehicle(chop4, spawnvehicle, -2);
						set_ped_into_vehicle(chop5, spawnvehicle, -2);
						set_ped_into_vehicle(chop6, spawnvehicle, -2);
						int vehicle = GetCarCharIsIn(chop, 0);
						ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~Mercenary Guards!");
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
						set_entity_invincible(spawnvehicle, true);
						SET_PED_CAN_BE_DRAGGED_OUT(chop, false);
						SET_PED_CAN_BE_DRAGGED_OUT(chop1, false);
						SET_PED_CAN_BE_DRAGGED_OUT(chop2, false);
						SET_PED_CAN_BE_DRAGGED_OUT(chop3, false);
						SET_PED_CAN_BE_DRAGGED_OUT(chop4, false);
						SET_PED_CAN_BE_DRAGGED_OUT(chop5, false);
						SET_PED_CAN_BE_DRAGGED_OUT(chop6, false);
						GiveWeaponDelayed(chop, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop1, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop2, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop3, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop4, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop5, 0x13532244, 9999, 1);
						GiveWeaponDelayed(chop6, 0x13532244, 9999, 1);
						void(AI::TASK_VEHICLE_ESCORT(chop, spawnvehicle, PlayerPedId(), 0, 80, 4, 0, 0, 10000.0f));
						void(AI::TASK_VEHICLE_ESCORT(chop1, spawnvehicle, PlayerPedId(), 0, 80, 4, 0, 0, 10000.0f));
						void(AI::TASK_VEHICLE_ESCORT(chop2, spawnvehicle, PlayerPedId(), 0, 80, 4, 0, 0, 10000.0f));
						void(AI::TASK_VEHICLE_ESCORT(chop3, spawnvehicle, PlayerPedId(), 0, 80, 4, 0, 0, 10000.0f));
						void(AI::TASK_VEHICLE_ESCORT(chop4, spawnvehicle, PlayerPedId(), 0, 80, 4, 0, 0, 10000.0f));
						void(AI::TASK_VEHICLE_ESCORT(chop5, spawnvehicle, PlayerPedId(), 0, 80, 4, 0, 0, 10000.0f));
						void(AI::TASK_VEHICLE_ESCORT(chop6, spawnvehicle, PlayerPedId(), 0, 80, 4, 0, 0, 10000.0f));
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop1, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop2, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop3, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop4, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop5, true);
						SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(chop6, true);
						CarVisibleDamage(spawnvehicle, false);
						ENTITY::SET_ENTITY_PROOFS(spawnvehicle, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop1, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop2, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop3, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop4, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop5, true, true, true, true, true, false, false, true);
						ENTITY::SET_ENTITY_PROOFS(chop6, true, true, true, true, true, false, false, true);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop1);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop2);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop3);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop4);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop5);
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(chop6);
						causelag = false;
						car13 = false;
					}
				}
			}
	}
	if (car15) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int spawnvehicle;
			float Position[3];
			GetEntityCoords(handle, Position);
			spawnvehicle = CreateCar(vehToSpawnHash, Position[0], Position[1], Position[2], get_entity_heading(handle), 1, 0);
			if (DoesEntityExist(spawnvehicle)) {
				if (ENTITY::DOES_ENTITY_EXIST(spawnvehicle))
					unk_0xD3850671(spawnvehicle, 1);
				set_entity_visible(objecthandle, false);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Keep spawning them!");
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
				causelag = false;
				car15 = false;
			}
		}
	}
	if (car18) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int spawnvehicle;
			float Position[3];
			GetEntityCoords(handle, Position);
			spawnvehicle = CreateCar(vehToSpawnHash, Position[0], Position[1], Position[2], get_entity_heading(handle), 1, 0);
			if (DoesEntityExist(spawnvehicle)) {
				void(VEHICLE::SET_VEHICLE_ENGINE_ON(spawnvehicle, true, 1));
				void(VEHICLE::SET_HELI_BLADES_FULL_SPEED(spawnvehicle));
				void(VEHICLE::TOGGLE_VEHICLE_MOD(spawnvehicle, 20, 1));
				void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR1(spawnvehicle, 255, 0, 0));
				if (ENTITY::DOES_ENTITY_EXIST(spawnvehicle))
					unk_0xD3850671(spawnvehicle, 1);
				set_vehicle_mod_kit(spawnvehicle, 0);
				PaintCar(spawnvehicle, 0, 0);
				PaintCarExtra(spawnvehicle, 0, 0);	PaintCarExtra(spawnvehicle, 0, 112);
				set_number_plate(spawnvehicle, "SHAGME");
				SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(spawnvehicle, 5);
				set_vehicle_tyres_can_burst(spawnvehicle, 0);
				toggle_vehicle_mod(spawnvehicle, 18, 1);
				toggle_vehicle_mod(spawnvehicle, 22, 1);
				set_vehicle_mod(spawnvehicle, 16, 5, 0);
				set_vehicle_mod(spawnvehicle, 12, 2, 0);
				set_vehicle_mod(spawnvehicle, 11, 3, 0);
				set_vehicle_mod(spawnvehicle, 14, 15, 0);
				set_vehicle_mod(spawnvehicle, 15, 3, 0);
				set_vehicle_mod(spawnvehicle, 16, 4, 0);
				set_vehicle_mod(spawnvehicle, 13, 2, 0);
				set_vehicle_wheel_type(spawnvehicle, 6);
				set_vehicle_window_tint(spawnvehicle, 5);
				set_vehicle_mod(spawnvehicle, 23, 4, 1);
				set_vehicle_mod(spawnvehicle, 24, 10, 1);
				set_vehicle_mod(spawnvehicle, 0, 1, 0);
				set_vehicle_mod(spawnvehicle, 1, 1, 0);
				set_vehicle_mod(spawnvehicle, 2, 1, 0);
				set_vehicle_mod(spawnvehicle, 3, 1, 0);
				set_vehicle_mod(spawnvehicle, 4, 1, 0);
				set_vehicle_mod(spawnvehicle, 5, 1, 0);
				set_vehicle_mod(spawnvehicle, 6, 1, 0);
				set_vehicle_mod(spawnvehicle, 7, 1, 0);
				set_vehicle_mod(spawnvehicle, 8, 1, 0);
				set_vehicle_mod(spawnvehicle, 9, 1, 0);
				set_vehicle_mod(spawnvehicle, 10, 1, 0);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Car Spawned At Player!");
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
				set_entity_invincible(spawnvehicle, true);
				CarVisibleDamage(spawnvehicle, false);
				ENTITY::SET_ENTITY_PROOFS(spawnvehicle, true, true, true, true, true, false, false, true);
				causelag = false;
				car18 = false;
			}
		}
	}
	if (car) {
		if (HasModelLoaded(vehToSpawnHash)) {
			causelag = true;
			int spawnvehicle;
			float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			spawnvehicle = CreateCar(vehToSpawnHash, Position[0], Position[1], Position[2], get_entity_heading(PlayerPedId()), 1, 0);
			if (DoesEntityExist(spawnvehicle)) {
				SET_PED_INTO_VEHICLE(PlayerPedId(), spawnvehicle, -1);
				void(VEHICLE::SET_VEHICLE_ENGINE_ON(spawnvehicle, true, 1));
				void(VEHICLE::SET_HELI_BLADES_FULL_SPEED(spawnvehicle));
				void(VEHICLE::TOGGLE_VEHICLE_MOD(spawnvehicle, 20, 1));
				void(VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR1(spawnvehicle, 255, 0, 0));
				if (ENTITY::DOES_ENTITY_EXIST(spawnvehicle))
					unk_0xD3850671(spawnvehicle, 1);
				set_ped_into_vehicle(PlayerPedId(), spawnvehicle, -1);
				GetEntityCoords(PlayerPedId(), pcoords);
				pexp = "scr_clown_appears";
				pwvcheck11 = true;
				int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
				set_vehicle_mod_kit(vehicle, 0);
				PaintCar(vehicle, 0, 0);
				PaintCarExtra(vehicle, 0, 0);	PaintCarExtra(vehicle, 0, 112);
				set_number_plate(vehicle, "HASTER");
				SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
				set_vehicle_tyres_can_burst(vehicle, 0);
				toggle_vehicle_mod(vehicle, 18, 1);
				toggle_vehicle_mod(vehicle, 22, 1);
				set_vehicle_mod(vehicle, 16, 5, 0);
				set_vehicle_mod(vehicle, 12, 2, 0);
				set_vehicle_mod(vehicle, 11, 3, 0);
				set_vehicle_mod(vehicle, 14, 15, 0);
				set_vehicle_mod(vehicle, 15, 3, 0);
				set_vehicle_mod(vehicle, 16, 4, 0);
				set_vehicle_mod(vehicle, 13, 2, 0);
				set_vehicle_wheel_type(vehicle, 6);
				set_vehicle_window_tint(vehicle, 5);
				set_vehicle_mod(vehicle, 23, 4, 1);
				set_vehicle_mod(vehicle, 24, 10, 1);
				set_vehicle_mod(vehicle, 0, 1, 0);
				set_vehicle_mod(vehicle, 1, 1, 0);
				set_vehicle_mod(vehicle, 2, 1, 0);
				set_vehicle_mod(vehicle, 3, 1, 0);
				set_vehicle_mod(vehicle, 4, 1, 0);
				set_vehicle_mod(vehicle, 5, 1, 0);
				set_vehicle_mod(vehicle, 6, 1, 0);
				set_vehicle_mod(vehicle, 7, 1, 0);
				set_vehicle_mod(vehicle, 8, 1, 0);
				set_vehicle_mod(vehicle, 9, 1, 0);
				set_vehicle_mod(vehicle, 10, 1, 0);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
				set_entity_invincible(spawnvehicle, true);
				CarVisibleDamage(spawnvehicle, false);
				ENTITY::SET_ENTITY_PROOFS(spawnvehicle, true, true, true, true, true, false, false, true);
				causelag = false;
				car = false;
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Vehicle Spawned!");
			}
		}
	}
	if (pedobject) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		pedobject = false;
	}
	if (spawn_cage) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			int head = get_ped_bone_index(animid, 24818);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			detach_entity(attachobj);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
			detach_entity(attachobj);
		}
		spawn_cage = false;
	}
	if (spawn_egg) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		int head = get_ped_bone_index(GetPlayerHandle(animid), 31086);
		if (HasModelLoaded(model)) {
			x10 = 0.2, y10 = 0, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
		}
		spawn_egg = false;
	}
	if (spawn_sprinkler) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = -0.04, x20 = 0, y20 = 0, z20 = 270;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		spawn_sprinkler = false;
	}
	if (spawn_oldboat) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		spawn_oldboat = false;
	}
	if (spawn_beachbench) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		spawn_beachbench = false;
	}
	if (spawn_dumpster) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		spawn_dumpster = false;
	}
	if (spawn_trashcan) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		spawn_trashcan = false;
	}
	if (spawn_umbrella) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		spawn_umbrella = false;
	}
	if (spawn_cage1) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			AddExplosion(Position[0], Position[1] + 1, Position[2] - 0.8f, BZGAS, 8.0f, true, false, 0.0f);
			AddExplosion(Position[0] - 1, Position[1], Position[2] - 0.8f, BZGAS, 8.0f, true, false, 0.0f);
			AddExplosion(Position[0] + 1, Position[1], Position[2] - 0.8f, BZGAS, 8.0f, true, false, 0.0f);
			AddExplosion(Position[0], Position[1] - 1, Position[2] - 0.8f, BZGAS, 8.0f, true, false, 0.0f);
			detach_entity(attachobj);
		}
		spawn_cage1 = false;
	}
	if (spawn_cage17) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			detach_entity(attachobj);
		}
		spawn_cage17 = false;
	}
	if (spawn_cage18) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = -0.65, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 90;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			freeze_entity_position(attachobj, true);
			detach_entity(attachobj);
		}
		if (HasModelLoaded(model)) {
			x10 = 0.65, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 270;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			freeze_entity_position(attachobj, true);
			detach_entity(attachobj);
		}
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0.45, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			freeze_entity_position(attachobj, true);
			detach_entity(attachobj);
		}
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = -0.45, z10 = 0, x20 = 0, y20 = 0, z20 = 180;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			freeze_entity_position(attachobj, true);
			detach_entity(attachobj);
		}
		if (HasModelLoaded(model)) {
			x10 = -0.65, y10 = 0, z10 = 3.1, x20 = 0.5, y20 = 0, z20 = 90;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			freeze_entity_position(attachobj, true);
			detach_entity(attachobj);
		}
		if (HasModelLoaded(model)) {
			x10 = 0.65, y10 = 0, z10 = 3.1, x20 = 0.5, y20 = 0, z20 = 270;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			freeze_entity_position(attachobj, true);
			detach_entity(attachobj);
		}
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0.45, z10 = 3.1, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			freeze_entity_position(attachobj, true);
			detach_entity(attachobj);
		}
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = -0.45, z10 = 3.1, x20 = 0, y20 = 0, z20 = 180;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
			freeze_entity_position(attachobj, true);
			detach_entity(attachobj);
		}
		spawn_cage18 = false;
	}
	if (spawn_streetlamp) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		spawn_streetlamp = false;
	}
	if (spawn_constbarrel) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		spawn_constbarrel = false;
	}
	if (spawn_dummyplane) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		int head = get_ped_bone_index(GetPlayerHandle(animid), 31086);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0.7, x20 = 0, y20 = 270, z20 = 180;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
		}
		spawn_dummyplane = false;
	}
	if (spawn_dummycar) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		if (HasModelLoaded(model)) {
			x10 = 0, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);
		}
		spawn_dummycar = false;
	}

	if (spawn_dickpole2) {

		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);

		int head = get_ped_bone_index(GetPlayerHandle(animid), 11816);
		if (HasModelLoaded(-2054442544)) {
			x10 = 0.19, y10 = 0.18, z10 = 0.05, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(-2054442544, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);
		}
		spawn_dickpole2 = false;
	}
	if (creator_obj) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		x10 = 0.1, y10 = 0.02, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
		attach_entity_to_entity(objecthandle, GetPlayerHandle(animid), -1, 0, -0.3, 0, 0, 0, 0);
		creator_obj = false;
	}
	if (detachcreator_obj) {
		if (DoesEntityExist(objecthandle)) {
			float Pos[3];
			network_request_control_of_entity(objecthandle);
			GetEntityCoords(objecthandle, Pos);
			float objCoordzZ = Pos[2];
			network_request_control_of_entity(objecthandle);
			objCoordzZ += 0.2;
			objCoordzZ += 0.7;
			detach_entity(objecthandle);
			detachcreator_obj = false;
		}
	}

	if (AttachToCreate331) {
		if (DoesEntityExist(objecthandle) && !DoesEntityExist(objecthandle1)) {
			network_request_control_of_entity(objecthandle);
			network_request_control_of_entity(objecthandle1);
			if (!AttachToCreate331) {
				x10 = -1, y10 = 0, z10 = 0, x20 = 0, y20 = 0, z20 = 90;
				attach_entity_to_entity(objecthandle1, objecthandle, -1, x10, y10, z10, x20, y20, z20);
				AttachToCreate331 = false;
			}
		}
	}
	if (spawn_glove) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
		if (HasModelLoaded(model)) {
			x10 = 0.013, y10 = 0.0, z10 = -0.04, x20 = 90, y20 = 180, z20 = -90;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(PlayerId()), head, x10, y10, z10, x20, y20, z20);
		}
		spawn_glove = false;
	}
	if (spawn_sword) {
		float Position[3];
		GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
		int attachobj;
		model = spawnedobject;
		RequestModel(model);
		int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
		if (HasModelLoaded(model)) {
			x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);
			attach_entity_to_entity(attachobj, GetPlayerHandle(PlayerId()), head, x10, y10, z10, x20, y20, z20);
		}
		spawn_sword = false;
	}
	if (objectspawn) {
		int dummyplanevehicle;
		int attach;
		if (!IsModelInCdImage(model)) { objectspawn = false; }
		RequestModel(model);
		if (HasModelLoaded(model)) {
			float Position[3], dim_min[3], dim_max[3];
			get_model_dimensions(get_entity_model(PlayerPedId()), dim_min, dim_max);
			get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0], dim_min[1] + 4.0f, 0.0f, Position);
			get_ground_z_for_3d_coord(Position[0], Position[1], Position[2], &Position[2]);
			if (ufomode) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode = false;
			}
			if (ufomode2) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode2 = false;
			}
			if (ufomode3) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode3 = false;
			}
			if (ufomode4) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode4 = false;
			}
			if (ufomode5) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode5 = false;
			}
			if (ufomode6) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode6 = false;
			}
			if (ufomode7) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);

				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode7 = false;
			}
			if (ufomode8) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode8 = false;
			}
			if (ufomode9) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				ufo2 = create_object(model, Position[0], Position[1], Position[2]);
				ufo3 = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				attach_entity_to_entity(ufo2, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10 + 1.5, z10, x20, y20, z20);
				attach_entity_to_entity(ufo3, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10 - 1.5, z10, x20, y20, z20);
				ufomode9 = false;
			}
			if (ufomode10) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				ufo2 = create_object(model, Position[0], Position[1], Position[2]);
				ufo3 = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				attach_entity_to_entity(ufo2, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10 + 1, z10, x20, y20, z20);
				attach_entity_to_entity(ufo3, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10 - 1, z10, x20, y20, z20);
				ufomode10 = false;
			}
			if (ufomode11) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				ufo2 = create_object(model, Position[0], Position[1], Position[2]);
				ufo3 = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				attach_entity_to_entity(ufo2, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10 + 0.2, z10, x20, y20, z20);
				attach_entity_to_entity(ufo3, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10 - 0.8, z10, x20, y20, z20);
				ufomode11 = false;
			}
			if (ufomode12) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				ufo2 = create_object(model, Position[0], Position[1], Position[2]);
				ufo3 = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				attach_entity_to_entity(ufo2, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10 + 1.5, z10, x20, y20, z20);
				attach_entity_to_entity(ufo3, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10 - 1.3, z10, x20, y20, z20);
				ufomode12 = false;
			}
			if (ufomode13) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode13 = false;
			}
			if (ufomode14) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode14 = false;
			}
			if (ufomode15) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode15 = false;
			}
			if (ufomode16) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				set_entity_visible(GetCarCharIsIn(PlayerPedId(), 0), false);
				set_entity_visible(PlayerPedId(), true);
				set_entity_visible(ufo, true);
				ufomode15 = false;
			}
			if (ufomode17) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				set_entity_visible(GetCarCharIsIn(PlayerPedId(), 0), false);
				set_entity_visible(PlayerPedId(), true);
				set_entity_visible(ufo, true);
				ufomode15 = false;
			}
			if (normalspawn1) {
				float h;
				h = get_entity_heading(PlayerPedId());
				//First Ramp
				ufo = create_object(model, -1298.707642, -3173.033447, 14.912920);
				ufo1 = create_object(model, -1274.513550, -3186.746826, 30.812935);
				ufo2 = create_object(model, -1253.518677, -3198.157959, 53.742953);
				//Second Ramp
				ufo3 = create_object(model, -1291.809329, -3161.021729, 14.912920);
				ufo4 = create_object(model, -1267.615237, -3174.735107, 30.812935);
				ufo5 = create_object(model, -1246.620364, -3186.046143, 53.742953);

				set_entity_rotation(ufo, 23, 0, 240, 2, 1);
				set_entity_rotation(ufo1, 37, 0, 241, 2, 1);
				set_entity_rotation(ufo2, 51, 0, 242, 2, 1);
				set_entity_rotation(ufo3, 23, 0, 240, 2, 1);
				set_entity_rotation(ufo4, 37, 0, 241, 2, 1);
				set_entity_rotation(ufo5, 51, 0, 242, 2, 1);
				freeze_entity_position(ufo, true);
				freeze_entity_position(ufo1, true);
				freeze_entity_position(ufo2, true);
				freeze_entity_position(ufo3, true);
				freeze_entity_position(ufo4, true);
				freeze_entity_position(ufo5, true);
				int myhandle = PlayerPedId(),
					myvehicle;
				if (is_ped_in_any_vehicle(myhandle)) {
					myvehicle = GetCarCharIsIn(myhandle, 0);
					if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
						set_entity_coords(myvehicle, -1331.138184, -3174.181152, 13.944813, 0, 0, 0, 1);
					} else {
						set_entity_coords(myhandle, -1331.138184, -3174.181152, 13.944813, 0, 0, 0, 1);
					}
					ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Super Ramp Spawned!");
					normalspawn1 = false;
				}
			}
			if (normalspawn2) {
				float h;
				h = get_entity_heading(PlayerPedId());
				//Above Ramp
				//ufo0 = create_object(model, -20.663967, -850.644409, 325.828614);
				//Main Ramp
				ufo = create_object(model, -51.363716, -832.748779, 320.31189);
				ufo1 = create_object(model, -20.663967, -850.644409, 316.828614);
				ufo2 = create_object(model, 8.536072, -868.040161, 307.344971);
				ufo3 = create_object(model, 37.736111, -885.435913, 294.961151);
				ufo4 = create_object(model, 66.93615, -902.831665, 282.577331);
				ufo5 = create_object(model, 96.136189, -920.227417, 270.193511);
				ufo6 = create_object(model, 125.336228, -937.623169, 257.809691);
				ufo7 = create_object(model, 154.536267, -955.018921, 245.425871);
				ufo8 = create_object(model, 183.736306, -972.414673, 233.042051);
				ufo9 = create_object(model, 212.936345, -989.810425, 220.658231);
				ufo10 = create_object(model, 242.136384, -1007.206177, 208.274411);
				ufo11 = create_object(model, 271.336423, -1024.601929, 195.890591);
				ufo12 = create_object(model, 300.536462, -1041.997681, 183.506771);
				ufo13 = create_object(model, 329.736501, -1059.393433, 171.122951);
				ufo14 = create_object(model, 358.93654, -1076.789185, 158.739131);
				ufo15 = create_object(model, 388.136579, -1094.184937, 146.355311);
				ufo16 = create_object(model, 417.336618, -1111.580689, 133.971491);
				ufo17 = create_object(model, 446.536657, -1128.976441, 121.587671);
				ufo18 = create_object(model, 475.736696, -1146.372193, 109.203851);
				ufo19 = create_object(model, 504.936735, -1163.767945, 96.820031);
				ufo20 = create_object(model, 534.136774, -1181.163697, 84.436211);
				ufo21 = create_object(model, 561.929993, -1197.859619, 76.370663);

				set_entity_rotation(ufo, 0, 0, 239, 2, 1);
				set_entity_rotation(ufo1, 11, 0, 59, 2, 1);
				set_entity_rotation(ufo2, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo3, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo4, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo5, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo6, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo7, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo8, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo9, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo10, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo11, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo12, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo13, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo14, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo15, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo16, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo17, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo18, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo19, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo20, 20, 0, 59, 2, 1);
				set_entity_rotation(ufo21, 10, 0, 59, 2, 1);
				freeze_entity_position(ufo, true);
				freeze_entity_position(ufo1, true);
				freeze_entity_position(ufo2, true);
				freeze_entity_position(ufo3, true);
				freeze_entity_position(ufo4, true);
				freeze_entity_position(ufo5, true);
				freeze_entity_position(ufo6, true);
				freeze_entity_position(ufo7, true);
				freeze_entity_position(ufo8, true);
				freeze_entity_position(ufo9, true);
				freeze_entity_position(ufo10, true);
				freeze_entity_position(ufo11, true);
				freeze_entity_position(ufo12, true);
				freeze_entity_position(ufo13, true);
				freeze_entity_position(ufo14, true);
				freeze_entity_position(ufo15, true);
				freeze_entity_position(ufo16, true);
				freeze_entity_position(ufo17, true);
				freeze_entity_position(ufo18, true);
				freeze_entity_position(ufo19, true);
				freeze_entity_position(ufo20, true);
				freeze_entity_position(ufo21, true);
				int myhandle = PlayerPedId(),
					myvehicle;
				if (is_ped_in_any_vehicle(myhandle)) {
					myvehicle = GetCarCharIsIn(myhandle, 0);
					if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
						set_entity_coords(myvehicle, -73.92588, -818.455078, 326.174377, 0, 0, 0, 1);
					} else {
						set_entity_coords(myhandle, -73.92588, -818.455078, 326.174377, 0, 0, 0, 1);
					}
					ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Maze Ramp Spawned!");
					normalspawn1 = false;
				}
			}
			if (normalspawn) {
				float h;
				int object;
				h = get_entity_heading(PlayerPedId());
				object = create_object(model, Position[0], Position[1], Position[2]);
				objectcoordx = Position[0], objectcoordy = Position[1], objectcoordz = Position[2], objecthandle = object, objectheading = h;
				objectpitch = 0, objectroll = 0, objectyaw = 0;
				set_entity_rotation(objecthandle, 0, 0, h, 2, 1);
				freeze_entity_position(object, true);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Object Spawned!");
				normalspawn = false;
			}
			if (ufomode133) {
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_heading(ufo, h);
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);
				ufomode133 = false;
			}
			if (objectcopy) {
				float h;
				int object;
				h = get_entity_heading(objecthandle);
				printf("Got my heading\n");
				float coppos[3];
				GetEntityCoords(objecthandle, coppos);
				object = create_object(model, coppos[0], coppos[1], coppos[2]);
				objectcoordx = coppos[0], objectcoordy = coppos[1], objectcoordz = coppos[2], objecthandle = object, objectheading = h;
				objectpitch = 0, objectroll = 0, objectyaw = 0;
				set_entity_rotation(objecthandle, 0, 0, h, 2, 1);
				freeze_entity_position(object, true);
				objectcopy = false;
			}
			if (waterwheel) {
				float z;
				float h;
				int object;
				h = get_entity_heading(PlayerPedId());
				waterobj = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_coords(waterobj, -1938.795410, -995.770630, 14.479980, 1, 0, 0, 1);
				set_entity_rotation(waterobj, 180, 90, 180, 2, 1);
				freeze_entity_position(waterobj, true);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Drive On Water:~HUD_COLOUR_YELLOWLIGHT~ON");
				waterwheel = false;
			}
			if (attachspawn) {
				printf("Hit attachspawn/n");
				int Handle = GetPlayerHandle(AttachPedHandle);
				printf("Hit Handle/n");
				attach = create_object(model, Position[0], Position[1], Position[2]);
				printf("Hit Froze./n");
				attach_entity_to_entity(Handle, attach, 0, 0, 0, 0, 0, 0, 0);
				ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Attached to player!");
				attachspawn = false;
			}
			objectspawn = false;
			scriptsetModel - 1;
		}
	}
	if (comps) {
		set_ped_random_component_variation(PlayerPedId(), 0);
		comps = false;
	}
	if (comps2) {
		network_request_control_of_entity(objecthandle);
		set_ped_random_component_variation(objecthandle, 0);
		comps2 = false;
	}

	if (warp) {
		int Handle = GetPlayerHandle(CarPed);

		int myhandle = GetPlayerHandle(PlayerId());

		int myvehicle;
		int tick = 0;
		if (is_ped_in_any_vehicle(Handle)) {

			myvehicle = GetCarCharIsIn(Handle, 0);

			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {

				int var4 = -1;
				int pasnmax;
				pasnmax = get_vehicle_max_number_of_passengers(myvehicle);

				while (var4 < pasnmax) {
					if (is_vehicle_seat_free(myvehicle, var4)) {

						set_ped_into_vehicle(myhandle, myvehicle, var4);
						ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Teleported to free seat!");
						break;
					} else {
						var4++;
					}
				}
				if (var4 > pasnmax) {
					ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed, Player may not be in any vehicle or vehicle has no available seat");
				}
			}
		}
		warp = false;
	}
	if (nap) {
		int myhandle = GetPlayerHandle(PlayerId());

		int myvehicle;
		int theirPedHandle = GetPlayerHandle(animid);
		int tick = 0;
		if (is_ped_in_any_vehicle(myhandle)) {

			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {

				int var4 = -1;
				int pasnmax;
				pasnmax = get_vehicle_max_number_of_passengers(myvehicle);

				while (var4 < pasnmax) {
					if (is_vehicle_seat_free(myvehicle, var4)) {

						ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Player should now enter your vehicle");
						task_enter_vehicle(theirPedHandle, myvehicle, -1, var4, 5.0f, 1, 0);
						break;
					} else {
						var4++;
					}
				}
				if (var4 > pasnmax) {
					ShowMessageOnScreen("~HUD_COLOUR_YELLOWLIGHT~ Failed, Seats full!");
				}
			}
		}
		nap = false;
	}
	scriptsetModel = -1;
	return Return;
	scriptsetModel = -1;
}

void __declspec(naked) InGameHookDest() {
	__asm {

		bl doFramefunc
			mr        r3, r26
			addi      r1, r1, 0x90
			ld        r26, -0x38(r1)
			ld        r27, -0x30(r1)
			ld        r28, -0x28(r1)
			ld        r29, -0x20(r1)
			ld        r30, -0x18(r1)
			ld        r31, -0x10(r1)
			lwz       r12, -0x8(r1)
			mtspr   LR, r12
			blr
	}
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Auth goes here
/*VOID CpuKeyCheck() {
	BYTE hvCpuFuse1[0x10];
	BYTE cpuKeyBytes[0x10];
	//BYTE CPUKey[0x10] = { 0x3A, 0x30, 0xA7, 0x46, 0xD9, 0x15, 0xA7, 0x46, 0xAB, 0xF3, 0xAA, 0xDB, 0x01, 0x1A, 0x95, 0x68 };//Yay 
	//D33DC71DA1289D6E1E534BB54438A08B
	BYTE CPUKey[0x10] = { 0xD3, 0x3D, 0xC7, 0x1D, 0xA1, 0x29, 0x9D, 0x6E, 0x1E, 0x53, 0x4B, 0xB5, 0x44, 0x38, 0xA0, 0x8B };//Yay 
	HvPeekBytes(0x20, cpuKeyBytes, 0x10);
	//get cpu from fuse
	QWORD f1p1 = HvGetFuseLine(3) | HvGetFuseLine(4);
	QWORD f1p2 = HvGetFuseLine(5) | HvGetFuseLine(6);
	memcpy(hvCpuFuse1, &f1p1, 8);
	memcpy(hvCpuFuse1 + 8, &f1p2, 8);
	//now make sure cpus match
	if (memcmp(hvCpuFuse1, cpuKeyBytes, 0x10) != 0) HalReturnToFirmware(HalResetSMCRoutine);
	if (memcmp(hvCpuFuse1, CPUKey, 0x10) != 0) HalReturnToFirmware(HalResetSMCRoutine);
}*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////
HRESULT HvPeekBytes(QWORD Address, PVOID Buffer, DWORD Size);
#define hookFunctionStart(Address, SaveStubAddress, Destination) hookFunctionStartEx(Address, SaveStubAddress, Destination)
DWORD WINAPI MainThread(LPVOID) 
{
	FreeMemoryPointer = ResolveFunction("xam.xex", 2601) + 0x8000;
	string PD("Error!, (");
	DWORD TitleID, tempTileID,
		GTAID = 0x545408A7,
		DASH = 0xFFFE07D1,
		entryAddress = (int)HvPeekBytes,
		Data = 0x38600000;
	for(;;) 
	{
		tempTileID = XamGetCurrentTitleId();

start:
		if(tempTileID == DASH && TitleID != DASH)
		{
			PatchInJump((PDWORD)(ResolveFunction("xam.xex", 0x195)), (DWORD)XeXGetModuleHandleHook, false);
			Sleep(2000);
		}
		if(tempTileID == GTAID && TitleID != GTAID) 
		{
		//game just loaded


			    
#ifdef DEVKIT

#else
			memcpy(&Data, (PBYTE)0x822211C4, 4);
#endif
			Data = 0x60000000;
			SetupMenu();
			InitNativeHook();
		
			printf("Removed breakpoint\n");
			
			hook1 = new EncryptedDWORD;
			hook2 = new EncryptedDWORD;
			hook3 = new EncryptedDWORD;
			nativeHook = new EncryptedDWORD;
			printToScreen = new EncryptedDWORD;
			customGetModelDim = new EncryptedDWORD;

			hook1->SetValue(0x835253D0); //TU27
			hook2->SetValue(0x835252F8); //TU27
			hook3->SetValue(0x83525E00); //TU27 
			nativeHook->SetValue(0x83524A28); //TU27
			printToScreen->SetValue(0x8291CA80); //TU27
			customGetModelDim->SetValue(0x8378E460); //TU27
			*(long long int*)0x838B60F4 = 0x00000422F6D6AA59;//script bypass
				*(int*)0x83288A30 = 0x48000104;//script bypass
				*(char*)0x82CF782B = 1;//script bypass
				*(int*)0x82FDB564 = 0x3FC0022C;//script bypass
				*(int*)(0x82FDB564 + 0x4) = 0x63DEC800;//script bypass
				*(int*)(0x82FDB564 + 0x8) = 0x93DD0018;//script bypass
				*(int*)(0x82FDB564 + 0xC) = 0x3C60838B;//script bypass
				*(int*)(0x82FDB564 + 0x10) = 0x606360F4;//script bypass
				*(int*)(0x82FDB564 + 0x14) = 0xE8630000;//script bypass
				*(int*)(0x82FDB564 + 0x18) = 0x907D001C;//script bypass
				*(int*)(0x82FDB564 + 0x1C) = 0x3C60838B;//script bypass
				*(int*)(0x82FDB564 + 0x20) = 0x606360F4;//script bypass
				*(int*)(0x82FDB564 + 0x24) = 0xF8630000;//script bypass
				*(int*)(0x82FDB564 + 0x28) = 0x3C6082FD;//script bypass
				*(int*)(0x82FDB564 + 0x2C) = 0x6063B564;//script bypass
				*(int*)(0x82FDB564 + 0x30) = 0xF8630000;//script bypass
				*(BYTE*)0x82CF782B = 0x01;
			PatchInJump((PDWORD)hook1->GetValue(), (DWORD)GtavNativeLoadHook, FALSE);//0x834C0558
			PatchInJump((PDWORD)hook2->GetValue(), (DWORD)InGameHookDest, FALSE);//0x823B0FF8
			hookFunctionStart(hook3->GetValue(), VM_ExecuteStub, VM_ExecuteHook);//0x82538F60

			//Welcome Message Here
			Sleep(1500);
			XNotifyUI(L"Welcome! | (Client) {Developer}>>> xxHASTERxx |");
			XNotifyUI(L"Welcome! | Visit XBL.CLOUD | To buy Time on Server |");
			XNotifyUI(L"Welcome! | RIGHT + X To Open |");
			XNotifyUI(L"Welcome! | Script Bypass Enabled |");
			
		}

else if(tempTileID != GTAID && TitleID == GTAID) 
{
		//game just un-loaded
		inputButtonsPressed = false;
		enableMenu = false;
		}
		TitleID = tempTileID;
		Sleep(60);
	}
}






//////////////////////////////////////////
//DO NOT ADD ANYTHING PAST THIS LINE
//////////////////////////////////////////
#pragma endregion

/// [Don't touch this].//////////////////////
#pragma region Core 3

#ifdef PRIVATE
// functions for initalizing the xex, have to do this stuff or it crashes.
extern "C" int XapiInitProcess();
extern "C" int XapiCallThreadNotifyRoutines(int);
extern "C" int XapiPAL50Incompatible();
extern "C" int XamTerminateTitle();
extern "C" int _mtinit();
extern "C" int _rtinit();
extern "C" int _cinit(int);
extern "C" int _cexit(int);
extern "C" int _CRT_INIT(...);
extern "C" int __CppXcptFilter(...);

extern "C" static int __proc_attached;

// This function is for flushing the instruction cache. If we dont do this the cpu runs the breakpoints
extern "C" VOID KeSweepIcacheRange(PVOID Address, DWORD cbBytes);

BOOL APIENTRY DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved);

unsigned char branchReplaceData[1024 * 1024] = {'b', 'r', 'a', 'n', 'c', 'h', '6', '6', '6'};
//unsigned char branchReplaceData[1024 * 1024]; //if I don't want to use the security uncomment this.

// This stuff is done all in its own section so it can unobfuscate the text section.
#pragma code_seg(push, r1, ".ptext")

// ripped off microsofts dllcrt0.c for this
__declspec(noinline) BOOL __cdecl realEntryPoint(
        HANDLE  hDllHandle,
        DWORD   dwReason,
        LPVOID  lpreserved
        )
{
        BOOL retcode = TRUE;

		// location of the patch data
		DWORD procPatchData = (DWORD)branchReplaceData;

		while (true) {
			DWORD patchOffset = *(DWORD*)procPatchData;      // patch offset
			DWORD patchValue = *(DWORD*)(procPatchData + 4); // patch data

			// if we are at the end of the patches break out
			if (patchOffset == 0) {
				break;
			}

			// Set the data
			*(DWORD*)patchOffset = patchValue;


			__dcbst(0, (void*)patchOffset);
			__sync();

			KeSweepIcacheRange((PVOID)patchOffset, 4);


			procPatchData += 8;
		}

        if ( (dwReason == DLL_PROCESS_DETACH) && (__proc_attached == 0) )
            return FALSE;

        __try {
            if ( dwReason == DLL_PROCESS_ATTACH || dwReason == DLL_THREAD_ATTACH )
            {
                retcode = _CRT_INIT(hDllHandle, dwReason, lpreserved);

                if ( !retcode )
                    return FALSE;
            }

            retcode = DllMain(hDllHandle, dwReason, lpreserved);

            if ( (dwReason == DLL_PROCESS_ATTACH) && !retcode )
            {
                DllMain(hDllHandle, DLL_PROCESS_DETACH, lpreserved);
                _CRT_INIT(hDllHandle, DLL_PROCESS_DETACH, lpreserved);
            }

            if ( (dwReason == DLL_PROCESS_DETACH) ||
                 (dwReason == DLL_THREAD_DETACH) )
            {
                if ( _CRT_INIT(hDllHandle, dwReason, lpreserved) == FALSE )
                    retcode = FALSE ;

            }
        } __except ( __CppXcptFilter(GetExceptionCode(), GetExceptionInformation()) ) {
            return FALSE;
        }

        return retcode ;
}

// end of this section. everything else you want protected should be in the text section.
#pragma code_seg(pop, r1)

#endif

BOOL APIENTRY DllMain( HANDLE hModule, DWORD dwReason, LPVOID lpReserved)  
{
	if (dwReason == DLL_PROCESS_ATTACH) 
	{
		HANDLE hThread;
		DWORD dwThreadId;
		ExCreateThread(&hThread, 0, &dwThreadId, (PVOID)XapiThreadStartup, MainThread, 0, 2);
	}

	return TRUE;
}

#pragma endregion

///////////////////////////////////////////////////////////////
/////////////////////[End of the line]/////////////////////////
//////////////////////////////////////////////////////////////7/


